!function(t){function e(e){for(var r,l,i=e[0],u=e[1],c=e[2],f=0,d=[];f<i.length;f++)l=i[f],a[l]&&d.push(a[l][0]),a[l]=0;for(r in u)Object.prototype.hasOwnProperty.call(u,r)&&(t[r]=u[r]);for(s&&s(e);d.length;)d.shift()();return o.push.apply(o,c||[]),n()}function n(){for(var t,e=0;e<o.length;e++){for(var n=o[e],r=!0,i=1;i<n.length;i++){var u=n[i];0!==a[u]&&(r=!1)}r&&(o.splice(e--,1),t=l(l.s=n[0]))}return t}var r={},a={1:0},o=[];function l(e){if(r[e])return r[e].exports;var n=r[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,l),n.l=!0,n.exports}l.m=t,l.c=r,l.d=function(t,e,n){l.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,e){if(1&e&&(t=l(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(l.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)l.d(n,r,function(e){return t[e]}.bind(null,r));return n},l.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(e,"a",e),e},l.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},l.p="";var i=window.webpackJsonp=window.webpackJsonp||[],u=i.push.bind(i);i.push=e,i=i.slice();for(var c=0;c<i.length;c++)e(i[c]);var s=u;o.push([7,0,3]),n()}({3:function(t,e){(function(){var t,e,n,r,a,o;a=void 0,d3.ternary={},n=Math.sqrt(3)/2,tickValues=[.2,.4,.6,.8,1],o=function(){var t,e,n,r;for(r="",n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",t=0;t<=3;++t)e=Math.floor(Math.random()*n.length),r+=n.charAt(e);return r},r=function(t){return t||(t="linear"),a=d3.svg.line().x(function(t){return t[0]}).y(function(t){return t[1]}).interpolate(t)},e=[0,120,240],d3.ternary.graticule=function(){var t,e,n,r,a;return e=.1,r=null,n=function(){var t,n,r;for(r=[],n=t=e;n<1;)r.push(n),n+=t;return r},a=function(){var t,n;if(n=[],null==r)return n;for(t=r;t<1;)t%e!=0&&n.push(t),t+=r;return n},(t=function(t){var e,r;return r=[0,1,2].map(function(){return d3.svg.axis().tickValues(n())}),e=function(e,r){var l,i,u,c;return l=d3.select(this),(u=l.selectAll("path.minor").data(a())).enter().append("path").attr("class",`minor axis-${r}`),(c=l.selectAll("path.major").data(n())).enter().append("path").attr("class",`major axis-${r}`),i=function(){return e.scale(t.scales[r]),u.attr("d",t.rule(r)),c.attr("d",t.rule(r))},t.on("resize."+o(),i),i()},t.axes().selectAll(".graticule").data(r).enter().append("g").attr("class","graticule").attr("clip-path","url(#axesClip)").each(e)}).axes=function(){return gratAxes},t.majorInterval=function(n){return n?(e=n,t):e},t.minorInterval=function(e){return e?(r=e,t):r},t},d3.ternary.scalebars=function(t){var n,r,a,l,i,u;return null==t&&(t={}),i=null,l=t.labels||null,r=[0,1,2].map(function(t){return d3.svg.axis().tickSize(10).tickFormat(d3.format("%")).tickValues(tickValues).orient("top")}),n=function(t,e){return 0===e?d3.select(this).selectAll("text").attr("transform",function(t){const e=d3.select(this).attr("y");return"translate(22 "+-e+") rotate(60 0 "+4.5*e+")"})&&d3.select(this).selectAll("line").attr("transform",function(t){const e=d3.select(this).attr("y");return"translate(0 "+-e+") rotate(-30 0 "+1*e+")"}):d3.select(this).selectAll("text").attr("transform",function(t){const e=d3.select(this).attr("y");return"translate(-27 "+-e+") rotate(-120 0 "+2.5*e+")"})&&d3.select(this).selectAll("line").attr("transform",function(t){const e=d3.select(this).attr("y");return"translate(0 "+-e+") rotate(-30 0 "+1*e+")"})},a=function(t,e){var n,r,a;return n=-30,r="translate("+(a=i.width())/2+")",2===e&&(n=42,r=" rotate(-180 0 0) translate("+-a/2+")"),d3.select(this).attr("class","label").attr("transform",r).attr("y",n).attr("text-anchor","middle").text(t)},(u=function(t){var u,c;return(u=(i=t).axes().selectAll(".bary-axis").data(e).enter().append("g").attr("class",function(t,e){return t="bary-axis",2===e&&(t+=" bottom"),t})).each(function(){return d3.select(this).append("text").attr("class","label")}),c=function(){var t,e,o;if(r.forEach(function(t,e){var n;return n=i.scales[e].copy(),t.scale(n)}),o=i.radius(),e=i.center(),u.each(function(t,e){var n;return n=d3.select(this),r[e](n)}).attr("transform",function(t,n){return"rotate("+(120*n-60)+" "+e[0]+" "+e[1]+") translate(0 "+o/2+")"}).each(n),t)return i.axes().selectAll(".bary-axis .label").data(l).each(a)},i.on("resize."+o(),c),c()}).labels=function(t){return null==t?l:(l=t,u)},u.axes=r,u},d3.ternary.vertexLabels=function(t){var e=null,n=[0,60,-60];return function(r){var a,l,i;return i=r.vertices(20),a=t.map(function(t,e){return{label:t,vertex:i[e]}}),(e=r.axes().selectAll(".vertex-label").data(a)).enter().append("text").text(function(t){return t.label}).attr("dy",".35em").attr("text-anchor","middle").attr("class",function(t){return"vertex-label "+t.label.toLowerCase()}),l=function(){return e.attr({transform:function(t,e){var r;return"translate("+(r=t.vertex)[0]+","+r[1]+")rotate("+n[e]+")"}})},r.on("resize."+o(),l),l(),e}},d3.ternary.neatline=function(){return function(t){return t.node().append("use").attr("class","neatline").attr("xlink:href","#bounds")}},t=function(t){var e,n,r,a,l,i,u,c,s;for(r=t.scales.map(function(t){return t.domain()}),c=[],i=u=0;u<=2;i=++u)-1===(s=i-1)&&(s=2),(n=r.map(function(t){return t[0]}))[s]=r[s][1],c.push(n),(n=r.map(function(t){return t[0]}))[i]=r[i][1],c.push(n);return e=d3.select(this),null==(l=e.select("#bounds")).node()&&(l=e.append("polygon")),l.datum(c).attr({id:"bounds"}),a=function(){return l.attr({points:function(e){return e.map(function(e){return(i=t.rawPoint(e)).join(",")}).join(" ")}})},t.on("resize."+o(),a),a()},d3.ternary.plot=function(){var e,o,l,i,u,c,s,f,d,p,m,h,y,v,g,b,x,w;return m=500,p=500,d={top:50,bottom:50,left:50,right:50},y=null,c=null,w=null,x=null,o=null,h=null,i=null,b=!1,l=[],g=[0,1,2].map(function(){return d3.scale.linear().domain([0,1]).range([0,1])}),u=d3.dispatch("resize"),f=function(t){return t-d.left-d.right},s=function(t){return t-d.top-d.bottom},v=function(){var n,r;if(null==w&&(w=f(m)),null==c&&(c=s(p)),null==y&&(y=w/Math.sqrt(3)),[w/2,y],null!=x){for(x.attr({transform:"translate("+d.left+","+d.top+")",width:w,height:c}),d3.select(x.node().parentElement).attr({width:m,height:p}),n=0,r=g.length;n<r;n++)g[n].range([0,w]);return t.call(i.node(),e),b&&h.attr({"clip-path":"url(#axesClip)"}),u.resize()}},(e=function(t){return x=t.append("g"),i=x.append("defs"),o=x.append("g").attr("id","axes"),h=x.append("g").attr("id","plot"),v(),i.append("clipPath").attr({id:"axesClip"}).append("use").attr({"xlink:href":"#bounds"}),l&&l.forEach(function(t){return t(e)}),l=[]}).on=function(t,e){return u.on(t,e)},e.fit=function(t,r){var a,o,l;return 2===arguments.length?(o=f(t),l=(a=s(r))<=n*o?2*a/3:o/Math.sqrt(3)):l=o/Math.sqrt(3),e.radius(l),e},e.node=function(){return x},e.axes=function(){return o},e.plot=function(){return h},e.call=function(t){return null!=x?t(e):l.push(t),e},e.scales=g,e.margin=function(t){return null==t?d:(d=null!=t.left?t:{left:t,right:t,top:t,bottom:t},v(),e)},e.point=function(t){var n;return 0!==(n=d3.sum(t))&&(t=t.map(function(t){return t/n})),e.rawPoint(t)},e.rawPoint=function(t){var e,r,a,o;return 0===d3.sum(t)?[0,0]:(e=g[0],r=g[1],g[2],a=t[0],o=t[1],t[2],[e(a)/2+r(o),r((1-a)*n)])},e.value=function(t){var e,r,a,o,l,i;return l=t[0],i=t[1],e=g[0],r=g[1],g[2],[a=1-r.invert(i)/n,o=r.invert(l-e(a)/2),1-a-o]},e.path=function(t,n,o){var l;return r(o),n||(n=function(t){return t}),l=t.map(function(t){return e.point(n(t))}),a(l)},e.area=function(t,n,o){var l;return r(o),n||(n=function(t){return t}),l=t.map(function(t){return e.point(n(t))}),a(l)+"Z"},e.rule=function(t){return function(n){var r;return r=[],0===t?r=[[0,1-n,n],[1-n,0,n]]:1===t?r=[[0,n,1-n],[1-n,n,0]]:2===t&&(r=[[n,0,1-n],[n,1-n,0]]),e.path(r)}},e.vertices=function(t){return null==t&&(t=0),[0,-120,120].map(function(e){var n;return n=e*Math.PI/180,[w/2+Math.sin(n)*(y+t),y-Math.cos(n)*(y+t)]})},e.range=function(t){return e},e.radius=function(t){return null==t?y:(y=t,c=3*t/2,w=t*Math.sqrt(3),p=c+d.top+d.bottom,m=w+d.left+d.right,v(),e)},e.center=function(){return[w/2,y]},e.height=function(){return c},e.width=function(){return w},e.clip=function(t){return null==t?b:(b=t,e)},e}}).call(this),t.exports=d3.ternary},7:function(t,e,n){"use strict";n.r(e);var r=n(0),a=n.n(r),o=n(1),l=n.n(o),i=n(4),u=n.n(i);n(3);let c,s=!1;const f=["colour","color","shape","linestyle","title","opacity"];function d(t){c?JSON.stringify(t.slice(0,3))!==JSON.stringify(c)&&u()("Your columns in Points, Lines and areas don't seem to match",`Your columns you entered first are "${c}" and for your columns now are "${t.slice(0,3)}". Your data will still be plotted, but it might not appear the way you intended.`,"warning"):(c=t.slice(0,3),s||(!function(t){const e=t.columns.slice(0,3);C.call(a.a.ternary.vertexLabels(e))}({columns:t}),s=!0)),t.some(t=>{f.includes(t)&&u()("Reserved column name",`You can't use any of the following names as your columns names: ${f.join(", ")}`,"error")})}const p=function(t){let e=t;const n=e.shift();return d(n),(e=(e=e.map(t=>t.filter(t=>null!==t))).filter(t=>0!==t.length)).map(t=>{return n.reduce(function(e,n,r){return e[n.toLowerCase()]=t[r],e},{})})},m=function(t){let e=t;const n=e.shift();d(n),e=e.map(t=>t.filter(t=>null!==t));const r=[];let a=[];for(let t=0;t<e.length;t++)0!==e[t].length?a.push(e[t]):0===e[t].length&&(0!==a.length&&r.push(a),a=[]);return r.map(t=>{return t.map(function(t){return n.reduce(function(e,n,r){return e[n.toLowerCase()]=t[r],e},{})})})},h={defaults:{pointColor:"black",pointShape:"circle",lineStyle:"none",lineColor:"black",lineStrokewidth:"4px",areaColor:"gold",areaOpacity:.2},setListeners:function(){document.querySelector('select[name="defaultColorPoints"]').onchange=function(){h.defaults.pointColor=event.target.value},document.querySelector('select[name="defaultShape"]').onchange=function(){h.defaults.pointShape=event.target.value},document.querySelector('select[name="defaultColorLines"]').onchange=function(){h.defaults.lineColor=event.target.value},document.querySelector('select[name="defaultLineStyle"]').onchange=function(){h.defaults.lineStyle=event.target.value},document.querySelector('select[name="defaultColorAreas"]').onchange=function(){h.defaults.areaColor=event.target.value},document.querySelector('select[name="defaultAreaOpacity"]').onchange=function(){h.defaults.areaOpacity=event.target.value}},Points:function(t){const e=t.slice([0,3]),n=a.a.svg.symbol();let r;C.plot().selectAll(".point").data(e).enter().append("path").attr("class","point").attr("fill",function(t){return t.color?t.color.trim():t.colour?t.colour.trim():h.defaults.pointColor}).attr("fill-opacity",function(t){return t.opacity?t.opacity.trim():1}).attr("d",n.type(function(t){return t.shape?t.shape.trim():h.defaults.pointShape})).attr("transform",function(t){const e=Object.keys(t);r=[t[e[0]],t[e[2]],t[e[1]]];const n=C.point(r);return"translate("+n[0]+","+n[1]+")"}).on("mouseover",L).on("mouseout",function(t){a.a.selectAll(".help-line").remove()}).append("title").text(function(t){const e=Object.keys(t),n=`${A(e[0])}: ${t[e[0]]}, ${A(e[2])}: ${t[e[2]]}, ${A(e[1])}: ${t[e[1]]}`;return t.title?`${A(t.title.trim())}; ${n}`:n})},Lines:function(t){C.plot().selectAll(".line").data(t).enter().append("path").attr("class","ternary-line").attr("d",function(t){let e=[];const n=Object.keys(t[0]);for(let r=0;r<=t.length-1;r+=1){const a=[+t[r][n[0]],+t[r][n[2]],+t[r][n[1]]];e.push(a)}return C.path(e)}).attr("stroke-dasharray",function(t){return t[0].linestyle?t[0].linestyle.trim():h.defaults.lineStyle}).attr("stroke",function(t){return t[0].color?t[0].color.trim():t[0].colour?t[0].colour.trim():h.defaults.lineColor}).attr("stroke-opacity",function(t){return t[0].opacity?t[0].opacity.trim():1}).attr("fill-opacity","0").attr("stroke-width",function(t){return t[0].strokewidth?t[0].strokewidth:h.defaults.lineStrokewidth}).append("title").text(function(t){return t[0].title?A(t[0].title.trim()):void 0})},Areas:function(t){C.plot().selectAll(".area").data(t).enter().append("path").attr("class","ternary-area").attr("d",function(t){let e=[];const n=Object.keys(t[0]);for(let r=0;r<=t.length-1;r+=1){const a=[+t[r][n[0]],+t[r][n[2]],+t[r][n[1]]];e.push(a)}return C.area(e)}).attr("z-index",-1).attr("fill",function(t){return t[0].color?t[0].color.trim():h.defaults.areaColor}).attr("fill-opacity",function(t){return t[0].opacity?t[0].opacity:.5}).append("title").text(function(t){return t[0].title?A(t[0].title.trim()):void 0})}};function y(t,e,n){return new l.a(t,{data:e,colHeaders:n,fixedRowsTop:1,manualColumnMove:!0,manualRowMove:!0,rowHeaders:!0,minRows:100,height:300,width:500,dropdownMenu:!0,manualColumnResize:!0})}const v=y(document.getElementById("pointsTable"),[["Sand","Silt","Clay","Color","Shape","Title"],[.3,.3,.4,"limegreen",,"Sample Nr 1"],[1,0,0],[0,1,0],[0,0,1],[.2,.5,.3,"coral"],[.3,.1,.6,"magenta","cross"],[.5,.5,0,"#d1b621","diamond"],[.6,.2,.2,"peru","triangle-up"]],["Variable 1","Variable 2","Variable 3","Color","Shape","Title"]),g=document.enterPoints;l.a.dom.addEvent(g,"submit",function(t){t.preventDefault();const e=p(v.getData());h.Points(e)});const b=y(document.getElementById("linesTable"),[["Sand","Silt","Clay","Color","Linestyle","Strokewidth","Title"],[.2,.8,0,"orangered","5 3 5",2,"dotted line 1"],[.8,0,.2],[],[.1,.1,.8,"slateblue"],[.4,.1,.5],[0,0,1]],["Variable 1","Variable 2","Variable 3","Color","Linestyle","Strokewidth","Title"]),x=document.enterLines;l.a.dom.addEvent(x,"submit",function(t){t.preventDefault();const e=m(b.getData());h.Lines(e)});var w=y(document.getElementById("areasTable"),[["Sand","Silt","Clay","Color","Opacity","Title"],[0,.5,.5,"palegreen",.1,"More than 50% silt"],[.5,.5,0],[0,1,0],[],[.5,0,.5,"moccasin",.4,"More than 50% sand"],[.5,.5,0],[1,0,0],[],[0,.5,.5,"coral",.3,"More than 50% clay"],[.5,0,.5],[0,0,1]],["Variable 1","Variable 2","Variable 3","Color","Opacity","Title"]);const k=document.enterAreas;function A(t){return t.toLowerCase().replace(/\b[a-z]/g,function(t){return t.toUpperCase()})}l.a.dom.addEvent(k,"submit",function(t){t.preventDefault();const e=m(w.getData());h.Areas(e)});const S=a.a.ternary.graticule().majorInterval(.2).minorInterval(.05),C=a.a.ternary.plot().call(P,[500,500]).call(a.a.ternary.scalebars()).call(a.a.ternary.neatline()).call(S);function L(t){let e=Object.values(t);const n=[[e=[e[0],e[2],e[1]],[0,parseFloat(e[0])+parseFloat(e[1]),parseFloat(e[2])]],[e,[parseFloat(e[0]),0,parseFloat(e[1])+parseFloat(e[2])]],[e,[parseFloat(e[0])+parseFloat(e[2]),parseFloat(e[1]),0]]];C.plot().selectAll(".line").data(n).enter().append("path").attr("class","help-line").attr("d",function(t){return C.path(t)}).attr("stroke-dasharray","3, 3, 3").attr("stroke","black").attr("stroke-width","1px").attr("z-index","-1")}function E(){a.a.selectAll(".vertex-label").remove(),s=!1,c=void 0}function O(t){a.a.selectAll(".point").remove()}function j(t){a.a.selectAll(".ternary-line").remove()}function M(t){a.a.selectAll(".ternary-area").remove()}function P(t){window.innerWidth>600?t.fit(500,500):t.fit(window.innerWidth,window.innerHeight)}a.a.select("#ternary-plot").call(C);const T=document.getElementById("clearPoints");T.addEventListener("click",O),T.addEventListener("mouseover",function(t){a.a.selectAll(".point").attr("opacity","0.4"),setTimeout(function(){a.a.selectAll(".point").attr("opacity","1")},600)});const I=document.getElementById("clearLines");I.addEventListener("click",j),I.addEventListener("mouseover",function(t){a.a.selectAll(".ternary-line").attr("stroke-opacity","0.3"),setTimeout(function(){a.a.selectAll(".ternary-line").attr("stroke-opacity","1")},600)});const V=document.getElementById("clearAreas");V.addEventListener("click",M),V.addEventListener("mouseover",function(t){a.a.selectAll(".ternary-area").attr("fill-opacity","0.1"),setTimeout(function(){a.a.selectAll(".ternary-area").attr("fill-opacity","1")},600)});const z=document.getElementById("clearLabels");z.addEventListener("click",E),z.addEventListener("mouseover",function(t){a.a.selectAll(".vertex-label").attr("text-decoration","line-through"),setTimeout(function(){a.a.selectAll(".vertex-label").attr("text-decoration","none")},600)});const $=document.getElementById("clearAll");$.addEventListener("click",function(t){j(),O(),E(),M()}),$.addEventListener("mouseover",function(t){a.a.selectAll(".ternary-line,.vertex-label,.ternary-area,.point").attr("fill-opacity","0.3").attr("text-decoration","line-through").attr("stroke-opacity","0.3"),setTimeout(function(){a.a.selectAll(".ternary-line,.vertex-label,.ternary-area,.point").attr("fill-opacity","1").attr("text-decoration","none").attr("stroke-opacity","1")},600)}),window.addEventListener("resize",P(C))}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=13)}({0:function(t,n,e){var r,i;!function(){var a={version:"3.5.17"},o=[].slice,u=function(t){return o.call(t)},s=this.document;function l(t){return t&&(t.ownerDocument||t.document||t).documentElement}function c(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}if(s)try{u(s.documentElement.childNodes)[0].nodeType}catch(t){u=function(t){for(var n=t.length,e=new Array(n);n--;)e[n]=t[n];return e}}if(Date.now||(Date.now=function(){return+new Date}),s)try{s.createElement("DIV").style.setProperty("opacity",0,"")}catch(t){var f=this.Element.prototype,h=f.setAttribute,d=f.setAttributeNS,p=this.CSSStyleDeclaration.prototype,g=p.setProperty;f.setAttribute=function(t,n){h.call(this,t,n+"")},f.setAttributeNS=function(t,n,e){d.call(this,t,n,e+"")},p.setProperty=function(t,n,e){g.call(this,t,n+"",e)}}function v(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function y(t){return null===t?NaN:+t}function m(t){return!isNaN(t)}function b(t){return{left:function(n,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)<0?r=a+1:i=a}return r},right:function(n,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=n.length);r<i;){var a=r+i>>>1;t(n[a],e)>0?i=a:r=a+1}return r}}}a.ascending=v,a.descending=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},a.min=function(t,n){var e,r,i=-1,a=t.length;if(1===arguments.length){for(;++i<a;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<a;)null!=(r=t[i])&&e>r&&(e=r)}else{for(;++i<a;)if(null!=(r=n.call(t,t[i],i))&&r>=r){e=r;break}for(;++i<a;)null!=(r=n.call(t,t[i],i))&&e>r&&(e=r)}return e},a.max=function(t,n){var e,r,i=-1,a=t.length;if(1===arguments.length){for(;++i<a;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<a;)null!=(r=t[i])&&r>e&&(e=r)}else{for(;++i<a;)if(null!=(r=n.call(t,t[i],i))&&r>=r){e=r;break}for(;++i<a;)null!=(r=n.call(t,t[i],i))&&r>e&&(e=r)}return e},a.extent=function(t,n){var e,r,i,a=-1,o=t.length;if(1===arguments.length){for(;++a<o;)if(null!=(r=t[a])&&r>=r){e=i=r;break}for(;++a<o;)null!=(r=t[a])&&(e>r&&(e=r),i<r&&(i=r))}else{for(;++a<o;)if(null!=(r=n.call(t,t[a],a))&&r>=r){e=i=r;break}for(;++a<o;)null!=(r=n.call(t,t[a],a))&&(e>r&&(e=r),i<r&&(i=r))}return[e,i]},a.sum=function(t,n){var e,r=0,i=t.length,a=-1;if(1===arguments.length)for(;++a<i;)m(e=+t[a])&&(r+=e);else for(;++a<i;)m(e=+n.call(t,t[a],a))&&(r+=e);return r},a.mean=function(t,n){var e,r=0,i=t.length,a=-1,o=i;if(1===arguments.length)for(;++a<i;)m(e=y(t[a]))?r+=e:--o;else for(;++a<i;)m(e=y(n.call(t,t[a],a)))?r+=e:--o;if(o)return r/o},a.quantile=function(t,n){var e=(t.length-1)*n+1,r=Math.floor(e),i=+t[r-1],a=e-r;return a?i+a*(t[r]-i):i},a.median=function(t,n){var e,r=[],i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)m(e=y(t[o]))&&r.push(e);else for(;++o<i;)m(e=y(n.call(t,t[o],o)))&&r.push(e);if(r.length)return a.quantile(r.sort(v),.5)},a.variance=function(t,n){var e,r,i=t.length,a=0,o=0,u=-1,s=0;if(1===arguments.length)for(;++u<i;)m(e=y(t[u]))&&(o+=(r=e-a)*(e-(a+=r/++s)));else for(;++u<i;)m(e=y(n.call(t,t[u],u)))&&(o+=(r=e-a)*(e-(a+=r/++s)));if(s>1)return o/(s-1)},a.deviation=function(){var t=a.variance.apply(this,arguments);return t?Math.sqrt(t):t};var x=b(v);function w(t){return t.length}a.bisectLeft=x.left,a.bisect=a.bisectRight=x.right,a.bisector=function(t){return b(1===t.length?function(n,e){return v(t(n),e)}:t)},a.shuffle=function(t,n,e){(a=arguments.length)<3&&(e=t.length,a<2&&(n=0));for(var r,i,a=e-n;a;)i=Math.random()*a--|0,r=t[a+n],t[a+n]=t[i+n],t[i+n]=r;return t},a.permute=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},a.pairs=function(t){for(var n=0,e=t.length-1,r=t[0],i=new Array(e<0?0:e);n<e;)i[n]=[r,r=t[++n]];return i},a.transpose=function(t){if(!(i=t.length))return[];for(var n=-1,e=a.min(t,w),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r},a.zip=function(){return a.transpose(arguments)},a.keys=function(t){var n=[];for(var e in t)n.push(e);return n},a.values=function(t){var n=[];for(var e in t)n.push(t[e]);return n},a.entries=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},a.merge=function(t){for(var n,e,r,i=t.length,a=-1,o=0;++a<i;)o+=t[a].length;for(e=new Array(o);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--o]=r[n];return e};var M=Math.abs;function k(t,n){for(var e in n)Object.defineProperty(t.prototype,e,{value:n[e],enumerable:!1})}function S(){this._=Object.create(null)}a.range=function(t,n,e){if(arguments.length<3&&(e=1,arguments.length<2&&(n=t,t=0)),(n-t)/e==1/0)throw new Error("infinite range");var r,i=[],a=function(t){var n=1;for(;t*n%1;)n*=10;return n}(M(e)),o=-1;if(t*=a,n*=a,(e*=a)<0)for(;(r=t+e*++o)>n;)i.push(r/a);else for(;(r=t+e*++o)<n;)i.push(r/a);return i},a.map=function(t,n){var e=new S;if(t instanceof S)t.forEach(function(t,n){e.set(t,n)});else if(Array.isArray(t)){var r,i=-1,a=t.length;if(1===arguments.length)for(;++i<a;)e.set(i,t[i]);else for(;++i<a;)e.set(n.call(t,r=t[i],i),r)}else for(var o in t)e.set(o,t[o]);return e};var A="__proto__",E="\0";function L(t){return(t+="")===A||t[0]===E?E+t:t}function _(t){return(t+="")[0]===E?t.slice(1):t}function N(t){return L(t)in this._}function q(t){return(t=L(t))in this._&&delete this._[t]}function C(){var t=[];for(var n in this._)t.push(_(n));return t}function T(){var t=0;for(var n in this._)++t;return t}function z(){for(var t in this._)return!1;return!0}function P(){this._=Object.create(null)}function I(t){return t}function R(t,n,e){return function(){var r=e.apply(n,arguments);return r===n?t:r}}function D(t,n){if(n in t)return n;n=n.charAt(0).toUpperCase()+n.slice(1);for(var e=0,r=H.length;e<r;++e){var i=H[e]+n;if(i in t)return i}}k(S,{has:N,get:function(t){return this._[L(t)]},set:function(t,n){return this._[L(t)]=n},remove:q,keys:C,values:function(){var t=[];for(var n in this._)t.push(this._[n]);return t},entries:function(){var t=[];for(var n in this._)t.push({key:_(n),value:this._[n]});return t},size:T,empty:z,forEach:function(t){for(var n in this._)t.call(this,_(n),this._[n])}}),a.nest=function(){var t,n,e={},r=[],i=[];function o(i,a,u){if(u>=r.length)return n?n.call(e,a):t?a.sort(t):a;for(var s,l,c,f,h=-1,d=a.length,p=r[u++],g=new S;++h<d;)(f=g.get(s=p(l=a[h])))?f.push(l):g.set(s,[l]);return i?(l=i(),c=function(t,n){l.set(t,o(i,n,u))}):(l={},c=function(t,n){l[t]=o(i,n,u)}),g.forEach(c),l}return e.map=function(t,n){return o(n,t,0)},e.entries=function(t){return function t(n,e){if(e>=r.length)return n;var a=[],o=i[e++];return n.forEach(function(n,r){a.push({key:n,values:t(r,e)})}),o?a.sort(function(t,n){return o(t.key,n.key)}):a}(o(a.map,t,0),0)},e.key=function(t){return r.push(t),e},e.sortKeys=function(t){return i[r.length-1]=t,e},e.sortValues=function(n){return t=n,e},e.rollup=function(t){return n=t,e},e},a.set=function(t){var n=new P;if(t)for(var e=0,r=t.length;e<r;++e)n.add(t[e]);return n},k(P,{has:N,add:function(t){return this._[L(t+="")]=!0,t},remove:q,values:C,size:T,empty:z,forEach:function(t){for(var n in this._)t.call(this,_(n))}}),a.behavior={},a.rebind=function(t,n){for(var e,r=1,i=arguments.length;++r<i;)t[e=arguments[r]]=R(t,n,n[e]);return t};var H=["webkit","ms","moz","Moz","o","O"];function O(){}function j(){}function U(t){var n=[],e=new S;function r(){for(var e,r=n,i=-1,a=r.length;++i<a;)(e=r[i].on)&&e.apply(this,arguments);return t}return r.on=function(r,i){var a,o=e.get(r);return arguments.length<2?o&&o.on:(o&&(o.on=null,n=n.slice(0,a=n.indexOf(o)).concat(n.slice(a+1)),e.remove(r)),i&&n.push(e.set(r,{on:i})),t)},r}function F(){a.event.preventDefault()}function B(){for(var t,n=a.event;t=n.sourceEvent;)n=t;return n}function Y(t){for(var n=new j,e=0,r=arguments.length;++e<r;)n[arguments[e]]=U(n);return n.of=function(e,r){return function(i){try{var o=i.sourceEvent=a.event;i.target=t,a.event=i,n[i.type].apply(e,r)}finally{a.event=o}}},n}a.dispatch=function(){for(var t=new j,n=-1,e=arguments.length;++n<e;)t[arguments[n]]=U(t);return t},j.prototype.on=function(t,n){var e=t.indexOf("."),r="";if(e>=0&&(r=t.slice(e+1),t=t.slice(0,e)),t)return arguments.length<2?this[t].on(r):this[t].on(r,n);if(2===arguments.length){if(null==n)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},a.event=null,a.requote=function(t){return t.replace(V,"\\$&")};var V=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,W={}.__proto__?function(t,n){t.__proto__=n}:function(t,n){for(var e in n)t[e]=n[e]};function X(t){return W(t,J),t}var $=function(t,n){return n.querySelector(t)},Z=function(t,n){return n.querySelectorAll(t)},K=function(t,n){var e=t.matches||t[D(t,"matchesSelector")];return(K=function(t,n){return e.call(t,n)})(t,n)};"function"==typeof Sizzle&&($=function(t,n){return Sizzle(t,n)[0]||null},Z=Sizzle,K=Sizzle.matchesSelector),a.selection=function(){return a.select(s.documentElement)};var J=a.selection.prototype=[];function G(t){return"function"==typeof t?t:function(){return $(t,this)}}function Q(t){return"function"==typeof t?t:function(){return Z(t,this)}}J.select=function(t){var n,e,r,i,a=[];t=G(t);for(var o=-1,u=this.length;++o<u;){a.push(n=[]),n.parentNode=(r=this[o]).parentNode;for(var s=-1,l=r.length;++s<l;)(i=r[s])?(n.push(e=t.call(i,i.__data__,s,o)),e&&"__data__"in i&&(e.__data__=i.__data__)):n.push(null)}return X(a)},J.selectAll=function(t){var n,e,r=[];t=Q(t);for(var i=-1,a=this.length;++i<a;)for(var o=this[i],s=-1,l=o.length;++s<l;)(e=o[s])&&(r.push(n=u(t.call(e,e.__data__,s,i))),n.parentNode=e);return X(r)};var tt="http://www.w3.org/1999/xhtml",nt={svg:"http://www.w3.org/2000/svg",xhtml:tt,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function et(t,n){return t=a.ns.qualify(t),null==n?t.local?function(){this.removeAttributeNS(t.space,t.local)}:function(){this.removeAttribute(t)}:"function"==typeof n?t.local?function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}:function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}:t.local?function(){this.setAttributeNS(t.space,t.local,n)}:function(){this.setAttribute(t,n)}}function rt(t){return t.trim().replace(/\s+/g," ")}function it(t){return new RegExp("(?:^|\\s+)"+a.requote(t)+"(?:\\s+|$)","g")}function at(t){return(t+"").trim().split(/^|\s+/)}function ot(t,n){var e=(t=at(t).map(ut)).length;return"function"==typeof n?function(){for(var r=-1,i=n.apply(this,arguments);++r<e;)t[r](this,i)}:function(){for(var r=-1;++r<e;)t[r](this,n)}}function ut(t){var n=it(t);return function(e,r){if(i=e.classList)return r?i.add(t):i.remove(t);var i=e.getAttribute("class")||"";r?(n.lastIndex=0,n.test(i)||e.setAttribute("class",rt(i+" "+t))):e.setAttribute("class",rt(i.replace(n," ")))}}function st(t,n,e){return null==n?function(){this.style.removeProperty(t)}:"function"==typeof n?function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}:function(){this.style.setProperty(t,n,e)}}function lt(t,n){return null==n?function(){delete this[t]}:"function"==typeof n?function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}:function(){this[t]=n}}function ct(t){return"function"==typeof t?t:(t=a.ns.qualify(t)).local?function(){return this.ownerDocument.createElementNS(t.space,t.local)}:function(){var n=this.ownerDocument,e=this.namespaceURI;return e===tt&&n.documentElement.namespaceURI===tt?n.createElement(t):n.createElementNS(e,t)}}function ft(){var t=this.parentNode;t&&t.removeChild(this)}function ht(t){return{__data__:t}}function dt(t){return function(){return K(this,t)}}function pt(t,n){for(var e=0,r=t.length;e<r;e++)for(var i,a=t[e],o=0,u=a.length;o<u;o++)(i=a[o])&&n(i,o,e);return t}function gt(t){return W(t,vt),t}a.ns={prefix:nt,qualify:function(t){var n=t.indexOf(":"),e=t;return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),nt.hasOwnProperty(e)?{space:nt[e],local:t}:t}},J.attr=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node();return(t=a.ns.qualify(t)).local?e.getAttributeNS(t.space,t.local):e.getAttribute(t)}for(n in t)this.each(et(n,t[n]));return this}return this.each(et(t,n))},J.classed=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node(),r=(t=at(t)).length,i=-1;if(n=e.classList){for(;++i<r;)if(!n.contains(t[i]))return!1}else for(n=e.getAttribute("class");++i<r;)if(!it(t[i]).test(n))return!1;return!0}for(n in t)this.each(ot(n,t[n]));return this}return this.each(ot(t,n))},J.style=function(t,n,e){var r=arguments.length;if(r<3){if("string"!=typeof t){for(e in r<2&&(n=""),t)this.each(st(e,t[e],n));return this}if(r<2){var i=this.node();return c(i).getComputedStyle(i,null).getPropertyValue(t)}e=""}return this.each(st(t,n,e))},J.property=function(t,n){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(n in t)this.each(lt(n,t[n]));return this}return this.each(lt(t,n))},J.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},J.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},J.append=function(t){return t=ct(t),this.select(function(){return this.appendChild(t.apply(this,arguments))})},J.insert=function(t,n){return t=ct(t),n=G(n),this.select(function(){return this.insertBefore(t.apply(this,arguments),n.apply(this,arguments)||null)})},J.remove=function(){return this.each(ft)},J.data=function(t,n){var e,r,i=-1,a=this.length;if(!arguments.length){for(t=new Array(a=(e=this[0]).length);++i<a;)(r=e[i])&&(t[i]=r.__data__);return t}function o(t,e){var r,i,a,o=t.length,c=e.length,f=Math.min(o,c),h=new Array(c),d=new Array(c),p=new Array(o);if(n){var g,v=new S,y=new Array(o);for(r=-1;++r<o;)(i=t[r])&&(v.has(g=n.call(i,i.__data__,r))?p[r]=i:v.set(g,i),y[r]=g);for(r=-1;++r<c;)(i=v.get(g=n.call(e,a=e[r],r)))?!0!==i&&(h[r]=i,i.__data__=a):d[r]=ht(a),v.set(g,!0);for(r=-1;++r<o;)r in y&&!0!==v.get(y[r])&&(p[r]=t[r])}else{for(r=-1;++r<f;)i=t[r],a=e[r],i?(i.__data__=a,h[r]=i):d[r]=ht(a);for(;r<c;++r)d[r]=ht(e[r]);for(;r<o;++r)p[r]=t[r]}d.update=h,d.parentNode=h.parentNode=p.parentNode=t.parentNode,u.push(d),s.push(h),l.push(p)}var u=gt([]),s=X([]),l=X([]);if("function"==typeof t)for(;++i<a;)o(e=this[i],t.call(e,e.parentNode.__data__,i));else for(;++i<a;)o(e=this[i],t);return s.enter=function(){return u},s.exit=function(){return l},s},J.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},J.filter=function(t){var n,e,r,i=[];"function"!=typeof t&&(t=dt(t));for(var a=0,o=this.length;a<o;a++){i.push(n=[]),n.parentNode=(e=this[a]).parentNode;for(var u=0,s=e.length;u<s;u++)(r=e[u])&&t.call(r,r.__data__,u,a)&&n.push(r)}return X(i)},J.order=function(){for(var t=-1,n=this.length;++t<n;)for(var e,r=this[t],i=r.length-1,a=r[i];--i>=0;)(e=r[i])&&(a&&a!==e.nextSibling&&a.parentNode.insertBefore(e,a),a=e);return this},J.sort=function(t){t=function(t){arguments.length||(t=v);return function(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}}.apply(this,arguments);for(var n=-1,e=this.length;++n<e;)this[n].sort(t);return this.order()},J.each=function(t){return pt(this,function(n,e,r){t.call(n,n.__data__,e,r)})},J.call=function(t){var n=u(arguments);return t.apply(n[0]=this,n),this},J.empty=function(){return!this.node()},J.node=function(){for(var t=0,n=this.length;t<n;t++)for(var e=this[t],r=0,i=e.length;r<i;r++){var a=e[r];if(a)return a}return null},J.size=function(){var t=0;return pt(this,function(){++t}),t};var vt=[];function yt(t,n,e){var r="__on"+t,i=t.indexOf("."),o=bt;i>0&&(t=t.slice(0,i));var s=mt.get(t);function l(){var n=this[r];n&&(this.removeEventListener(t,n,n.$),delete this[r])}return s&&(t=s,o=xt),i?n?function(){var i=o(n,u(arguments));l.call(this),this.addEventListener(t,this[r]=i,i.$=e),i._=n}:l:n?O:function(){var n,e=new RegExp("^__on([^.]+)"+a.requote(t)+"$");for(var r in this)if(n=r.match(e)){var i=this[r];this.removeEventListener(n[1],i,i.$),delete this[r]}}}a.selection.enter=gt,a.selection.enter.prototype=vt,vt.append=J.append,vt.empty=J.empty,vt.node=J.node,vt.call=J.call,vt.size=J.size,vt.select=function(t){for(var n,e,r,i,a,o=[],u=-1,s=this.length;++u<s;){r=(i=this[u]).update,o.push(n=[]),n.parentNode=i.parentNode;for(var l=-1,c=i.length;++l<c;)(a=i[l])?(n.push(r[l]=e=t.call(i.parentNode,a.__data__,l,u)),e.__data__=a.__data__):n.push(null)}return X(o)},vt.insert=function(t,n){return arguments.length<2&&(n=function(t){var n,e;return function(r,i,a){var o,u=t[a].update,s=u.length;for(a!=e&&(e=a,n=0),i>=n&&(n=i+1);!(o=u[n])&&++n<s;);return o}}(this)),J.insert.call(this,t,n)},a.select=function(t){var n;return"string"==typeof t?(n=[$(t,s)]).parentNode=s.documentElement:(n=[t]).parentNode=l(t),X([n])},a.selectAll=function(t){var n;return"string"==typeof t?(n=u(Z(t,s))).parentNode=s.documentElement:(n=u(t)).parentNode=null,X([n])},J.on=function(t,n,e){var r=arguments.length;if(r<3){if("string"!=typeof t){for(e in r<2&&(n=!1),t)this.each(yt(e,t[e],n));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;e=!1}return this.each(yt(t,n,e))};var mt=a.map({mouseenter:"mouseover",mouseleave:"mouseout"});function bt(t,n){return function(e){var r=a.event;a.event=e,n[0]=this.__data__;try{t.apply(this,n)}finally{a.event=r}}}function xt(t,n){var e=bt(t,n);return function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}s&&mt.forEach(function(t){"on"+t in s&&mt.remove(t)});var wt,Mt=0;function kt(t){var n=".dragsuppress-"+ ++Mt,e="click"+n,r=a.select(c(t)).on("touchmove"+n,F).on("dragstart"+n,F).on("selectstart"+n,F);if(null==wt&&(wt=!("onselectstart"in t)&&D(t.style,"userSelect")),wt){var i=l(t).style,o=i[wt];i[wt]="none"}return function(t){if(r.on(n,null),wt&&(i[wt]=o),t){var a=function(){r.on(e,null)};r.on(e,function(){F(),a()},!0),setTimeout(a,0)}}}a.mouse=function(t){return At(t,B())};var St=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;function At(t,n){n.changedTouches&&(n=n.changedTouches[0]);var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();if(St<0){var i=c(t);if(i.scrollX||i.scrollY){var o=(e=a.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important"))[0][0].getScreenCTM();St=!(o.f||o.e),e.remove()}}return St?(r.x=n.pageX,r.y=n.pageY):(r.x=n.clientX,r.y=n.clientY),[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var u=t.getBoundingClientRect();return[n.clientX-u.left-t.clientLeft,n.clientY-u.top-t.clientTop]}function Et(){return a.event.changedTouches[0].identifier}a.touch=function(t,n,e){if(arguments.length<3&&(e=n,n=B().changedTouches),n)for(var r,i=0,a=n.length;i<a;++i)if((r=n[i]).identifier===e)return At(t,r)},a.behavior.drag=function(){var t=Y(i,"drag","dragstart","dragend"),n=null,e=o(O,a.mouse,c,"mousemove","mouseup"),r=o(Et,a.touch,I,"touchmove","touchend");function i(){this.on("mousedown.drag",e).on("touchstart.drag",r)}function o(e,r,i,o,u){return function(){var s,l=a.event.target.correspondingElement||a.event.target,c=this.parentNode,f=t.of(this,arguments),h=0,d=e(),p=".drag"+(null==d?"":"-"+d),g=a.select(i(l)).on(o+p,function(){var t,n,e=r(c,d);if(!e)return;t=e[0]-y[0],n=e[1]-y[1],h|=t|n,y=e,f({type:"drag",x:e[0]+s[0],y:e[1]+s[1],dx:t,dy:n})}).on(u+p,function(){if(!r(c,d))return;g.on(o+p,null).on(u+p,null),v(h),f({type:"dragend"})}),v=kt(l),y=r(c,d);s=n?[(s=n.apply(this,arguments)).x-y[0],s.y-y[1]]:[0,0],f({type:"dragstart"})}}return i.origin=function(t){return arguments.length?(n=t,i):n},a.rebind(i,t,"on")},a.touches=function(t,n){return arguments.length<2&&(n=B().touches),n?u(n).map(function(n){var e=At(t,n);return e.identifier=n.identifier,e}):[]};var Lt=1e-6,_t=Lt*Lt,Nt=Math.PI,qt=2*Nt,Ct=qt-Lt,Tt=Nt/2,zt=Nt/180,Pt=180/Nt;function It(t){return t>0?1:t<0?-1:0}function Rt(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function Dt(t){return t>1?0:t<-1?Nt:Math.acos(t)}function Ht(t){return t>1?Tt:t<-1?-Tt:Math.asin(t)}function Ot(t){return((t=Math.exp(t))+1/t)/2}function jt(t){return(t=Math.sin(t/2))*t}var Ut=Math.SQRT2;a.interpolateZoom=function(t,n){var e,r,i=t[0],a=t[1],o=t[2],u=n[0],s=n[1],l=n[2],c=u-i,f=s-a,h=c*c+f*f;if(h<_t)r=Math.log(l/o)/Ut,e=function(t){return[i+t*c,a+t*f,o*Math.exp(Ut*t*r)]};else{var d=Math.sqrt(h),p=(l*l-o*o+4*h)/(2*o*2*d),g=(l*l-o*o-4*h)/(2*l*2*d),v=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(g*g+1)-g);r=(y-v)/Ut,e=function(t){var n=t*r,e=Ot(v),u=o/(2*d)*(e*function(t){return((t=Math.exp(2*t))-1)/(t+1)}(Ut*n+v)-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[i+u*c,a+u*f,o*e/Ot(Ut*n+v)]}}return e.duration=1e3*r,e},a.behavior.zoom=function(){var t,n,e,r,i,o,u,l,f,h={x:0,y:0,k:1},d=[960,500],p=Yt,g=250,v=0,y="mousedown.zoom",m="mousemove.zoom",b="mouseup.zoom",x="touchstart.zoom",w=Y(M,"zoomstart","zoom","zoomend");function M(t){t.on(y,C).on(Bt+".zoom",z).on("dblclick.zoom",P).on(x,T)}function k(t){return[(t[0]-h.x)/h.k,(t[1]-h.y)/h.k]}function S(t){h.k=Math.max(p[0],Math.min(p[1],t))}function A(t,n){n=function(t){return[t[0]*h.k+h.x,t[1]*h.k+h.y]}(n),h.x+=t[0]-n[0],h.y+=t[1]-n[1]}function E(t,e,r,i){t.__chart__={x:h.x,y:h.y,k:h.k},S(Math.pow(2,i)),A(n=e,r),t=a.select(t),g>0&&(t=t.transition().duration(g)),t.call(M.event)}function L(){u&&u.domain(o.range().map(function(t){return(t-h.x)/h.k}).map(o.invert)),f&&f.domain(l.range().map(function(t){return(t-h.y)/h.k}).map(l.invert))}function _(t){v++||t({type:"zoomstart"})}function N(t){L(),t({type:"zoom",scale:h.k,translate:[h.x,h.y]})}function q(t){--v||(t({type:"zoomend"}),n=null)}function C(){var t=this,n=w.of(t,arguments),e=0,r=a.select(c(t)).on(m,function(){e=1,A(a.mouse(t),i),N(n)}).on(b,function(){r.on(m,null).on(b,null),o(e),q(n)}),i=k(a.mouse(t)),o=kt(t);du.call(t),_(n)}function T(){var t,n=this,e=w.of(n,arguments),r={},o=0,u=".zoom-"+a.event.changedTouches[0].identifier,s="touchmove"+u,l="touchend"+u,c=[],f=a.select(n),d=kt(n);function p(){var e=a.touches(n);return t=h.k,e.forEach(function(t){t.identifier in r&&(r[t.identifier]=k(t))}),e}function g(){var t=a.event.target;a.select(t).on(s,v).on(l,m),c.push(t);for(var e=a.event.changedTouches,u=0,f=e.length;u<f;++u)r[e[u].identifier]=null;var d=p(),g=Date.now();if(1===d.length){if(g-i<500){var y=d[0];E(n,y,r[y.identifier],Math.floor(Math.log(h.k)/Math.LN2)+1),F()}i=g}else if(d.length>1){y=d[0];var b=d[1],x=y[0]-b[0],w=y[1]-b[1];o=x*x+w*w}}function v(){var u,s,l,c,f=a.touches(n);du.call(n);for(var h=0,d=f.length;h<d;++h,c=null)if(l=f[h],c=r[l.identifier]){if(s)break;u=l,s=c}if(c){var p=(p=l[0]-u[0])*p+(p=l[1]-u[1])*p,g=o&&Math.sqrt(p/o);u=[(u[0]+l[0])/2,(u[1]+l[1])/2],s=[(s[0]+c[0])/2,(s[1]+c[1])/2],S(g*t)}i=null,A(u,s),N(e)}function m(){if(a.event.touches.length){for(var t=a.event.changedTouches,n=0,i=t.length;n<i;++n)delete r[t[n].identifier];for(var o in r)return void p()}a.selectAll(c).on(u,null),f.on(y,C).on(x,T),d(),q(e)}g(),_(e),f.on(y,null).on(x,g)}function z(){var i=w.of(this,arguments);r?clearTimeout(r):(du.call(this),t=k(n=e||a.mouse(this)),_(i)),r=setTimeout(function(){r=null,q(i)},50),F(),S(Math.pow(2,.002*Ft())*h.k),A(n,t),N(i)}function P(){var t=a.mouse(this),n=Math.log(h.k)/Math.LN2;E(this,t,k(t),a.event.shiftKey?Math.ceil(n)-1:Math.floor(n)+1)}return Bt||(Bt="onwheel"in s?(Ft=function(){return-a.event.deltaY*(a.event.deltaMode?120:1)},"wheel"):"onmousewheel"in s?(Ft=function(){return a.event.wheelDelta},"mousewheel"):(Ft=function(){return-a.event.detail},"MozMousePixelScroll")),M.event=function(t){t.each(function(){var t=w.of(this,arguments),e=h;vu?a.select(this).transition().each("start.zoom",function(){h=this.__chart__||{x:0,y:0,k:1},_(t)}).tween("zoom:zoom",function(){var r=d[0],i=d[1],o=n?n[0]:r/2,u=n?n[1]:i/2,s=a.interpolateZoom([(o-h.x)/h.k,(u-h.y)/h.k,r/h.k],[(o-e.x)/e.k,(u-e.y)/e.k,r/e.k]);return function(n){var e=s(n),i=r/e[2];this.__chart__=h={x:o-e[0]*i,y:u-e[1]*i,k:i},N(t)}}).each("interrupt.zoom",function(){q(t)}).each("end.zoom",function(){q(t)}):(this.__chart__=h,_(t),N(t),q(t))})},M.translate=function(t){return arguments.length?(h={x:+t[0],y:+t[1],k:h.k},L(),M):[h.x,h.y]},M.scale=function(t){return arguments.length?(h={x:h.x,y:h.y,k:null},S(+t),L(),M):h.k},M.scaleExtent=function(t){return arguments.length?(p=null==t?Yt:[+t[0],+t[1]],M):p},M.center=function(t){return arguments.length?(e=t&&[+t[0],+t[1]],M):e},M.size=function(t){return arguments.length?(d=t&&[+t[0],+t[1]],M):d},M.duration=function(t){return arguments.length?(g=+t,M):g},M.x=function(t){return arguments.length?(u=t,o=t.copy(),h={x:0,y:0,k:1},M):u},M.y=function(t){return arguments.length?(f=t,l=t.copy(),h={x:0,y:0,k:1},M):f},a.rebind(M,w,"on")};var Ft,Bt,Yt=[0,1/0];function Vt(){}function Wt(t,n,e){return this instanceof Wt?(this.h=+t,this.s=+n,void(this.l=+e)):arguments.length<2?t instanceof Wt?new Wt(t.h,t.s,t.l):gn(""+t,vn,Wt):new Wt(t,n,e)}a.color=Vt,Vt.prototype.toString=function(){return this.rgb()+""},a.hsl=Wt;var Xt=Wt.prototype=new Vt;function $t(t,n,e){var r,i;function a(t){return Math.round(255*function(t){return t>360?t-=360:t<0&&(t+=360),t<60?r+(i-r)*t/60:t<180?i:t<240?r+(i-r)*(240-t)/60:r}(t))}return t=isNaN(t)?0:(t%=360)<0?t+360:t,n=isNaN(n)?0:n<0?0:n>1?1:n,r=2*(e=e<0?0:e>1?1:e)-(i=e<=.5?e*(1+n):e+n-e*n),new cn(a(t+120),a(t),a(t-120))}function Zt(t,n,e){return this instanceof Zt?(this.h=+t,this.c=+n,void(this.l=+e)):arguments.length<2?t instanceof Zt?new Zt(t.h,t.c,t.l):on(t instanceof Gt?t.l:(t=yn((t=a.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new Zt(t,n,e)}Xt.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),new Wt(this.h,this.s,this.l/t)},Xt.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new Wt(this.h,this.s,t*this.l)},Xt.rgb=function(){return $t(this.h,this.s,this.l)},a.hcl=Zt;var Kt=Zt.prototype=new Vt;function Jt(t,n,e){return isNaN(t)&&(t=0),isNaN(n)&&(n=0),new Gt(e,Math.cos(t*=zt)*n,Math.sin(t)*n)}function Gt(t,n,e){return this instanceof Gt?(this.l=+t,this.a=+n,void(this.b=+e)):arguments.length<2?t instanceof Gt?new Gt(t.l,t.a,t.b):t instanceof Zt?Jt(t.h,t.c,t.l):yn((t=cn(t)).r,t.g,t.b):new Gt(t,n,e)}Kt.brighter=function(t){return new Zt(this.h,this.c,Math.min(100,this.l+Qt*(arguments.length?t:1)))},Kt.darker=function(t){return new Zt(this.h,this.c,Math.max(0,this.l-Qt*(arguments.length?t:1)))},Kt.rgb=function(){return Jt(this.h,this.c,this.l).rgb()},a.lab=Gt;var Qt=18,tn=.95047,nn=1,en=1.08883,rn=Gt.prototype=new Vt;function an(t,n,e){var r=(t+16)/116,i=r+n/500,a=r-e/200;return new cn(ln(3.2404542*(i=un(i)*tn)-1.5371385*(r=un(r)*nn)-.4985314*(a=un(a)*en)),ln(-.969266*i+1.8760108*r+.041556*a),ln(.0556434*i-.2040259*r+1.0572252*a))}function on(t,n,e){return t>0?new Zt(Math.atan2(e,n)*Pt,Math.sqrt(n*n+e*e),t):new Zt(NaN,NaN,t)}function un(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function sn(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function ln(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function cn(t,n,e){return this instanceof cn?(this.r=~~t,this.g=~~n,void(this.b=~~e)):arguments.length<2?t instanceof cn?new cn(t.r,t.g,t.b):gn(""+t,cn,$t):new cn(t,n,e)}function fn(t){return new cn(t>>16,t>>8&255,255&t)}function hn(t){return fn(t)+""}rn.brighter=function(t){return new Gt(Math.min(100,this.l+Qt*(arguments.length?t:1)),this.a,this.b)},rn.darker=function(t){return new Gt(Math.max(0,this.l-Qt*(arguments.length?t:1)),this.a,this.b)},rn.rgb=function(){return an(this.l,this.a,this.b)},a.rgb=cn;var dn=cn.prototype=new Vt;function pn(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function gn(t,n,e){var r,i,a,o=0,u=0,s=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return n(bn(i[0]),bn(i[1]),bn(i[2]))}return(a=xn.get(t))?n(a.r,a.g,a.b):(null==t||"#"!==t.charAt(0)||isNaN(a=parseInt(t.slice(1),16))||(4===t.length?(o=(3840&a)>>4,o|=o>>4,u=240&a,u|=u>>4,s=15&a,s|=s<<4):7===t.length&&(o=(16711680&a)>>16,u=(65280&a)>>8,s=255&a)),n(o,u,s))}function vn(t,n,e){var r,i,a=Math.min(t/=255,n/=255,e/=255),o=Math.max(t,n,e),u=o-a,s=(o+a)/2;return u?(i=s<.5?u/(o+a):u/(2-o-a),r=t==o?(n-e)/u+(n<e?6:0):n==o?(e-t)/u+2:(t-n)/u+4,r*=60):(r=NaN,i=s>0&&s<1?0:r),new Wt(r,i,s)}function yn(t,n,e){var r=sn((.4124564*(t=mn(t))+.3575761*(n=mn(n))+.1804375*(e=mn(e)))/tn),i=sn((.2126729*t+.7151522*n+.072175*e)/nn);return Gt(116*i-16,500*(r-i),200*(i-sn((.0193339*t+.119192*n+.9503041*e)/en)))}function mn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function bn(t){var n=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*n):n}dn.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var n=this.r,e=this.g,r=this.b,i=30;return n||e||r?(n&&n<i&&(n=i),e&&e<i&&(e=i),r&&r<i&&(r=i),new cn(Math.min(255,n/t),Math.min(255,e/t),Math.min(255,r/t))):new cn(i,i,i)},dn.darker=function(t){return new cn((t=Math.pow(.7,arguments.length?t:1))*this.r,t*this.g,t*this.b)},dn.hsl=function(){return vn(this.r,this.g,this.b)},dn.toString=function(){return"#"+pn(this.r)+pn(this.g)+pn(this.b)};var xn=a.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});function wn(t){return"function"==typeof t?t:function(){return t}}function Mn(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),kn(n,e,t,r)}}function kn(t,n,e,r){var i={},o=a.dispatch("beforesend","progress","load","error"),s={},l=new XMLHttpRequest,c=null;function f(){var t,n=l.status;if(!n&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(l)||n>=200&&n<300||304===n){try{t=e.call(i,l)}catch(t){return void o.error.call(i,t)}o.load.call(i,t)}else o.error.call(i,l)}return!this.XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(t)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=f:l.onreadystatechange=function(){l.readyState>3&&f()},l.onprogress=function(t){var n=a.event;a.event=t;try{o.progress.call(i,l)}finally{a.event=n}},i.header=function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?s[t]:(null==n?delete s[t]:s[t]=n+"",i)},i.mimeType=function(t){return arguments.length?(n=null==t?null:t+"",i):n},i.responseType=function(t){return arguments.length?(c=t,i):c},i.response=function(t){return e=t,i},["get","post"].forEach(function(t){i[t]=function(){return i.send.apply(i,[t].concat(u(arguments)))}}),i.send=function(e,r,a){if(2===arguments.length&&"function"==typeof r&&(a=r,r=null),l.open(e,t,!0),null==n||"accept"in s||(s.accept=n+",*/*"),l.setRequestHeader)for(var u in s)l.setRequestHeader(u,s[u]);return null!=n&&l.overrideMimeType&&l.overrideMimeType(n),null!=c&&(l.responseType=c),null!=a&&i.on("error",a).on("load",function(t){a(null,t)}),o.beforesend.call(i,l),l.send(null==r?null:r),i},i.abort=function(){return l.abort(),i},a.rebind(i,o,"on"),null==r?i:i.get(function(t){return 1===t.length?function(n,e){t(null==n?e:null)}:t}(r))}xn.forEach(function(t,n){xn.set(t,fn(n))}),a.functor=wn,a.xhr=Mn(I),a.dsv=function(t,n){var e=new RegExp('["'+t+"\n]"),r=t.charCodeAt(0);function i(t,e,r){arguments.length<3&&(r=e,e=null);var i=kn(t,n,null==e?a:o(e),r);return i.row=function(t){return arguments.length?i.response(null==(e=t)?a:o(t)):e},i}function a(t){return i.parse(t.responseText)}function o(t){return function(n){return i.parse(n.responseText,t)}}function u(n){return n.map(s).join(t)}function s(t){return e.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}return i.parse=function(t,n){var e;return i.parseRows(t,function(t,r){if(e)return e(t,r-1);var i=new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}");e=n?function(t,e){return n(i(t),e)}:i})},i.parseRows=function(t,n){var e,i,a={},o={},u=[],s=t.length,l=0,c=0;function f(){if(l>=s)return o;if(i)return i=!1,a;var n=l;if(34===t.charCodeAt(n)){for(var e=n;e++<s;)if(34===t.charCodeAt(e)){if(34!==t.charCodeAt(e+1))break;++e}return l=e+2,13===(u=t.charCodeAt(e+1))?(i=!0,10===t.charCodeAt(e+2)&&++l):10===u&&(i=!0),t.slice(n+1,e).replace(/""/g,'"')}for(;l<s;){var u,c=1;if(10===(u=t.charCodeAt(l++)))i=!0;else if(13===u)i=!0,10===t.charCodeAt(l)&&(++l,++c);else if(u!==r)continue;return t.slice(n,l-c)}return t.slice(n)}for(;(e=f())!==o;){for(var h=[];e!==a&&e!==o;)h.push(e),e=f();n&&null==(h=n(h,c++))||u.push(h)}return u},i.format=function(n){if(Array.isArray(n[0]))return i.formatRows(n);var e=new P,r=[];return n.forEach(function(t){for(var n in t)e.has(n)||r.push(e.add(n))}),[r.map(s).join(t)].concat(n.map(function(n){return r.map(function(t){return s(n[t])}).join(t)})).join("\n")},i.formatRows=function(t){return t.map(u).join("\n")},i},a.csv=a.dsv(",","text/csv"),a.tsv=a.dsv("\t","text/tab-separated-values");var Sn,An,En,Ln,_n=this[D(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};function Nn(t,n,e){var r=arguments.length;r<2&&(n=0),r<3&&(e=Date.now());var i={c:t,t:e+n,n:null};return An?An.n=i:Sn=i,An=i,En||(Ln=clearTimeout(Ln),En=1,_n(qn)),i}function qn(){var t=Cn(),n=Tn()-t;n>24?(isFinite(n)&&(clearTimeout(Ln),Ln=setTimeout(qn,n)),En=0):(En=1,_n(qn))}function Cn(){for(var t=Date.now(),n=Sn;n;)t>=n.t&&n.c(t-n.t)&&(n.c=null),n=n.n;return t}function Tn(){for(var t,n=Sn,e=1/0;n;)n.c?(n.t<e&&(e=n.t),n=(t=n).n):n=t?t.n=n.n:Sn=n.n;return An=t,e}function zn(t,n){return n-(t?Math.ceil(Math.log(t)/Math.LN10):1)}a.timer=function(){Nn.apply(this,arguments)},a.timer.flush=function(){Cn(),Tn()},a.round=function(t,n){return n?Math.round(t*(n=Math.pow(10,n)))/n:Math.round(t)};var Pn=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map(function(t,n){var e=Math.pow(10,3*M(8-n));return{scale:n>8?function(t){return t/e}:function(t){return t*e},symbol:t}});a.formatPrefix=function(t,n){var e=0;return(t=+t)&&(t<0&&(t*=-1),n&&(t=a.round(t,zn(t,n))),e=1+Math.floor(1e-12+Math.log(t)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),Pn[8+e/3]};var In=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,Rn=a.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,n){return t.toPrecision(n)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},r:function(t,n){return(t=a.round(t,zn(t,n))).toFixed(Math.max(0,Math.min(20,zn(t*(1+1e-15),n))))}});function Dn(t){return t+""}var Hn=a.time={},On=Date;function jn(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}jn.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){Un.setUTCDate.apply(this._,arguments)},setDay:function(){Un.setUTCDay.apply(this._,arguments)},setFullYear:function(){Un.setUTCFullYear.apply(this._,arguments)},setHours:function(){Un.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){Un.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){Un.setUTCMinutes.apply(this._,arguments)},setMonth:function(){Un.setUTCMonth.apply(this._,arguments)},setSeconds:function(){Un.setUTCSeconds.apply(this._,arguments)},setTime:function(){Un.setTime.apply(this._,arguments)}};var Un=Date.prototype;function Fn(t,n,e){function r(n){var e=t(n),r=a(e,1);return n-e<r-n?e:r}function i(e){return n(e=t(new On(e-1)),1),e}function a(t,e){return n(t=new On(+t),e),t}function o(t,r,a){var o=i(t),u=[];if(a>1)for(;o<r;)e(o)%a||u.push(new Date(+o)),n(o,1);else for(;o<r;)u.push(new Date(+o)),n(o,1);return u}t.floor=t,t.round=r,t.ceil=i,t.offset=a,t.range=o;var u=t.utc=Bn(t);return u.floor=u,u.round=Bn(r),u.ceil=Bn(i),u.offset=Bn(a),u.range=function(t,n,e){try{On=jn;var r=new jn;return r._=t,o(r,n,e)}finally{On=Date}},t}function Bn(t){return function(n,e){try{On=jn;var r=new jn;return r._=n,t(r,e)._}finally{On=Date}}}Hn.year=Fn(function(t){return(t=Hn.day(t)).setMonth(0,1),t},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t){return t.getFullYear()}),Hn.years=Hn.year.range,Hn.years.utc=Hn.year.utc.range,Hn.day=Fn(function(t){var n=new On(2e3,0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n},function(t,n){t.setDate(t.getDate()+n)},function(t){return t.getDate()-1}),Hn.days=Hn.day.range,Hn.days.utc=Hn.day.utc.range,Hn.dayOfYear=function(t){var n=Hn.year(t);return Math.floor((t-n-6e4*(t.getTimezoneOffset()-n.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(t,n){n=7-n;var e=Hn[t]=Fn(function(t){return(t=Hn.day(t)).setDate(t.getDate()-(t.getDay()+n)%7),t},function(t,n){t.setDate(t.getDate()+7*Math.floor(n))},function(t){var e=Hn.year(t).getDay();return Math.floor((Hn.dayOfYear(t)+(e+n)%7)/7)-(e!==n)});Hn[t+"s"]=e.range,Hn[t+"s"].utc=e.utc.range,Hn[t+"OfYear"]=function(t){var e=Hn.year(t).getDay();return Math.floor((Hn.dayOfYear(t)+(e+n)%7)/7)}}),Hn.week=Hn.sunday,Hn.weeks=Hn.sunday.range,Hn.weeks.utc=Hn.sunday.utc.range,Hn.weekOfYear=Hn.sundayOfYear;var Yn={"-":"",_:" ",0:"0"},Vn=/^\s*\d+/,Wn=/^%/;function Xn(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",a=i.length;return r+(a<e?new Array(e-a+1).join(n)+i:i)}function $n(t){return new RegExp("^(?:"+t.map(a.requote).join("|")+")","i")}function Zn(t){for(var n=new S,e=-1,r=t.length;++e<r;)n.set(t[e].toLowerCase(),e);return n}function Kn(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Jn(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function Gn(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function Qn(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function te(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+2));return r?(t.y=function(t){return t+(t>68?1900:2e3)}(+r[0]),e+r[0].length):-1}function ne(t,n,e){return/^[+-]\d{4}$/.test(n=n.slice(e,e+5))?(t.Z=-n,e+5):-1}function ee(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function re(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ie(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+3));return r?(t.j=+r[0],e+r[0].length):-1}function ae(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function oe(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function ue(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function se(t,n,e){Vn.lastIndex=0;var r=Vn.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function le(t){var n=t.getTimezoneOffset(),e=n>0?"-":"+",r=M(n)/60|0,i=M(n)%60;return e+Xn(r,"0",2)+Xn(i,"0",2)}function ce(t,n,e){Wn.lastIndex=0;var r=Wn.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function fe(t){for(var n=t.length,e=-1;++e<n;)t[e][0]=this(t[e][0]);return function(n){for(var e=0,r=t[e];!r[1](n);)r=t[++e];return r[0](n)}}a.locale=function(t){return{numberFormat:function(t){var n=t.decimal,e=t.thousands,r=t.grouping,i=t.currency,o=r&&e?function(t,n){for(var i=t.length,a=[],o=0,u=r[0],s=0;i>0&&u>0&&(s+u+1>n&&(u=Math.max(1,n-s)),a.push(t.substring(i-=u,i+u)),!((s+=u+1)>n));)u=r[o=(o+1)%r.length];return a.reverse().join(e)}:I;return function(t){var e=In.exec(t),r=e[1]||" ",u=e[2]||">",s=e[3]||"-",l=e[4]||"",c=e[5],f=+e[6],h=e[7],d=e[8],p=e[9],g=1,v="",y="",m=!1,b=!0;switch(d&&(d=+d.substring(1)),(c||"0"===r&&"="===u)&&(c=r="0",u="="),p){case"n":h=!0,p="g";break;case"%":g=100,y="%",p="f";break;case"p":g=100,y="%",p="r";break;case"b":case"o":case"x":case"X":"#"===l&&(v="0"+p.toLowerCase());case"c":b=!1;case"d":m=!0,d=0;break;case"s":g=-1,p="r"}"$"===l&&(v=i[0],y=i[1]),"r"!=p||d||(p="g"),null!=d&&("g"==p?d=Math.max(1,Math.min(21,d)):"e"!=p&&"f"!=p||(d=Math.max(0,Math.min(20,d)))),p=Rn.get(p)||Dn;var x=c&&h;return function(t){var e=y;if(m&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===s?"":s;if(g<0){var l=a.formatPrefix(t,d);t=l.scale(t),e=l.symbol+y}else t*=g;var w,M,k=(t=p(t,d)).lastIndexOf(".");if(k<0){var S=b?t.lastIndexOf("e"):-1;S<0?(w=t,M=""):(w=t.substring(0,S),M=t.substring(S))}else w=t.substring(0,k),M=n+t.substring(k+1);!c&&h&&(w=o(w,1/0));var A=v.length+w.length+M.length+(x?0:i.length),E=A<f?new Array(A=f-A+1).join(r):"";return x&&(w=o(E+w,E.length?f-M.length:1/0)),i+=v,t=w+M,("<"===u?i+t+E:">"===u?E+i+t:"^"===u?E.substring(0,A>>=1)+i+t+E.substring(A):i+(x?t:E+t))+e}}}(t),timeFormat:function(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,s=t.months,l=t.shortMonths;function c(t){var n=t.length;function e(e){for(var r,i,a,o=[],u=-1,s=0;++u<n;)37===t.charCodeAt(u)&&(o.push(t.slice(s,u)),null!=(i=Yn[r=t.charAt(++u)])&&(r=t.charAt(++u)),(a=w[r])&&(r=a(e,null==i?"e"===r?" ":"0":i)),o.push(r),s=u+1);return o.push(t.slice(s,u)),o.join("")}return e.parse=function(n){var e={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null};if(f(e,t,n,0)!=n.length)return null;"p"in e&&(e.H=e.H%12+12*e.p);var r=null!=e.Z&&On!==jn,i=new(r?jn:On);return"j"in e?i.setFullYear(e.y,0,e.j):"W"in e||"U"in e?("w"in e||(e.w="W"in e?1:0),i.setFullYear(e.y,0,1),i.setFullYear(e.y,0,"W"in e?(e.w+6)%7+7*e.W-(i.getDay()+5)%7:e.w+7*e.U-(i.getDay()+6)%7)):i.setFullYear(e.y,e.m,e.d),i.setHours(e.H+(e.Z/100|0),e.M+e.Z%100,e.S,e.L),r?i._:i},e.toString=function(){return t},e}function f(t,n,e,r){for(var i,a,o,u=0,s=n.length,l=e.length;u<s;){if(r>=l)return-1;if(37===(i=n.charCodeAt(u++))){if(o=n.charAt(u++),!(a=M[o in Yn?n.charAt(u++):o])||(r=a(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}c.utc=function(t){var n=c(t);function e(t){try{var e=new(On=jn);return e._=t,n(e)}finally{On=Date}}return e.parse=function(t){try{On=jn;var e=n.parse(t);return e&&e._}finally{On=Date}},e.toString=n.toString,e},c.multi=c.utc.multi=fe;var h=a.map(),d=$n(o),p=Zn(o),g=$n(u),v=Zn(u),y=$n(s),m=Zn(s),b=$n(l),x=Zn(l);i.forEach(function(t,n){h.set(t.toLowerCase(),n)});var w={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return l[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:c(n),d:function(t,n){return Xn(t.getDate(),n,2)},e:function(t,n){return Xn(t.getDate(),n,2)},H:function(t,n){return Xn(t.getHours(),n,2)},I:function(t,n){return Xn(t.getHours()%12||12,n,2)},j:function(t,n){return Xn(1+Hn.dayOfYear(t),n,3)},L:function(t,n){return Xn(t.getMilliseconds(),n,3)},m:function(t,n){return Xn(t.getMonth()+1,n,2)},M:function(t,n){return Xn(t.getMinutes(),n,2)},p:function(t){return i[+(t.getHours()>=12)]},S:function(t,n){return Xn(t.getSeconds(),n,2)},U:function(t,n){return Xn(Hn.sundayOfYear(t),n,2)},w:function(t){return t.getDay()},W:function(t,n){return Xn(Hn.mondayOfYear(t),n,2)},x:c(e),X:c(r),y:function(t,n){return Xn(t.getFullYear()%100,n,2)},Y:function(t,n){return Xn(t.getFullYear()%1e4,n,4)},Z:le,"%":function(){return"%"}},M={a:function(t,n,e){g.lastIndex=0;var r=g.exec(n.slice(e));return r?(t.w=v.get(r[0].toLowerCase()),e+r[0].length):-1},A:function(t,n,e){d.lastIndex=0;var r=d.exec(n.slice(e));return r?(t.w=p.get(r[0].toLowerCase()),e+r[0].length):-1},b:function(t,n,e){b.lastIndex=0;var r=b.exec(n.slice(e));return r?(t.m=x.get(r[0].toLowerCase()),e+r[0].length):-1},B:function(t,n,e){y.lastIndex=0;var r=y.exec(n.slice(e));return r?(t.m=m.get(r[0].toLowerCase()),e+r[0].length):-1},c:function(t,n,e){return f(t,w.c.toString(),n,e)},d:re,e:re,H:ae,I:ae,j:ie,L:se,m:ee,M:oe,p:function(t,n,e){var r=h.get(n.slice(e,e+=2).toLowerCase());return null==r?-1:(t.p=r,e)},S:ue,U:Jn,w:Kn,W:Gn,x:function(t,n,e){return f(t,w.x.toString(),n,e)},X:function(t,n,e){return f(t,w.X.toString(),n,e)},y:te,Y:Qn,Z:ne,"%":ce};return c}(t)}};var he=a.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function de(){}a.format=he.numberFormat,a.geo={},de.prototype={s:0,t:0,add:function(t){ge(t,this.t,pe),ge(pe.s,this.s,this),this.s?this.t+=pe.t:this.s=pe.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var pe=new de;function ge(t,n,e){var r=e.s=t+n,i=r-t,a=r-i;e.t=t-a+(n-i)}function ve(t,n){t&&me.hasOwnProperty(t.type)&&me[t.type](t,n)}a.geo.stream=function(t,n){t&&ye.hasOwnProperty(t.type)?ye[t.type](t,n):ve(t,n)};var ye={Feature:function(t,n){ve(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)ve(e[r].geometry,n)}},me={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){be(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)be(e[r],n,0)},Polygon:function(t,n){xe(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)xe(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)ve(e[r],n)}};function be(t,n,e){var r,i=-1,a=t.length-e;for(n.lineStart();++i<a;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function xe(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)be(t[e],n,1);n.polygonEnd()}a.geo.area=function(t){return we=0,a.geo.stream(t,Pe),we};var we,Me,ke,Se,Ae,Ee,Le,_e,Ne,qe,Ce,Te,ze=new de,Pe={sphere:function(){we+=4*Nt},point:O,lineStart:O,lineEnd:O,polygonStart:function(){ze.reset(),Pe.lineStart=Ie},polygonEnd:function(){var t=2*ze;we+=t<0?4*Nt+t:t,Pe.lineStart=Pe.lineEnd=Pe.point=O}};function Ie(){var t,n,e,r,i;function a(t,n){n=n*zt/2+Nt/4;var a=(t*=zt)-e,o=a>=0?1:-1,u=o*a,s=Math.cos(n),l=Math.sin(n),c=i*l,f=r*s+c*Math.cos(u),h=c*o*Math.sin(u);ze.add(Math.atan2(h,f)),e=t,r=s,i=l}Pe.point=function(o,u){Pe.point=a,e=(t=o)*zt,r=Math.cos(u=(n=u)*zt/2+Nt/4),i=Math.sin(u)},Pe.lineEnd=function(){a(t,n)}}function Re(t){var n=t[0],e=t[1],r=Math.cos(e);return[r*Math.cos(n),r*Math.sin(n),Math.sin(e)]}function De(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function He(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Oe(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function je(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Ue(t){var n=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function Fe(t){return[Math.atan2(t[1],t[0]),Ht(t[2])]}function Be(t,n){return M(t[0]-n[0])<Lt&&M(t[1]-n[1])<Lt}a.geo.bounds=function(){var t,n,e,r,i,o,u,s,l,c,f,h={point:d,lineStart:g,lineEnd:v,polygonStart:function(){h.point=y,h.lineStart=m,h.lineEnd=b,l=0,Pe.polygonStart()},polygonEnd:function(){Pe.polygonEnd(),h.point=d,h.lineStart=g,h.lineEnd=v,ze<0?(t=-(e=180),n=-(r=90)):l>Lt?r=90:l<-Lt&&(n=-90),f[0]=t,f[1]=e}};function d(i,a){c.push(f=[t=i,e=i]),a<n&&(n=a),a>r&&(r=a)}function p(a,o){var u=Re([a*zt,o*zt]);if(s){var l=He(s,u),c=He([l[1],-l[0],0],l);Ue(c),c=Fe(c);var f=a-i,h=f>0?1:-1,p=c[0]*Pt*h,g=M(f)>180;if(g^(h*i<p&&p<h*a))(v=c[1]*Pt)>r&&(r=v);else if(g^(h*i<(p=(p+360)%360-180)&&p<h*a)){var v;(v=-c[1]*Pt)<n&&(n=v)}else o<n&&(n=o),o>r&&(r=o);g?a<i?x(t,a)>x(t,e)&&(e=a):x(a,e)>x(t,e)&&(t=a):e>=t?(a<t&&(t=a),a>e&&(e=a)):a>i?x(t,a)>x(t,e)&&(e=a):x(a,e)>x(t,e)&&(t=a)}else d(a,o);s=u,i=a}function g(){h.point=p}function v(){f[0]=t,f[1]=e,h.point=d,s=null}function y(t,n){if(s){var e=t-i;l+=M(e)>180?e+(e>0?360:-360):e}else o=t,u=n;Pe.point(t,n),p(t,n)}function m(){Pe.lineStart()}function b(){y(o,u),Pe.lineEnd(),M(l)>Lt&&(t=-(e=180)),f[0]=t,f[1]=e,s=null}function x(t,n){return(n-=t)<0?n+360:n}function w(t,n){return t[0]-n[0]}function k(t,n){return n[0]<=n[1]?n[0]<=t&&t<=n[1]:t<n[0]||n[1]<t}return function(i){if(r=e=-(t=n=1/0),c=[],a.geo.stream(i,h),l=c.length){c.sort(w);for(var o=1,u=[g=c[0]];o<l;++o)k((d=c[o])[0],g)||k(d[1],g)?(x(g[0],d[1])>x(g[0],g[1])&&(g[1]=d[1]),x(d[0],g[1])>x(g[0],g[1])&&(g[0]=d[0])):u.push(g=d);for(var s,l,d,p=-1/0,g=(o=0,u[l=u.length-1]);o<=l;g=d,++o)d=u[o],(s=x(g[1],d[0]))>p&&(p=s,t=d[0],e=g[1])}return c=f=null,t===1/0||n===1/0?[[NaN,NaN],[NaN,NaN]]:[[t,n],[e,r]]}}(),a.geo.centroid=function(t){Me=ke=Se=Ae=Ee=Le=_e=Ne=qe=Ce=Te=0,a.geo.stream(t,Ye);var n=qe,e=Ce,r=Te,i=n*n+e*e+r*r;return i<_t&&(n=Le,e=_e,r=Ne,ke<Lt&&(n=Se,e=Ae,r=Ee),(i=n*n+e*e+r*r)<_t)?[NaN,NaN]:[Math.atan2(e,n)*Pt,Ht(r/Math.sqrt(i))*Pt]};var Ye={sphere:O,point:Ve,lineStart:Xe,lineEnd:$e,polygonStart:function(){Ye.lineStart=Ze},polygonEnd:function(){Ye.lineStart=Xe}};function Ve(t,n){t*=zt;var e=Math.cos(n*=zt);We(e*Math.cos(t),e*Math.sin(t),Math.sin(n))}function We(t,n,e){Se+=(t-Se)/++Me,Ae+=(n-Ae)/Me,Ee+=(e-Ee)/Me}function Xe(){var t,n,e;function r(r,i){r*=zt;var a=Math.cos(i*=zt),o=a*Math.cos(r),u=a*Math.sin(r),s=Math.sin(i),l=Math.atan2(Math.sqrt((l=n*s-e*u)*l+(l=e*o-t*s)*l+(l=t*u-n*o)*l),t*o+n*u+e*s);ke+=l,Le+=l*(t+(t=o)),_e+=l*(n+(n=u)),Ne+=l*(e+(e=s)),We(t,n,e)}Ye.point=function(i,a){i*=zt;var o=Math.cos(a*=zt);t=o*Math.cos(i),n=o*Math.sin(i),e=Math.sin(a),Ye.point=r,We(t,n,e)}}function $e(){Ye.point=Ve}function Ze(){var t,n,e,r,i;function a(t,n){t*=zt;var a=Math.cos(n*=zt),o=a*Math.cos(t),u=a*Math.sin(t),s=Math.sin(n),l=r*s-i*u,c=i*o-e*s,f=e*u-r*o,h=Math.sqrt(l*l+c*c+f*f),d=e*o+r*u+i*s,p=h&&-Dt(d)/h,g=Math.atan2(h,d);qe+=p*l,Ce+=p*c,Te+=p*f,ke+=g,Le+=g*(e+(e=o)),_e+=g*(r+(r=u)),Ne+=g*(i+(i=s)),We(e,r,i)}Ye.point=function(o,u){t=o,n=u,Ye.point=a,o*=zt;var s=Math.cos(u*=zt);e=s*Math.cos(o),r=s*Math.sin(o),i=Math.sin(u),We(e,r,i)},Ye.lineEnd=function(){a(t,n),Ye.lineEnd=$e,Ye.point=Ve}}function Ke(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Je(){return!0}function Ge(t,n,e,r,i){var a=[],o=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e=t[0],r=t[n];if(Be(e,r)){i.lineStart();for(var u=0;u<n;++u)i.point((e=t[u])[0],e[1]);i.lineEnd()}else{var s=new tr(e,t,null,!0),l=new tr(e,null,s,!1);s.o=l,a.push(s),o.push(l),l=new tr(r,null,s=new tr(r,t,null,!1),!0),s.o=l,a.push(s),o.push(l)}}}),o.sort(n),Qe(a),Qe(o),a.length){for(var u=0,s=e,l=o.length;u<l;++u)o[u].e=s=!s;for(var c,f,h=a[0];;){for(var d=h,p=!0;d.v;)if((d=d.n)===h)return;c=d.z,i.lineStart();do{if(d.v=d.o.v=!0,d.e){if(p)for(u=0,l=c.length;u<l;++u)i.point((f=c[u])[0],f[1]);else r(d.x,d.n.x,1,i);d=d.n}else{if(p)for(u=(c=d.p.z).length-1;u>=0;--u)i.point((f=c[u])[0],f[1]);else r(d.x,d.p.x,-1,i);d=d.p}c=(d=d.o).z,p=!p}while(!d.v);i.lineEnd()}}}function Qe(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function tr(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function nr(t,n,e,r){return function(i,o){var u,s=n(o),l=i.invert(r[0],r[1]),c={point:f,lineStart:d,lineEnd:p,polygonStart:function(){c.point=x,c.lineStart=w,c.lineEnd=M,u=[],g=[]},polygonEnd:function(){c.point=f,c.lineStart=d,c.lineEnd=p,u=a.merge(u);var t=function(t,n){var e=t[0],r=t[1],i=[Math.sin(e),-Math.cos(e),0],a=0,o=0;ze.reset();for(var u=0,s=n.length;u<s;++u){var l=n[u],c=l.length;if(c)for(var f=l[0],h=f[0],d=f[1]/2+Nt/4,p=Math.sin(d),g=Math.cos(d),v=1;;){v===c&&(v=0);var y=(t=l[v])[0],m=t[1]/2+Nt/4,b=Math.sin(m),x=Math.cos(m),w=y-h,M=w>=0?1:-1,k=M*w,S=k>Nt,A=p*b;if(ze.add(Math.atan2(A*M*Math.sin(k),g*x+A*Math.cos(k))),a+=S?w+M*qt:w,S^h>=e^y>=e){var E=He(Re(f),Re(t));Ue(E);var L=He(i,E);Ue(L);var _=(S^w>=0?-1:1)*Ht(L[2]);(r>_||r===_&&(E[0]||E[1]))&&(o+=S^w>=0?1:-1)}if(!v++)break;h=y,p=b,g=x,f=t}}return(a<-Lt||a<Lt&&ze<-Lt)^1&o}(l,g);u.length?(b||(o.polygonStart(),b=!0),Ge(u,ir,t,e,o)):t&&(b||(o.polygonStart(),b=!0),o.lineStart(),e(null,null,1,o),o.lineEnd()),b&&(o.polygonEnd(),b=!1),u=g=null},sphere:function(){o.polygonStart(),o.lineStart(),e(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function f(n,e){var r=i(n,e);t(n=r[0],e=r[1])&&o.point(n,e)}function h(t,n){var e=i(t,n);s.point(e[0],e[1])}function d(){c.point=h,s.lineStart()}function p(){c.point=f,s.lineEnd()}var g,v,y=rr(),m=n(y),b=!1;function x(t,n){v.push([t,n]);var e=i(t,n);m.point(e[0],e[1])}function w(){m.lineStart(),v=[]}function M(){x(v[0][0],v[0][1]),m.lineEnd();var t,n=m.clean(),e=y.buffer(),r=e.length;if(v.pop(),g.push(v),v=null,r)if(1&n){var i,a=-1;if((r=(t=e[0]).length-1)>0){for(b||(o.polygonStart(),b=!0),o.lineStart();++a<r;)o.point((i=t[a])[0],i[1]);o.lineEnd()}}else r>1&&2&n&&e.push(e.pop().concat(e.shift())),u.push(e.filter(er))}return c}}function er(t){return t.length>1}function rr(){var t,n=[];return{lineStart:function(){n.push(t=[])},point:function(n,e){t.push([n,e])},lineEnd:O,buffer:function(){var e=n;return n=[],t=null,e},rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))}}}function ir(t,n){return((t=t.x)[0]<0?t[1]-Tt-Lt:Tt-t[1])-((n=n.x)[0]<0?n[1]-Tt-Lt:Tt-n[1])}var ar=nr(Je,function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(a,o){var u=a>0?Nt:-Nt,s=M(a-e);M(s-Nt)<Lt?(t.point(e,r=(r+o)/2>0?Tt:-Tt),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(a,r),n=0):i!==u&&s>=Nt&&(M(e-i)<Lt&&(e-=i*Lt),M(a-u)<Lt&&(a-=u*Lt),r=function(t,n,e,r){var i,a,o=Math.sin(t-e);return M(o)>Lt?Math.atan((Math.sin(n)*(a=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(n))*Math.sin(t))/(i*a*o)):(n+r)/2}(e,r,a,o),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=a,r=o),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*Tt,r.point(-Nt,i),r.point(0,i),r.point(Nt,i),r.point(Nt,0),r.point(Nt,-i),r.point(0,-i),r.point(-Nt,-i),r.point(-Nt,0),r.point(-Nt,i);else if(M(t[0]-n[0])>Lt){var a=t[0]<n[0]?Nt:-Nt;i=e*a/2,r.point(-a,i),r.point(0,i),r.point(a,i)}else r.point(n[0],n[1])},[-Nt,-Nt/2]);function or(t,n,e,r){return function(i){var a,o=i.a,u=i.b,s=o.x,l=o.y,c=0,f=1,h=u.x-s,d=u.y-l;if(a=t-s,h||!(a>0)){if(a/=h,h<0){if(a<c)return;a<f&&(f=a)}else if(h>0){if(a>f)return;a>c&&(c=a)}if(a=e-s,h||!(a<0)){if(a/=h,h<0){if(a>f)return;a>c&&(c=a)}else if(h>0){if(a<c)return;a<f&&(f=a)}if(a=n-l,d||!(a>0)){if(a/=d,d<0){if(a<c)return;a<f&&(f=a)}else if(d>0){if(a>f)return;a>c&&(c=a)}if(a=r-l,d||!(a<0)){if(a/=d,d<0){if(a>f)return;a>c&&(c=a)}else if(d>0){if(a<c)return;a<f&&(f=a)}return c>0&&(i.a={x:s+c*h,y:l+c*d}),f<1&&(i.b={x:s+f*h,y:l+f*d}),i}}}}}}var ur=1e9;function sr(t,n,e,r){return function(s){var l,c,f,h,d,p,g,v,y,m,b,x=s,w=rr(),M=or(t,n,e,r),k={point:E,lineStart:function(){k.point=L,c&&c.push(f=[]);m=!0,y=!1,g=v=NaN},lineEnd:function(){l&&(L(h,d),p&&y&&w.rejoin(),l.push(w.buffer()));k.point=E,y&&s.lineEnd()},polygonStart:function(){s=w,l=[],c=[],b=!0},polygonEnd:function(){s=x,l=a.merge(l);var n=function(t){for(var n=0,e=c.length,r=t[1],i=0;i<e;++i)for(var a,o=1,u=c[i],s=u.length,l=u[0];o<s;++o)a=u[o],l[1]<=r?a[1]>r&&Rt(l,a,t)>0&&++n:a[1]<=r&&Rt(l,a,t)<0&&--n,l=a;return 0!==n}([t,r]),e=b&&n,i=l.length;(e||i)&&(s.polygonStart(),e&&(s.lineStart(),S(null,null,1,s),s.lineEnd()),i&&Ge(l,o,n,S,s),s.polygonEnd()),l=c=f=null}};function S(a,o,s,l){var c=0,f=0;if(null==a||(c=i(a,s))!==(f=i(o,s))||u(a,o)<0^s>0)do{l.point(0===c||3===c?t:e,c>1?r:n)}while((c=(c+s+4)%4)!==f);else l.point(o[0],o[1])}function A(i,a){return t<=i&&i<=e&&n<=a&&a<=r}function E(t,n){A(t,n)&&s.point(t,n)}function L(t,n){var e=A(t=Math.max(-ur,Math.min(ur,t)),n=Math.max(-ur,Math.min(ur,n)));if(c&&f.push([t,n]),m)h=t,d=n,p=e,m=!1,e&&(s.lineStart(),s.point(t,n));else if(e&&y)s.point(t,n);else{var r={a:{x:g,y:v},b:{x:t,y:n}};M(r)?(y||(s.lineStart(),s.point(r.a.x,r.a.y)),s.point(r.b.x,r.b.y),e||s.lineEnd(),b=!1):e&&(s.lineStart(),s.point(t,n),b=!1)}g=t,v=n,y=e}return k};function i(r,i){return M(r[0]-t)<Lt?i>0?0:3:M(r[0]-e)<Lt?i>0?2:1:M(r[1]-n)<Lt?i>0?1:0:i>0?3:2}function o(t,n){return u(t.x,n.x)}function u(t,n){var e=i(t,1),r=i(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}}function lr(t){var n=0,e=Nt/3,r=Cr(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*Nt/180,e=t[1]*Nt/180):[n/Nt*180,e/Nt*180]},i}function cr(t,n){var e=Math.sin(t),r=(e+Math.sin(n))/2,i=1+e*(2*r-e),a=Math.sqrt(i)/r;function o(t,n){var e=Math.sqrt(i-2*r*Math.sin(n))/r;return[e*Math.sin(t*=r),a-e*Math.cos(t)]}return o.invert=function(t,n){var e=a-n;return[Math.atan2(t,e)/r,Ht((i-(t*t+e*e)*r*r)/(2*r))]},o}a.geo.clipExtent=function(){var t,n,e,r,i,a,o={stream:function(t){return i&&(i.valid=!1),(i=a(t)).valid=!0,i},extent:function(u){return arguments.length?(a=sr(t=+u[0][0],n=+u[0][1],e=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),o):[[t,n],[e,r]]}};return o.extent([[0,0],[960,500]])},(a.geo.conicEqualArea=function(){return lr(cr)}).raw=cr,a.geo.albers=function(){return a.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},a.geo.albersUsa=function(){var t,n,e,r,i=a.geo.albers(),o=a.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=a.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),s={point:function(n,e){t=[n,e]}};function l(i){var a=i[0],o=i[1];return t=null,n(a,o),t||(e(a,o),t)||r(a,o),t}return l.invert=function(t){var n=i.scale(),e=i.translate(),r=(t[0]-e[0])/n,a=(t[1]-e[1])/n;return(a>=.12&&a<.234&&r>=-.425&&r<-.214?o:a>=.166&&a<.234&&r>=-.214&&r<-.115?u:i).invert(t)},l.stream=function(t){var n=i.stream(t),e=o.stream(t),r=u.stream(t);return{point:function(t,i){n.point(t,i),e.point(t,i),r.point(t,i)},sphere:function(){n.sphere(),e.sphere(),r.sphere()},lineStart:function(){n.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){n.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){n.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){n.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},l.precision=function(t){return arguments.length?(i.precision(t),o.precision(t),u.precision(t),l):i.precision()},l.scale=function(t){return arguments.length?(i.scale(t),o.scale(.35*t),u.scale(t),l.translate(i.translate())):i.scale()},l.translate=function(t){if(!arguments.length)return i.translate();var a=i.scale(),c=+t[0],f=+t[1];return n=i.translate(t).clipExtent([[c-.455*a,f-.238*a],[c+.455*a,f+.238*a]]).stream(s).point,e=o.translate([c-.307*a,f+.201*a]).clipExtent([[c-.425*a+Lt,f+.12*a+Lt],[c-.214*a-Lt,f+.234*a-Lt]]).stream(s).point,r=u.translate([c-.205*a,f+.212*a]).clipExtent([[c-.214*a+Lt,f+.166*a+Lt],[c-.115*a-Lt,f+.234*a-Lt]]).stream(s).point,l},l.scale(1070)};var fr,hr,dr,pr,gr,vr,yr={point:O,lineStart:O,lineEnd:O,polygonStart:function(){hr=0,yr.lineStart=mr},polygonEnd:function(){yr.lineStart=yr.lineEnd=yr.point=O,fr+=M(hr/2)}};function mr(){var t,n,e,r;function i(t,n){hr+=r*t-e*n,e=t,r=n}yr.point=function(a,o){yr.point=i,t=e=a,n=r=o},yr.lineEnd=function(){i(t,n)}}var br={point:function(t,n){t<dr&&(dr=t);t>gr&&(gr=t);n<pr&&(pr=n);n>vr&&(vr=n)},lineStart:O,lineEnd:O,polygonStart:O,polygonEnd:O};function xr(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}var wr,Mr={point:kr,lineStart:Sr,lineEnd:Ar,polygonStart:function(){Mr.lineStart=Er},polygonEnd:function(){Mr.point=kr,Mr.lineStart=Sr,Mr.lineEnd=Ar}};function kr(t,n){Se+=t,Ae+=n,++Ee}function Sr(){var t,n;function e(e,r){var i=e-t,a=r-n,o=Math.sqrt(i*i+a*a);Le+=o*(t+e)/2,_e+=o*(n+r)/2,Ne+=o,kr(t=e,n=r)}Mr.point=function(r,i){Mr.point=e,kr(t=r,n=i)}}function Ar(){Mr.point=kr}function Er(){var t,n,e,r;function i(t,n){var i=t-e,a=n-r,o=Math.sqrt(i*i+a*a);Le+=o*(e+t)/2,_e+=o*(r+n)/2,Ne+=o,qe+=(o=r*t-e*n)*(e+t),Ce+=o*(r+n),Te+=3*o,kr(e=t,r=n)}Mr.point=function(a,o){Mr.point=i,kr(t=e=a,n=r=o)},Mr.lineEnd=function(){i(t,n)}}function Lr(t){var n=.5,e=Math.cos(30*zt),r=16;function i(n){return(r?function(n){var e,i,o,u,s,l,c,f,h,d,p,g,v={point:y,lineStart:m,lineEnd:x,polygonStart:function(){n.polygonStart(),v.lineStart=w},polygonEnd:function(){n.polygonEnd(),v.lineStart=m}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function m(){f=NaN,v.point=b,n.lineStart()}function b(e,i){var o=Re([e,i]),u=t(e,i);a(f,h,c,d,p,g,f=u[0],h=u[1],c=e,d=o[0],p=o[1],g=o[2],r,n),n.point(f,h)}function x(){v.point=y,n.lineEnd()}function w(){m(),v.point=M,v.lineEnd=k}function M(t,n){b(e=t,n),i=f,o=h,u=d,s=p,l=g,v.point=b}function k(){a(f,h,c,d,p,g,i,o,e,u,s,l,r,n),v.lineEnd=x,x()}return v}:function(n){return Nr(n,function(e,r){e=t(e,r),n.point(e[0],e[1])})})(n)}function a(r,i,o,u,s,l,c,f,h,d,p,g,v,y){var m=c-r,b=f-i,x=m*m+b*b;if(x>4*n&&v--){var w=u+d,k=s+p,S=l+g,A=Math.sqrt(w*w+k*k+S*S),E=Math.asin(S/=A),L=M(M(S)-1)<Lt||M(o-h)<Lt?(o+h)/2:Math.atan2(k,w),_=t(L,E),N=_[0],q=_[1],C=N-r,T=q-i,z=b*C-m*T;(z*z/x>n||M((m*C+b*T)/x-.5)>.3||u*d+s*p+l*g<e)&&(a(r,i,o,u,s,l,N,q,L,w/=A,k/=A,S,v,y),y.point(N,q),a(N,q,L,w,k,S,c,f,h,d,p,g,v,y))}}return i.precision=function(t){return arguments.length?(r=(n=t*t)>0&&16,i):Math.sqrt(n)},i}function _r(t){this.stream=t}function Nr(t,n){return{point:n,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function qr(t){return Cr(function(){return t})()}function Cr(t){var n,e,r,i,o,u,s=Lr(function(t,e){return[(t=n(t,e))[0]*l+i,o-t[1]*l]}),l=150,c=480,f=250,h=0,d=0,p=0,g=0,v=0,y=ar,m=I,b=null,x=null;function w(t){return[(t=r(t[0]*zt,t[1]*zt))[0]*l+i,o-t[1]*l]}function k(t){return(t=r.invert((t[0]-i)/l,(o-t[1])/l))&&[t[0]*Pt,t[1]*Pt]}function S(){r=Ke(e=Ir(p,g,v),n);var t=n(h,d);return i=c-t[0]*l,o=f+t[1]*l,A()}function A(){return u&&(u.valid=!1,u=null),w}return w.stream=function(t){return u&&(u.valid=!1),(u=Tr(y(e,s(m(t))))).valid=!0,u},w.clipAngle=function(t){return arguments.length?(y=null==t?(b=t,ar):function(t){var n=Math.cos(t),e=n>0,r=M(n)>Lt;return nr(i,function(t){var n,u,s,l,c;return{lineStart:function(){l=s=!1,c=1},point:function(f,h){var d,p=[f,h],g=i(f,h),v=e?g?0:o(f,h):g?o(f+(f<0?Nt:-Nt),h):0;if(!n&&(l=s=g)&&t.lineStart(),g!==s&&(d=a(n,p),(Be(n,d)||Be(p,d))&&(p[0]+=Lt,p[1]+=Lt,g=i(p[0],p[1]))),g!==s)c=0,g?(t.lineStart(),d=a(p,n),t.point(d[0],d[1])):(d=a(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(r&&n&&e^g){var y;v&u||!(y=a(p,n,!0))||(c=0,e?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!g||n&&Be(n,p)||t.point(p[0],p[1]),n=p,s=g,u=v},lineEnd:function(){s&&t.lineEnd(),n=null},clean:function(){return c|(l&&s)<<1}}},Or(t,6*zt),e?[0,-t]:[-Nt,t-Nt]);function i(t,e){return Math.cos(t)*Math.cos(e)>n}function a(t,e,r){var i=[1,0,0],a=He(Re(t),Re(e)),o=De(a,a),u=a[0],s=o-u*u;if(!s)return!r&&t;var l=n*o/s,c=-n*u/s,f=He(i,a),h=je(i,l);Oe(h,je(a,c));var d=f,p=De(h,d),g=De(d,d),v=p*p-g*(De(h,h)-1);if(!(v<0)){var y=Math.sqrt(v),m=je(d,(-p-y)/g);if(Oe(m,h),m=Fe(m),!r)return m;var b,x=t[0],w=e[0],k=t[1],S=e[1];w<x&&(b=x,x=w,w=b);var A=w-x,E=M(A-Nt)<Lt;if(!E&&S<k&&(b=k,k=S,S=b),E||A<Lt?E?k+S>0^m[1]<(M(m[0]-x)<Lt?k:S):k<=m[1]&&m[1]<=S:A>Nt^(x<=m[0]&&m[0]<=w)){var L=je(d,(-p+y)/g);return Oe(L,h),[m,Fe(L)]}}}function o(n,r){var i=e?t:Nt-t,a=0;return n<-i?a|=1:n>i&&(a|=2),r<-i?a|=4:r>i&&(a|=8),a}}((b=+t)*zt),A()):b},w.clipExtent=function(t){return arguments.length?(x=t,m=t?sr(t[0][0],t[0][1],t[1][0],t[1][1]):I,A()):x},w.scale=function(t){return arguments.length?(l=+t,S()):l},w.translate=function(t){return arguments.length?(c=+t[0],f=+t[1],S()):[c,f]},w.center=function(t){return arguments.length?(h=t[0]%360*zt,d=t[1]%360*zt,S()):[h*Pt,d*Pt]},w.rotate=function(t){return arguments.length?(p=t[0]%360*zt,g=t[1]%360*zt,v=t.length>2?t[2]%360*zt:0,S()):[p*Pt,g*Pt,v*Pt]},a.rebind(w,s,"precision"),function(){return n=t.apply(this,arguments),w.invert=n.invert&&k,S()}}function Tr(t){return Nr(t,function(n,e){t.point(n*zt,e*zt)})}function zr(t,n){return[t,n]}function Pr(t,n){return[t>Nt?t-qt:t<-Nt?t+qt:t,n]}function Ir(t,n,e){return t?n||e?Ke(Dr(t),Hr(n,e)):Dr(t):n||e?Hr(n,e):Pr}function Rr(t){return function(n,e){return[(n+=t)>Nt?n-qt:n<-Nt?n+qt:n,e]}}function Dr(t){var n=Rr(t);return n.invert=Rr(-t),n}function Hr(t,n){var e=Math.cos(t),r=Math.sin(t),i=Math.cos(n),a=Math.sin(n);function o(t,n){var o=Math.cos(n),u=Math.cos(t)*o,s=Math.sin(t)*o,l=Math.sin(n),c=l*e+u*r;return[Math.atan2(s*i-c*a,u*e-l*r),Ht(c*i+s*a)]}return o.invert=function(t,n){var o=Math.cos(n),u=Math.cos(t)*o,s=Math.sin(t)*o,l=Math.sin(n),c=l*i-s*a;return[Math.atan2(s*i+l*a,u*e+c*r),Ht(c*e-u*r)]},o}function Or(t,n){var e=Math.cos(t),r=Math.sin(t);return function(i,a,o,u){var s=o*n;null!=i?(i=jr(e,i),a=jr(e,a),(o>0?i<a:i>a)&&(i+=o*qt)):(i=t+o*qt,a=t-.5*s);for(var l,c=i;o>0?c>a:c<a;c-=s)u.point((l=Fe([e,-r*Math.cos(c),-r*Math.sin(c)]))[0],l[1])}}function jr(t,n){var e=Re(n);e[0]-=t,Ue(e);var r=Dt(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Lt)%(2*Math.PI)}function Ur(t,n,e){var r=a.range(t,n-Lt,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function Fr(t,n,e){var r=a.range(t,n-Lt,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function Br(t){return t.source}function Yr(t){return t.target}a.geo.path=function(){var t,n,e,r,i,o=4.5;function u(t){return t&&("function"==typeof o&&r.pointRadius(+o.apply(this,arguments)),i&&i.valid||(i=e(r)),a.geo.stream(t,i)),r.result()}function s(){return i=null,u}return u.area=function(t){return fr=0,a.geo.stream(t,e(yr)),fr},u.centroid=function(t){return Se=Ae=Ee=Le=_e=Ne=qe=Ce=Te=0,a.geo.stream(t,e(Mr)),Te?[qe/Te,Ce/Te]:Ne?[Le/Ne,_e/Ne]:Ee?[Se/Ee,Ae/Ee]:[NaN,NaN]},u.bounds=function(t){return gr=vr=-(dr=pr=1/0),a.geo.stream(t,e(br)),[[dr,pr],[gr,vr]]},u.projection=function(n){return arguments.length?(e=(t=n)?n.stream||function(t){var n=Lr(function(n,e){return t([n*Pt,e*Pt])});return function(t){return Tr(n(t))}}(n):I,s()):t},u.context=function(t){return arguments.length?(r=null==(n=t)?new function(){var t=xr(4.5),n=[],e={point:r,lineStart:function(){e.point=i},lineEnd:o,polygonStart:function(){e.lineEnd=u},polygonEnd:function(){e.lineEnd=o,e.point=r},pointRadius:function(n){return t=xr(n),e},result:function(){if(n.length){var t=n.join("");return n=[],t}}};function r(e,r){n.push("M",e,",",r,t)}function i(t,r){n.push("M",t,",",r),e.point=a}function a(t,e){n.push("L",t,",",e)}function o(){e.point=r}function u(){n.push("Z")}return e}:new function(t){var n=4.5,e={point:r,lineStart:function(){e.point=i},lineEnd:o,polygonStart:function(){e.lineEnd=u},polygonEnd:function(){e.lineEnd=o,e.point=r},pointRadius:function(t){return n=t,e},result:O};function r(e,r){t.moveTo(e+n,r),t.arc(e,r,n,0,qt)}function i(n,r){t.moveTo(n,r),e.point=a}function a(n,e){t.lineTo(n,e)}function o(){e.point=r}function u(){t.closePath()}return e}(t),"function"!=typeof o&&r.pointRadius(o),s()):n},u.pointRadius=function(t){return arguments.length?(o="function"==typeof t?t:(r.pointRadius(+t),+t),u):o},u.projection(a.geo.albersUsa()).context(null)},a.geo.transform=function(t){return{stream:function(n){var e=new _r(n);for(var r in t)e[r]=t[r];return e}}},_r.prototype={point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},a.geo.projection=qr,a.geo.projectionMutator=Cr,(a.geo.equirectangular=function(){return qr(zr)}).raw=zr.invert=zr,a.geo.rotation=function(t){function n(n){return(n=t(n[0]*zt,n[1]*zt))[0]*=Pt,n[1]*=Pt,n}return t=Ir(t[0]%360*zt,t[1]*zt,t.length>2?t[2]*zt:0),n.invert=function(n){return(n=t.invert(n[0]*zt,n[1]*zt))[0]*=Pt,n[1]*=Pt,n},n},Pr.invert=zr,a.geo.circle=function(){var t,n,e=[0,0],r=6;function i(){var t="function"==typeof e?e.apply(this,arguments):e,r=Ir(-t[0]*zt,-t[1]*zt,0).invert,i=[];return n(null,null,1,{point:function(t,n){i.push(t=r(t,n)),t[0]*=Pt,t[1]*=Pt}}),{type:"Polygon",coordinates:[i]}}return i.origin=function(t){return arguments.length?(e=t,i):e},i.angle=function(e){return arguments.length?(n=Or((t=+e)*zt,r*zt),i):t},i.precision=function(e){return arguments.length?(n=Or(t*zt,(r=+e)*zt),i):r},i.angle(90)},a.geo.distance=function(t,n){var e,r=(n[0]-t[0])*zt,i=t[1]*zt,a=n[1]*zt,o=Math.sin(r),u=Math.cos(r),s=Math.sin(i),l=Math.cos(i),c=Math.sin(a),f=Math.cos(a);return Math.atan2(Math.sqrt((e=f*o)*e+(e=l*c-s*f*u)*e),s*c+l*f*u)},a.geo.graticule=function(){var t,n,e,r,i,o,u,s,l,c,f,h,d=10,p=d,g=90,v=360,y=2.5;function m(){return{type:"MultiLineString",coordinates:b()}}function b(){return a.range(Math.ceil(r/g)*g,e,g).map(f).concat(a.range(Math.ceil(s/v)*v,u,v).map(h)).concat(a.range(Math.ceil(n/d)*d,t,d).filter(function(t){return M(t%g)>Lt}).map(l)).concat(a.range(Math.ceil(o/p)*p,i,p).filter(function(t){return M(t%v)>Lt}).map(c))}return m.lines=function(){return b().map(function(t){return{type:"LineString",coordinates:t}})},m.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(h(u).slice(1),f(e).reverse().slice(1),h(s).reverse().slice(1))]}},m.extent=function(t){return arguments.length?m.majorExtent(t).minorExtent(t):m.minorExtent()},m.majorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],s=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),s>u&&(t=s,s=u,u=t),m.precision(y)):[[r,s],[e,u]]},m.minorExtent=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),m.precision(y)):[[n,o],[t,i]]},m.step=function(t){return arguments.length?m.majorStep(t).minorStep(t):m.minorStep()},m.majorStep=function(t){return arguments.length?(g=+t[0],v=+t[1],m):[g,v]},m.minorStep=function(t){return arguments.length?(d=+t[0],p=+t[1],m):[d,p]},m.precision=function(a){return arguments.length?(y=+a,l=Ur(o,i,90),c=Fr(n,t,y),f=Ur(s,u,90),h=Fr(r,e,y),m):y},m.majorExtent([[-180,-90+Lt],[180,90-Lt]]).minorExtent([[-180,-80-Lt],[180,80+Lt]])},a.geo.greatArc=function(){var t,n,e=Br,r=Yr;function i(){return{type:"LineString",coordinates:[t||e.apply(this,arguments),n||r.apply(this,arguments)]}}return i.distance=function(){return a.geo.distance(t||e.apply(this,arguments),n||r.apply(this,arguments))},i.source=function(n){return arguments.length?(e=n,t="function"==typeof n?null:n,i):e},i.target=function(t){return arguments.length?(r=t,n="function"==typeof t?null:t,i):r},i.precision=function(){return arguments.length?i:0},i},a.geo.interpolate=function(t,n){return function(t,n,e,r){var i=Math.cos(n),a=Math.sin(n),o=Math.cos(r),u=Math.sin(r),s=i*Math.cos(t),l=i*Math.sin(t),c=o*Math.cos(e),f=o*Math.sin(e),h=2*Math.asin(Math.sqrt(jt(r-n)+i*o*jt(e-t))),d=1/Math.sin(h),p=h?function(t){var n=Math.sin(t*=h)*d,e=Math.sin(h-t)*d,r=e*s+n*c,i=e*l+n*f,o=e*a+n*u;return[Math.atan2(i,r)*Pt,Math.atan2(o,Math.sqrt(r*r+i*i))*Pt]}:function(){return[t*Pt,n*Pt]};return p.distance=h,p}(t[0]*zt,t[1]*zt,n[0]*zt,n[1]*zt)},a.geo.length=function(t){return wr=0,a.geo.stream(t,Vr),wr};var Vr={sphere:O,point:O,lineStart:function(){var t,n,e;function r(r,i){var a=Math.sin(i*=zt),o=Math.cos(i),u=M((r*=zt)-t),s=Math.cos(u);wr+=Math.atan2(Math.sqrt((u=o*Math.sin(u))*u+(u=e*a-n*o*s)*u),n*a+e*o*s),t=r,n=a,e=o}Vr.point=function(i,a){t=i*zt,n=Math.sin(a*=zt),e=Math.cos(a),Vr.point=r},Vr.lineEnd=function(){Vr.point=Vr.lineEnd=O}},lineEnd:O,polygonStart:O,polygonEnd:O};function Wr(t,n){function e(n,e){var r=Math.cos(n),i=Math.cos(e),a=t(r*i);return[a*i*Math.sin(n),a*Math.sin(e)]}return e.invert=function(t,e){var r=Math.sqrt(t*t+e*e),i=n(r),a=Math.sin(i),o=Math.cos(i);return[Math.atan2(t*a,r*o),Math.asin(r&&e*a/r)]},e}var Xr=Wr(function(t){return Math.sqrt(2/(1+t))},function(t){return 2*Math.asin(t/2)});(a.geo.azimuthalEqualArea=function(){return qr(Xr)}).raw=Xr;var $r=Wr(function(t){var n=Math.acos(t);return n&&n/Math.sin(n)},I);function Zr(t,n){var e=Math.cos(t),r=function(t){return Math.tan(Nt/4+t/2)},i=t===n?Math.sin(t):Math.log(e/Math.cos(n))/Math.log(r(n)/r(t)),a=e*Math.pow(r(t),i)/i;if(!i)return Gr;function o(t,n){a>0?n<-Tt+Lt&&(n=-Tt+Lt):n>Tt-Lt&&(n=Tt-Lt);var e=a/Math.pow(r(n),i);return[e*Math.sin(i*t),a-e*Math.cos(i*t)]}return o.invert=function(t,n){var e=a-n,r=It(i)*Math.sqrt(t*t+e*e);return[Math.atan2(t,e)/i,2*Math.atan(Math.pow(a/r,1/i))-Tt]},o}function Kr(t,n){var e=Math.cos(t),r=t===n?Math.sin(t):(e-Math.cos(n))/(n-t),i=e/r+t;if(M(r)<Lt)return zr;function a(t,n){var e=i-n;return[e*Math.sin(r*t),i-e*Math.cos(r*t)]}return a.invert=function(t,n){var e=i-n;return[Math.atan2(t,e)/r,i-It(r)*Math.sqrt(t*t+e*e)]},a}(a.geo.azimuthalEquidistant=function(){return qr($r)}).raw=$r,(a.geo.conicConformal=function(){return lr(Zr)}).raw=Zr,(a.geo.conicEquidistant=function(){return lr(Kr)}).raw=Kr;var Jr=Wr(function(t){return 1/t},Math.atan);function Gr(t,n){return[t,Math.log(Math.tan(Nt/4+n/2))]}function Qr(t){var n,e=qr(t),r=e.scale,i=e.translate,a=e.clipExtent;return e.scale=function(){var t=r.apply(e,arguments);return t===e?n?e.clipExtent(null):e:t},e.translate=function(){var t=i.apply(e,arguments);return t===e?n?e.clipExtent(null):e:t},e.clipExtent=function(t){var o=a.apply(e,arguments);if(o===e){if(n=null==t){var u=Nt*r(),s=i();a([[s[0]-u,s[1]-u],[s[0]+u,s[1]+u]])}}else n&&(o=null);return o},e.clipExtent(null)}(a.geo.gnomonic=function(){return qr(Jr)}).raw=Jr,Gr.invert=function(t,n){return[t,2*Math.atan(Math.exp(n))-Tt]},(a.geo.mercator=function(){return Qr(Gr)}).raw=Gr;var ti=Wr(function(){return 1},Math.asin);(a.geo.orthographic=function(){return qr(ti)}).raw=ti;var ni=Wr(function(t){return 1/(1+t)},function(t){return 2*Math.atan(t)});function ei(t,n){return[Math.log(Math.tan(Nt/4+n/2)),-t]}function ri(t){return t[0]}function ii(t){return t[1]}function ai(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;i++){for(;r>1&&Rt(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function oi(t,n){return t[0]-n[0]||t[1]-n[1]}(a.geo.stereographic=function(){return qr(ni)}).raw=ni,ei.invert=function(t,n){return[-n,2*Math.atan(Math.exp(t))-Tt]},(a.geo.transverseMercator=function(){var t=Qr(ei),n=t.center,e=t.rotate;return t.center=function(t){return t?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return t?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90])}).raw=ei,a.geom={},a.geom.hull=function(t){var n=ri,e=ii;if(arguments.length)return r(t);function r(t){if(t.length<3)return[];var r,i=wn(n),a=wn(e),o=t.length,u=[],s=[];for(r=0;r<o;r++)u.push([+i.call(this,t[r],r),+a.call(this,t[r],r),r]);for(u.sort(oi),r=0;r<o;r++)s.push([u[r][0],-u[r][1]]);var l=ai(u),c=ai(s),f=c[0]===l[0],h=c[c.length-1]===l[l.length-1],d=[];for(r=l.length-1;r>=0;--r)d.push(t[u[l[r]][2]]);for(r=+f;r<c.length-h;++r)d.push(t[u[c[r]][2]]);return d}return r.x=function(t){return arguments.length?(n=t,r):n},r.y=function(t){return arguments.length?(e=t,r):e},r},a.geom.polygon=function(t){return W(t,ui),t};var ui=a.geom.polygon.prototype=[];function si(t,n,e){return(e[0]-n[0])*(t[1]-n[1])<(e[1]-n[1])*(t[0]-n[0])}function li(t,n,e,r){var i=t[0],a=e[0],o=n[0]-i,u=r[0]-a,s=t[1],l=e[1],c=n[1]-s,f=r[1]-l,h=(u*(s-l)-f*(i-a))/(f*o-u*c);return[i+h*o,s+h*c]}function ci(t){var n=t[0],e=t[t.length-1];return!(n[0]-e[0]||n[1]-e[1])}ui.area=function(){for(var t,n=-1,e=this.length,r=this[e-1],i=0;++n<e;)t=r,r=this[n],i+=t[1]*r[0]-t[0]*r[1];return.5*i},ui.centroid=function(t){var n,e,r=-1,i=this.length,a=0,o=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)n=u,u=this[r],e=n[0]*u[1]-u[0]*n[1],a+=(n[0]+u[0])*e,o+=(n[1]+u[1])*e;return[a*t,o*t]},ui.clip=function(t){for(var n,e,r,i,a,o,u=ci(t),s=-1,l=this.length-ci(this),c=this[l-1];++s<l;){for(n=t.slice(),t.length=0,i=this[s],a=n[(r=n.length-u)-1],e=-1;++e<r;)si(o=n[e],c,i)?(si(a,c,i)||t.push(li(a,o,c,i)),t.push(o)):si(a,c,i)&&t.push(li(a,o,c,i)),a=o;u&&t.push(t[0]),c=i}return t};var fi,hi,di,pi,gi,vi=[],yi=[];function mi(t){var n=vi.pop()||new function(){Ii(this),this.edge=this.site=this.circle=null};return n.site=t,n}function bi(t){Li(t),di.remove(t),vi.push(t),Ii(t)}function xi(t){var n=t.circle,e=n.x,r=n.cy,i={x:e,y:r},a=t.P,o=t.N,u=[t];bi(t);for(var s=a;s.circle&&M(e-s.circle.x)<Lt&&M(r-s.circle.cy)<Lt;)a=s.P,u.unshift(s),bi(s),s=a;u.unshift(s),Li(s);for(var l=o;l.circle&&M(e-l.circle.x)<Lt&&M(r-l.circle.cy)<Lt;)o=l.N,u.push(l),bi(l),l=o;u.push(l),Li(l);var c,f=u.length;for(c=1;c<f;++c)l=u[c],s=u[c-1],Ti(l.edge,s.site,l.site,i);s=u[0],(l=u[f-1]).edge=qi(s.site,l.site,null,i),Ei(s),Ei(l)}function wi(t){for(var n,e,r,i,a=t.x,o=t.y,u=di._;u;)if((r=Mi(u,o)-a)>Lt)u=u.L;else{if(!((i=a-ki(u,o))>Lt)){r>-Lt?(n=u.P,e=u):i>-Lt?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}var s=mi(t);if(di.insert(n,s),n||e){if(n===e)return Li(n),e=mi(n.site),di.insert(s,e),s.edge=e.edge=qi(n.site,s.site),Ei(n),void Ei(e);if(e){Li(n),Li(e);var l=n.site,c=l.x,f=l.y,h=t.x-c,d=t.y-f,p=e.site,g=p.x-c,v=p.y-f,y=2*(h*v-d*g),m=h*h+d*d,b=g*g+v*v,x={x:(v*m-d*b)/y+c,y:(h*b-g*m)/y+f};Ti(e.edge,l,p,x),s.edge=qi(l,t,null,x),e.edge=qi(t,p,null,x),Ei(n),Ei(e)}else s.edge=qi(n.site,s.site)}}function Mi(t,n){var e=t.site,r=e.x,i=e.y,a=i-n;if(!a)return r;var o=t.P;if(!o)return-1/0;var u=(e=o.site).x,s=e.y,l=s-n;if(!l)return u;var c=u-r,f=1/a-1/l,h=c/l;return f?(-h+Math.sqrt(h*h-2*f*(c*c/(-2*l)-s+l/2+i-a/2)))/f+r:(r+u)/2}function ki(t,n){var e=t.N;if(e)return Mi(e,n);var r=t.site;return r.y===n?r.x:1/0}function Si(t){this.site=t,this.edges=[]}function Ai(t,n){return n.angle-t.angle}function Ei(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,a=e.site;if(r!==a){var o=i.x,u=i.y,s=r.x-o,l=r.y-u,c=a.x-o,f=2*(s*(v=a.y-u)-l*c);if(!(f>=-_t)){var h=s*s+l*l,d=c*c+v*v,p=(v*h-l*d)/f,g=(s*d-c*h)/f,v=g+u,y=yi.pop()||new function(){Ii(this),this.x=this.y=this.arc=this.site=this.cy=null};y.arc=t,y.site=i,y.x=p+o,y.y=v+Math.sqrt(p*p+g*g),y.cy=v,t.circle=y;for(var m=null,b=gi._;b;)if(y.y<b.y||y.y===b.y&&y.x<=b.x){if(!b.L){m=b.P;break}b=b.L}else{if(!b.R){m=b;break}b=b.R}gi.insert(m,y),m||(pi=y)}}}}function Li(t){var n=t.circle;n&&(n.P||(pi=n.N),gi.remove(n),yi.push(n),Ii(n),t.circle=null)}function _i(t,n){var e=t.b;if(e)return!0;var r,i,a=t.a,o=n[0][0],u=n[1][0],s=n[0][1],l=n[1][1],c=t.l,f=t.r,h=c.x,d=c.y,p=f.x,g=f.y,v=(h+p)/2,y=(d+g)/2;if(g===d){if(v<o||v>=u)return;if(h>p){if(a){if(a.y>=l)return}else a={x:v,y:s};e={x:v,y:l}}else{if(a){if(a.y<s)return}else a={x:v,y:l};e={x:v,y:s}}}else if(i=y-(r=(h-p)/(g-d))*v,r<-1||r>1)if(h>p){if(a){if(a.y>=l)return}else a={x:(s-i)/r,y:s};e={x:(l-i)/r,y:l}}else{if(a){if(a.y<s)return}else a={x:(l-i)/r,y:l};e={x:(s-i)/r,y:s}}else if(d<g){if(a){if(a.x>=u)return}else a={x:o,y:r*o+i};e={x:u,y:r*u+i}}else{if(a){if(a.x<o)return}else a={x:u,y:r*u+i};e={x:o,y:r*o+i}}return t.a=a,t.b=e,!0}function Ni(t,n){this.l=t,this.r=n,this.a=this.b=null}function qi(t,n,e,r){var i=new Ni(t,n);return fi.push(i),e&&Ti(i,t,n,e),r&&Ti(i,n,t,r),hi[t.i].edges.push(new zi(i,t,n)),hi[n.i].edges.push(new zi(i,n,t)),i}function Ci(t,n,e){var r=new Ni(t,null);return r.a=n,r.b=e,fi.push(r),r}function Ti(t,n,e,r){t.a||t.b?t.l===e?t.b=r:t.a=r:(t.a=r,t.l=n,t.r=e)}function zi(t,n,e){var r=t.a,i=t.b;this.edge=t,this.site=n,this.angle=e?Math.atan2(e.y-n.y,e.x-n.x):t.l===n?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function Pi(){this._=null}function Ii(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Ri(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Di(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Hi(t){for(;t.L;)t=t.L;return t}function Oi(t,n){var e,r,i,a=t.sort(ji).pop();for(fi=[],hi=new Array(t.length),di=new Pi,gi=new Pi;;)if(i=pi,a&&(!i||a.y<i.y||a.y===i.y&&a.x<i.x))a.x===e&&a.y===r||(hi[a.i]=new Si(a),wi(a),e=a.x,r=a.y),a=t.pop();else{if(!i)break;xi(i.arc)}n&&(function(t){for(var n,e=fi,r=or(t[0][0],t[0][1],t[1][0],t[1][1]),i=e.length;i--;)(!_i(n=e[i],t)||!r(n)||M(n.a.x-n.b.x)<Lt&&M(n.a.y-n.b.y)<Lt)&&(n.a=n.b=null,e.splice(i,1))}(n),function(t){for(var n,e,r,i,a,o,u,s,l,c,f=t[0][0],h=t[1][0],d=t[0][1],p=t[1][1],g=hi,v=g.length;v--;)if((a=g[v])&&a.prepare())for(s=(u=a.edges).length,o=0;o<s;)r=(c=u[o].end()).x,i=c.y,n=(l=u[++o%s].start()).x,e=l.y,(M(r-n)>Lt||M(i-e)>Lt)&&(u.splice(o,0,new zi(Ci(a.site,c,M(r-f)<Lt&&p-i>Lt?{x:f,y:M(n-f)<Lt?e:p}:M(i-p)<Lt&&h-r>Lt?{x:M(e-p)<Lt?n:h,y:p}:M(r-h)<Lt&&i-d>Lt?{x:h,y:M(n-h)<Lt?e:d}:M(i-d)<Lt&&r-f>Lt?{x:M(e-d)<Lt?n:f,y:d}:null),a.site,null)),++s)}(n));var o={cells:hi,edges:fi};return di=gi=fi=hi=null,o}function ji(t,n){return n.y-t.y||n.x-t.x}Si.prototype.prepare=function(){for(var t,n=this.edges,e=n.length;e--;)(t=n[e].edge).b&&t.a||n.splice(e,1);return n.sort(Ai),n.length},zi.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},Pi.prototype={insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Hi(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Ri(this,e),e=(t=e).U),e.C=!1,r.C=!0,Di(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Di(this,e),e=(t=e).U),e.C=!1,r.C=!0,Ri(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,a=t.L,o=t.R;if(e=a?o?Hi(o):a:o,i?i.L===t?i.L=e:i.R=e:this._=e,a&&o?(r=e.C,e.C=t.C,e.L=a,a.U=e,e!==o?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=o,o.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Ri(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Di(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Ri(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Di(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Ri(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Di(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},a.geom.voronoi=function(t){var n=ri,e=ii,r=n,i=e,a=Ui;if(t)return o(t);function o(t){var n=new Array(t.length),e=a[0][0],r=a[0][1],i=a[1][0],o=a[1][1];return Oi(u(t),a).cells.forEach(function(a,u){var s=a.edges,l=a.site;(n[u]=s.length?s.map(function(t){var n=t.start();return[n.x,n.y]}):l.x>=e&&l.x<=i&&l.y>=r&&l.y<=o?[[e,o],[i,o],[i,r],[e,r]]:[]).point=t[u]}),n}function u(t){return t.map(function(t,n){return{x:Math.round(r(t,n)/Lt)*Lt,y:Math.round(i(t,n)/Lt)*Lt,i:n}})}return o.links=function(t){return Oi(u(t)).edges.filter(function(t){return t.l&&t.r}).map(function(n){return{source:t[n.l.i],target:t[n.r.i]}})},o.triangles=function(t){var n=[];return Oi(u(t)).cells.forEach(function(e,r){for(var i,a=e.site,o=e.edges.sort(Ai),u=-1,s=o.length,l=o[s-1].edge,c=l.l===a?l.r:l.l;++u<s;)l,i=c,c=(l=o[u].edge).l===a?l.r:l.l,r<i.i&&r<c.i&&Fi(a,i,c)<0&&n.push([t[r],t[i.i],t[c.i]])}),n},o.x=function(t){return arguments.length?(r=wn(n=t),o):n},o.y=function(t){return arguments.length?(i=wn(e=t),o):e},o.clipExtent=function(t){return arguments.length?(a=null==t?Ui:t,o):a===Ui?null:a},o.size=function(t){return arguments.length?o.clipExtent(t&&[[0,0],t]):a===Ui?null:a&&a[1]},o};var Ui=[[-1e6,-1e6],[1e6,1e6]];function Fi(t,n,e){return(t.x-e.x)*(n.y-t.y)-(t.x-n.x)*(e.y-t.y)}function Bi(t){return t.x}function Yi(t){return t.y}function Vi(t,n){t=a.rgb(t),n=a.rgb(n);var e=t.r,r=t.g,i=t.b,o=n.r-e,u=n.g-r,s=n.b-i;return function(t){return"#"+pn(Math.round(e+o*t))+pn(Math.round(r+u*t))+pn(Math.round(i+s*t))}}function Wi(t,n){var e,r={},i={};for(e in t)e in n?r[e]=Ji(t[e],n[e]):i[e]=t[e];for(e in n)e in t||(i[e]=n[e]);return function(t){for(e in r)i[e]=r[e](t);return i}}function Xi(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function $i(t,n){var e,r,i,a=Zi.lastIndex=Ki.lastIndex=0,o=-1,u=[],s=[];for(t+="",n+="";(e=Zi.exec(t))&&(r=Ki.exec(n));)(i=r.index)>a&&(i=n.slice(a,i),u[o]?u[o]+=i:u[++o]=i),(e=e[0])===(r=r[0])?u[o]?u[o]+=r:u[++o]=r:(u[++o]=null,s.push({i:o,x:Xi(e,r)})),a=Ki.lastIndex;return a<n.length&&(i=n.slice(a),u[o]?u[o]+=i:u[++o]=i),u.length<2?s[0]?(n=s[0].x,function(t){return n(t)+""}):function(){return n}:(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})}a.geom.delaunay=function(t){return a.geom.voronoi().triangles(t)},a.geom.quadtree=function(t,n,e,r,i){var a,o=ri,u=ii;if(a=arguments.length)return o=Bi,u=Yi,3===a&&(i=e,r=n,e=n=0),s(t);function s(t){var s,l,c,f,h,d,p,g,v,y=wn(o),m=wn(u);if(null!=n)d=n,p=e,g=r,v=i;else if(g=v=-(d=p=1/0),l=[],c=[],h=t.length,a)for(f=0;f<h;++f)(s=t[f]).x<d&&(d=s.x),s.y<p&&(p=s.y),s.x>g&&(g=s.x),s.y>v&&(v=s.y),l.push(s.x),c.push(s.y);else for(f=0;f<h;++f){var b=+y(s=t[f],f),x=+m(s,f);b<d&&(d=b),x<p&&(p=x),b>g&&(g=b),x>v&&(v=x),l.push(b),c.push(x)}var w=g-d,k=v-p;function S(t,n,e,r,i,a,o,u){if(!isNaN(e)&&!isNaN(r))if(t.leaf){var s=t.x,l=t.y;if(null!=s)if(M(s-e)+M(l-r)<.01)A(t,n,e,r,i,a,o,u);else{var c=t.point;t.x=t.y=t.point=null,A(t,c,s,l,i,a,o,u),A(t,n,e,r,i,a,o,u)}else t.x=e,t.y=r,t.point=n}else A(t,n,e,r,i,a,o,u)}function A(t,n,e,r,i,a,o,u){var s=.5*(i+o),l=.5*(a+u),c=e>=s,f=r>=l,h=f<<1|c;t.leaf=!1,t=t.nodes[h]||(t.nodes[h]={leaf:!0,nodes:[],point:null,x:null,y:null,add:function(t){S(E,t,+y(t,++f),+m(t,f),d,p,g,v)}}),c?i=s:o=s,f?a=l:u=l,S(t,n,e,r,i,a,o,u)}w>k?v=p+w:g=d+k;var E={leaf:!0,nodes:[],point:null,x:null,y:null,add:function(t){S(E,t,+y(t,++f),+m(t,f),d,p,g,v)}};if(E.visit=function(t){!function t(n,e,r,i,a,o){if(!n(e,r,i,a,o)){var u=.5*(r+a),s=.5*(i+o),l=e.nodes;l[0]&&t(n,l[0],r,i,u,s),l[1]&&t(n,l[1],u,i,a,s),l[2]&&t(n,l[2],r,s,u,o),l[3]&&t(n,l[3],u,s,a,o)}}(t,E,d,p,g,v)},E.find=function(t){return function(t,n,e,r,i,a,o){var u,s=1/0;return function t(l,c,f,h,d){if(!(c>a||f>o||h<r||d<i)){if(p=l.point){var p,g=n-l.x,v=e-l.y,y=g*g+v*v;if(y<s){var m=Math.sqrt(s=y);r=n-m,i=e-m,a=n+m,o=e+m,u=p}}for(var b=l.nodes,x=.5*(c+h),w=.5*(f+d),M=(e>=w)<<1|n>=x,k=M+4;M<k;++M)if(l=b[3&M])switch(3&M){case 0:t(l,c,f,x,w);break;case 1:t(l,x,f,h,w);break;case 2:t(l,c,w,x,d);break;case 3:t(l,x,w,h,d)}}}(t,r,i,a,o),u}(E,t[0],t[1],d,p,g,v)},f=-1,null==n){for(;++f<h;)S(E,t[f],l[f],c[f],d,p,g,v);--f}else t.forEach(E.add);return l=c=t=s=null,E}return s.x=function(t){return arguments.length?(o=t,s):o},s.y=function(t){return arguments.length?(u=t,s):u},s.extent=function(t){return arguments.length?(null==t?n=e=r=i=null:(n=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),s):null==n?null:[[n,e],[r,i]]},s.size=function(t){return arguments.length?(null==t?n=e=r=i=null:(n=e=0,r=+t[0],i=+t[1]),s):null==n?null:[r-n,i-e]},s},a.interpolateRgb=Vi,a.interpolateObject=Wi,a.interpolateNumber=Xi,a.interpolateString=$i;var Zi=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Ki=new RegExp(Zi.source,"g");function Ji(t,n){for(var e,r=a.interpolators.length;--r>=0&&!(e=a.interpolators[r](t,n)););return e}function Gi(t,n){var e,r=[],i=[],a=t.length,o=n.length,u=Math.min(t.length,n.length);for(e=0;e<u;++e)r.push(Ji(t[e],n[e]));for(;e<a;++e)i[e]=t[e];for(;e<o;++e)i[e]=n[e];return function(t){for(e=0;e<u;++e)i[e]=r[e](t);return i}}a.interpolate=Ji,a.interpolators=[function(t,n){var e=typeof n;return("string"===e?xn.has(n.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(n)?Vi:$i:n instanceof Vt?Vi:Array.isArray(n)?Gi:"object"===e&&isNaN(n)?Wi:Xi)(t,n)}],a.interpolateArray=Gi;var Qi=function(){return I},ta=a.map({linear:Qi,poly:function(t){return function(n){return Math.pow(n,t)}},quad:function(){return ia},cubic:function(){return aa},sin:function(){return ua},exp:function(){return sa},circle:function(){return la},elastic:function(t,n){var e;arguments.length<2&&(n=.45);arguments.length?e=n/qt*Math.asin(1/t):(t=1,e=n/4);return function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-e)*qt/n)}},back:function(t){t||(t=1.70158);return function(n){return n*n*((t+1)*n-t)}},bounce:function(){return ca}}),na=a.map({in:I,out:ea,"in-out":ra,"out-in":function(t){return ra(ea(t))}});function ea(t){return function(n){return 1-t(1-n)}}function ra(t){return function(n){return.5*(n<.5?t(2*n):2-t(2-2*n))}}function ia(t){return t*t}function aa(t){return t*t*t}function oa(t){if(t<=0)return 0;if(t>=1)return 1;var n=t*t,e=n*t;return 4*(t<.5?e:3*(t-n)+e-.75)}function ua(t){return 1-Math.cos(t*Tt)}function sa(t){return Math.pow(2,10*(t-1))}function la(t){return 1-Math.sqrt(1-t*t)}function ca(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function fa(t,n){return n-=t,function(e){return Math.round(t+n*e)}}function ha(t){var n=[t.a,t.b],e=[t.c,t.d],r=pa(n),i=da(n,e),a=pa(function(t,n,e){return t[0]+=e*n[0],t[1]+=e*n[1],t}(e,n,-i))||0;n[0]*e[1]<e[0]*n[1]&&(n[0]*=-1,n[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(n[1],n[0]):Math.atan2(-e[0],e[1]))*Pt,this.translate=[t.e,t.f],this.scale=[r,a],this.skew=a?Math.atan2(i,a)*Pt:0}function da(t,n){return t[0]*n[0]+t[1]*n[1]}function pa(t){var n=Math.sqrt(da(t,t));return n&&(t[0]/=n,t[1]/=n),n}a.ease=function(t){var n=t.indexOf("-"),e=n>=0?t.slice(0,n):t,r=n>=0?t.slice(n+1):"in";return e=ta.get(e)||Qi,function(t){return function(n){return n<=0?0:n>=1?1:t(n)}}((r=na.get(r)||I)(e.apply(null,o.call(arguments,1))))},a.interpolateHcl=function(t,n){t=a.hcl(t),n=a.hcl(n);var e=t.h,r=t.c,i=t.l,o=n.h-e,u=n.c-r,s=n.l-i;isNaN(u)&&(u=0,r=isNaN(r)?n.c:r);isNaN(o)?(o=0,e=isNaN(e)?n.h:e):o>180?o-=360:o<-180&&(o+=360);return function(t){return Jt(e+o*t,r+u*t,i+s*t)+""}},a.interpolateHsl=function(t,n){t=a.hsl(t),n=a.hsl(n);var e=t.h,r=t.s,i=t.l,o=n.h-e,u=n.s-r,s=n.l-i;isNaN(u)&&(u=0,r=isNaN(r)?n.s:r);isNaN(o)?(o=0,e=isNaN(e)?n.h:e):o>180?o-=360:o<-180&&(o+=360);return function(t){return $t(e+o*t,r+u*t,i+s*t)+""}},a.interpolateLab=function(t,n){t=a.lab(t),n=a.lab(n);var e=t.l,r=t.a,i=t.b,o=n.l-e,u=n.a-r,s=n.b-i;return function(t){return an(e+o*t,r+u*t,i+s*t)+""}},a.interpolateRound=fa,a.transform=function(t){var n=s.createElementNS(a.ns.prefix.svg,"g");return(a.transform=function(t){if(null!=t){n.setAttribute("transform",t);var e=n.transform.baseVal.consolidate()}return new ha(e?e.matrix:ga)})(t)},ha.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var ga={a:1,b:0,c:0,d:1,e:0,f:0};function va(t){return t.length?t.pop()+",":""}function ya(t,n){var e=[],r=[];return t=a.transform(t),n=a.transform(n),function(t,n,e,r){if(t[0]!==n[0]||t[1]!==n[1]){var i=e.push("translate(",null,",",null,")");r.push({i:i-4,x:Xi(t[0],n[0])},{i:i-2,x:Xi(t[1],n[1])})}else(n[0]||n[1])&&e.push("translate("+n+")")}(t.translate,n.translate,e,r),function(t,n,e,r){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),r.push({i:e.push(va(e)+"rotate(",null,")")-2,x:Xi(t,n)})):n&&e.push(va(e)+"rotate("+n+")")}(t.rotate,n.rotate,e,r),function(t,n,e,r){t!==n?r.push({i:e.push(va(e)+"skewX(",null,")")-2,x:Xi(t,n)}):n&&e.push(va(e)+"skewX("+n+")")}(t.skew,n.skew,e,r),function(t,n,e,r){if(t[0]!==n[0]||t[1]!==n[1]){var i=e.push(va(e)+"scale(",null,",",null,")");r.push({i:i-4,x:Xi(t[0],n[0])},{i:i-2,x:Xi(t[1],n[1])})}else 1===n[0]&&1===n[1]||e.push(va(e)+"scale("+n+")")}(t.scale,n.scale,e,r),t=n=null,function(t){for(var n,i=-1,a=r.length;++i<a;)e[(n=r[i]).i]=n.x(t);return e.join("")}}function ma(t,n){return n=(n-=t=+t)||1/n,function(e){return(e-t)/n}}function ba(t,n){return n=(n-=t=+t)||1/n,function(e){return Math.max(0,Math.min(1,(e-t)/n))}}function xa(t){for(var n=t.source,e=t.target,r=function(t,n){if(t===n)return t;var e=wa(t),r=wa(n),i=e.pop(),a=r.pop(),o=null;for(;i===a;)o=i,i=e.pop(),a=r.pop();return o}(n,e),i=[n];n!==r;)n=n.parent,i.push(n);for(var a=i.length;e!==r;)i.splice(a,0,e),e=e.parent;return i}function wa(t){for(var n=[],e=t.parent;null!=e;)n.push(t),t=e,e=e.parent;return n.push(t),n}function Ma(t){t.fixed|=2}function ka(t){t.fixed&=-7}function Sa(t){t.fixed|=4,t.px=t.x,t.py=t.y}function Aa(t){t.fixed&=-5}a.interpolateTransform=ya,a.layout={},a.layout.bundle=function(){return function(t){for(var n=[],e=-1,r=t.length;++e<r;)n.push(xa(t[e]));return n}},a.layout.chord=function(){var t,n,e,r,i,o,u,s={},l=0;function c(){var s,c,h,d,p,g={},v=[],y=a.range(r),m=[];for(t=[],n=[],s=0,d=-1;++d<r;){for(c=0,p=-1;++p<r;)c+=e[d][p];v.push(c),m.push(a.range(r)),s+=c}for(i&&y.sort(function(t,n){return i(v[t],v[n])}),o&&m.forEach(function(t,n){t.sort(function(t,r){return o(e[n][t],e[n][r])})}),s=(qt-l*r)/s,c=0,d=-1;++d<r;){for(h=c,p=-1;++p<r;){var b=y[d],x=m[b][p],w=e[b][x],M=c,k=c+=w*s;g[b+"-"+x]={index:b,subindex:x,startAngle:M,endAngle:k,value:w}}n[b]={index:b,startAngle:h,endAngle:c,value:v[b]},c+=l}for(d=-1;++d<r;)for(p=d-1;++p<r;){var S=g[d+"-"+p],A=g[p+"-"+d];(S.value||A.value)&&t.push(S.value<A.value?{source:A,target:S}:{source:S,target:A})}u&&f()}function f(){t.sort(function(t,n){return u((t.source.value+t.target.value)/2,(n.source.value+n.target.value)/2)})}return s.matrix=function(i){return arguments.length?(r=(e=i)&&e.length,t=n=null,s):e},s.padding=function(e){return arguments.length?(l=e,t=n=null,s):l},s.sortGroups=function(e){return arguments.length?(i=e,t=n=null,s):i},s.sortSubgroups=function(n){return arguments.length?(o=n,t=null,s):o},s.sortChords=function(n){return arguments.length?(u=n,t&&f(),s):u},s.chords=function(){return t||c(),t},s.groups=function(){return n||c(),n},s},a.layout.force=function(){var t,n,e,r,i,o,u={},s=a.dispatch("start","tick","end"),l=[1,1],c=.9,f=Ea,h=La,d=-30,p=_a,g=.1,v=.64,y=[],m=[];function b(t){return function(n,e,r,i){if(n.point!==t){var a=n.cx-t.x,o=n.cy-t.y,u=i-e,s=a*a+o*o;if(u*u/v<s){if(s<p){var l=n.charge/s;t.px-=a*l,t.py-=o*l}return!0}if(n.point&&s&&s<p){l=n.pointCharge/s;t.px-=a*l,t.py-=o*l}}return!n.charge}}function x(t){t.px=a.event.x,t.py=a.event.y,u.resume()}return u.tick=function(){if((e*=.99)<.005)return t=null,s.end({type:"end",alpha:e=0}),!0;var n,u,f,h,p,v,x,w,M,k=y.length,S=m.length;for(u=0;u<S;++u)h=(f=m[u]).source,(v=(w=(p=f.target).x-h.x)*w+(M=p.y-h.y)*M)&&(w*=v=e*i[u]*((v=Math.sqrt(v))-r[u])/v,M*=v,p.x-=w*(x=h.weight+p.weight?h.weight/(h.weight+p.weight):.5),p.y-=M*x,h.x+=w*(x=1-x),h.y+=M*x);if((x=e*g)&&(w=l[0]/2,M=l[1]/2,u=-1,x))for(;++u<k;)(f=y[u]).x+=(w-f.x)*x,f.y+=(M-f.y)*x;if(d)for(!function t(n,e,r){var i=0,a=0;n.charge=0;if(!n.leaf)for(var o,u=n.nodes,s=u.length,l=-1;++l<s;)null!=(o=u[l])&&(t(o,e,r),n.charge+=o.charge,i+=o.charge*o.cx,a+=o.charge*o.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var c=e*r[n.point.index];n.charge+=n.pointCharge=c,i+=c*n.point.x,a+=c*n.point.y}n.cx=i/n.charge;n.cy=a/n.charge}(n=a.geom.quadtree(y),e,o),u=-1;++u<k;)(f=y[u]).fixed||n.visit(b(f));for(u=-1;++u<k;)(f=y[u]).fixed?(f.x=f.px,f.y=f.py):(f.x-=(f.px-(f.px=f.x))*c,f.y-=(f.py-(f.py=f.y))*c);s.tick({type:"tick",alpha:e})},u.nodes=function(t){return arguments.length?(y=t,u):y},u.links=function(t){return arguments.length?(m=t,u):m},u.size=function(t){return arguments.length?(l=t,u):l},u.linkDistance=function(t){return arguments.length?(f="function"==typeof t?t:+t,u):f},u.distance=u.linkDistance,u.linkStrength=function(t){return arguments.length?(h="function"==typeof t?t:+t,u):h},u.friction=function(t){return arguments.length?(c=+t,u):c},u.charge=function(t){return arguments.length?(d="function"==typeof t?t:+t,u):d},u.chargeDistance=function(t){return arguments.length?(p=t*t,u):Math.sqrt(p)},u.gravity=function(t){return arguments.length?(g=+t,u):g},u.theta=function(t){return arguments.length?(v=t*t,u):Math.sqrt(v)},u.alpha=function(n){return arguments.length?(n=+n,e?n>0?e=n:(t.c=null,t.t=NaN,t=null,s.end({type:"end",alpha:e=0})):n>0&&(s.start({type:"start",alpha:e=n}),t=Nn(u.tick)),u):e},u.start=function(){var t,n,e,a=y.length,s=m.length,c=l[0],p=l[1];for(t=0;t<a;++t)(e=y[t]).index=t,e.weight=0;for(t=0;t<s;++t)"number"==typeof(e=m[t]).source&&(e.source=y[e.source]),"number"==typeof e.target&&(e.target=y[e.target]),++e.source.weight,++e.target.weight;for(t=0;t<a;++t)e=y[t],isNaN(e.x)&&(e.x=g("x",c)),isNaN(e.y)&&(e.y=g("y",p)),isNaN(e.px)&&(e.px=e.x),isNaN(e.py)&&(e.py=e.y);if(r=[],"function"==typeof f)for(t=0;t<s;++t)r[t]=+f.call(this,m[t],t);else for(t=0;t<s;++t)r[t]=f;if(i=[],"function"==typeof h)for(t=0;t<s;++t)i[t]=+h.call(this,m[t],t);else for(t=0;t<s;++t)i[t]=h;if(o=[],"function"==typeof d)for(t=0;t<a;++t)o[t]=+d.call(this,y[t],t);else for(t=0;t<a;++t)o[t]=d;function g(e,r){if(!n){for(n=new Array(a),l=0;l<a;++l)n[l]=[];for(l=0;l<s;++l){var i=m[l];n[i.source.index].push(i.target),n[i.target.index].push(i.source)}}for(var o,u=n[t],l=-1,c=u.length;++l<c;)if(!isNaN(o=u[l][e]))return o;return Math.random()*r}return u.resume()},u.resume=function(){return u.alpha(.1)},u.stop=function(){return u.alpha(0)},u.drag=function(){if(n||(n=a.behavior.drag().origin(I).on("dragstart.force",Ma).on("drag.force",x).on("dragend.force",ka)),!arguments.length)return n;this.on("mouseover.force",Sa).on("mouseout.force",Aa).call(n)},a.rebind(u,s,"on")};var Ea=20,La=1,_a=1/0;function Na(t,n){return a.rebind(t,n,"sort","children","value"),t.nodes=t,t.links=Ia,t}function qa(t,n){for(var e=[t];null!=(t=e.pop());)if(n(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)e.push(i[r])}function Ca(t,n){for(var e=[t],r=[];null!=(t=e.pop());)if(r.push(t),(a=t.children)&&(i=a.length))for(var i,a,o=-1;++o<i;)e.push(a[o]);for(;null!=(t=r.pop());)n(t)}function Ta(t){return t.children}function za(t){return t.value}function Pa(t,n){return n.value-t.value}function Ia(t){return a.merge(t.map(function(t){return(t.children||[]).map(function(n){return{source:t,target:n}})}))}a.layout.hierarchy=function(){var t=Pa,n=Ta,e=za;function r(i){var a,o=[i],u=[];for(i.depth=0;null!=(a=o.pop());)if(u.push(a),(l=n.call(r,a,a.depth))&&(s=l.length)){for(var s,l,c;--s>=0;)o.push(c=l[s]),c.parent=a,c.depth=a.depth+1;e&&(a.value=0),a.children=l}else e&&(a.value=+e.call(r,a,a.depth)||0),delete a.children;return Ca(i,function(n){var r,i;t&&(r=n.children)&&r.sort(t),e&&(i=n.parent)&&(i.value+=n.value)}),u}return r.sort=function(n){return arguments.length?(t=n,r):t},r.children=function(t){return arguments.length?(n=t,r):n},r.value=function(t){return arguments.length?(e=t,r):e},r.revalue=function(t){return e&&(qa(t,function(t){t.children&&(t.value=0)}),Ca(t,function(t){var n;t.children||(t.value=+e.call(r,t,t.depth)||0),(n=t.parent)&&(n.value+=t.value)})),t},r},a.layout.partition=function(){var t=a.layout.hierarchy(),n=[1,1];function e(e,r){var i=t.call(this,e,r);return function t(n,e,r,i){var a=n.children;if(n.x=e,n.y=n.depth*i,n.dx=r,n.dy=i,a&&(o=a.length)){var o,u,s,l=-1;for(r=n.value?r/n.value:0;++l<o;)t(u=a[l],e,s=u.value*r,i),e+=s}}(i[0],0,n[0],n[1]/function t(n){var e=n.children,r=0;if(e&&(i=e.length))for(var i,a=-1;++a<i;)r=Math.max(r,t(e[a]));return 1+r}(i[0])),i}return e.size=function(t){return arguments.length?(n=t,e):n},Na(e,t)},a.layout.pie=function(){var t=Number,n=Ra,e=0,r=qt,i=0;function o(u){var s,l=u.length,c=u.map(function(n,e){return+t.call(o,n,e)}),f=+("function"==typeof e?e.apply(this,arguments):e),h=("function"==typeof r?r.apply(this,arguments):r)-f,d=Math.min(Math.abs(h)/l,+("function"==typeof i?i.apply(this,arguments):i)),p=d*(h<0?-1:1),g=a.sum(c),v=g?(h-l*p)/g:0,y=a.range(l),m=[];return null!=n&&y.sort(n===Ra?function(t,n){return c[n]-c[t]}:function(t,e){return n(u[t],u[e])}),y.forEach(function(t){m[t]={data:u[t],value:s=c[t],startAngle:f,endAngle:f+=s*v+p,padAngle:d}}),m}return o.value=function(n){return arguments.length?(t=n,o):t},o.sort=function(t){return arguments.length?(n=t,o):n},o.startAngle=function(t){return arguments.length?(e=t,o):e},o.endAngle=function(t){return arguments.length?(r=t,o):r},o.padAngle=function(t){return arguments.length?(i=t,o):i},o};var Ra={};function Da(t){return t.x}function Ha(t){return t.y}function Oa(t,n,e){t.y0=n,t.y=e}a.layout.stack=function(){var t=I,n=Fa,e=Ba,r=Oa,i=Da,o=Ha;function u(s,l){if(!(d=s.length))return s;var c=s.map(function(n,e){return t.call(u,n,e)}),f=c.map(function(t){return t.map(function(t,n){return[i.call(u,t,n),o.call(u,t,n)]})}),h=n.call(u,f,l);c=a.permute(c,h),f=a.permute(f,h);var d,p,g,v,y=e.call(u,f,l),m=c[0].length;for(g=0;g<m;++g)for(r.call(u,c[0][g],v=y[g],f[0][g][1]),p=1;p<d;++p)r.call(u,c[p][g],v+=f[p-1][g][1],f[p][g][1]);return s}return u.values=function(n){return arguments.length?(t=n,u):t},u.order=function(t){return arguments.length?(n="function"==typeof t?t:ja.get(t)||Fa,u):n},u.offset=function(t){return arguments.length?(e="function"==typeof t?t:Ua.get(t)||Ba,u):e},u.x=function(t){return arguments.length?(i=t,u):i},u.y=function(t){return arguments.length?(o=t,u):o},u.out=function(t){return arguments.length?(r=t,u):r},u};var ja=a.map({"inside-out":function(t){var n,e,r=t.length,i=t.map(Ya),o=t.map(Va),u=a.range(r).sort(function(t,n){return i[t]-i[n]}),s=0,l=0,c=[],f=[];for(n=0;n<r;++n)e=u[n],s<l?(s+=o[e],c.push(e)):(l+=o[e],f.push(e));return f.reverse().concat(c)},reverse:function(t){return a.range(t.length).reverse()},default:Fa}),Ua=a.map({silhouette:function(t){var n,e,r,i=t.length,a=t[0].length,o=[],u=0,s=[];for(e=0;e<a;++e){for(n=0,r=0;n<i;n++)r+=t[n][e][1];r>u&&(u=r),o.push(r)}for(e=0;e<a;++e)s[e]=(u-o[e])/2;return s},wiggle:function(t){var n,e,r,i,a,o,u,s,l,c=t.length,f=t[0],h=f.length,d=[];for(d[0]=s=l=0,e=1;e<h;++e){for(n=0,i=0;n<c;++n)i+=t[n][e][1];for(n=0,a=0,u=f[e][0]-f[e-1][0];n<c;++n){for(r=0,o=(t[n][e][1]-t[n][e-1][1])/(2*u);r<n;++r)o+=(t[r][e][1]-t[r][e-1][1])/u;a+=o*t[n][e][1]}d[e]=s-=i?a/i*u:0,s<l&&(l=s)}for(e=0;e<h;++e)d[e]-=l;return d},expand:function(t){var n,e,r,i=t.length,a=t[0].length,o=1/i,u=[];for(e=0;e<a;++e){for(n=0,r=0;n<i;n++)r+=t[n][e][1];if(r)for(n=0;n<i;n++)t[n][e][1]/=r;else for(n=0;n<i;n++)t[n][e][1]=o}for(e=0;e<a;++e)u[e]=0;return u},zero:Ba});function Fa(t){return a.range(t.length)}function Ba(t){for(var n=-1,e=t[0].length,r=[];++n<e;)r[n]=0;return r}function Ya(t){for(var n,e=1,r=0,i=t[0][1],a=t.length;e<a;++e)(n=t[e][1])>i&&(r=e,i=n);return r}function Va(t){return t.reduce(Wa,0)}function Wa(t,n){return t+n[1]}function Xa(t,n){return $a(t,Math.ceil(Math.log(n.length)/Math.LN2+1))}function $a(t,n){for(var e=-1,r=+t[0],i=(t[1]-r)/n,a=[];++e<=n;)a[e]=i*e+r;return a}function Za(t){return[a.min(t),a.max(t)]}function Ka(t,n){return t.value-n.value}function Ja(t,n){var e=t._pack_next;t._pack_next=n,n._pack_prev=t,n._pack_next=e,e._pack_prev=n}function Ga(t,n){t._pack_next=n,n._pack_prev=t}function Qa(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return.999*i*i>e*e+r*r}function to(t){if((n=t.children)&&(s=n.length)){var n,e,r,i,a,o,u,s,l=1/0,c=-1/0,f=1/0,h=-1/0;if(n.forEach(no),(e=n[0]).x=-e.r,e.y=0,b(e),s>1&&((r=n[1]).x=r.r,r.y=0,b(r),s>2))for(ro(e,r,i=n[2]),b(i),Ja(e,i),e._pack_prev=i,Ja(i,r),r=e._pack_next,a=3;a<s;a++){ro(e,r,i=n[a]);var d=0,p=1,g=1;for(o=r._pack_next;o!==r;o=o._pack_next,p++)if(Qa(o,i)){d=1;break}if(1==d)for(u=e._pack_prev;u!==o._pack_prev&&!Qa(u,i);u=u._pack_prev,g++);d?(p<g||p==g&&r.r<e.r?Ga(e,r=o):Ga(e=u,r),a--):(Ja(e,i),r=i,b(i))}var v=(l+c)/2,y=(f+h)/2,m=0;for(a=0;a<s;a++)(i=n[a]).x-=v,i.y-=y,m=Math.max(m,i.r+Math.sqrt(i.x*i.x+i.y*i.y));t.r=m,n.forEach(eo)}function b(t){l=Math.min(t.x-t.r,l),c=Math.max(t.x+t.r,c),f=Math.min(t.y-t.r,f),h=Math.max(t.y+t.r,h)}}function no(t){t._pack_next=t._pack_prev=t}function eo(t){delete t._pack_next,delete t._pack_prev}function ro(t,n,e){var r=t.r+e.r,i=n.x-t.x,a=n.y-t.y;if(r&&(i||a)){var o=n.r+e.r,u=i*i+a*a,s=.5+((r*=r)-(o*=o))/(2*u),l=Math.sqrt(Math.max(0,2*o*(r+u)-(r-=u)*r-o*o))/(2*u);e.x=t.x+s*i+l*a,e.y=t.y+s*a-l*i}else e.x=t.x+r,e.y=t.y}function io(t,n){return t.parent==n.parent?1:2}function ao(t){var n=t.children;return n.length?n[0]:t.t}function oo(t){var n,e=t.children;return(n=e.length)?e[n-1]:t.t}function uo(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function so(t,n,e){return t.a.parent===n.parent?t.a:e}function lo(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function co(t,n){var e=t.x+n[3],r=t.y+n[0],i=t.dx-n[1]-n[3],a=t.dy-n[0]-n[2];return i<0&&(e+=i/2,i=0),a<0&&(r+=a/2,a=0),{x:e,y:r,dx:i,dy:a}}function fo(t){var n=t[0],e=t[t.length-1];return n<e?[n,e]:[e,n]}function ho(t){return t.rangeExtent?t.rangeExtent():fo(t.range())}function po(t,n,e,r){var i=e(t[0],t[1]),a=r(n[0],n[1]);return function(t){return a(i(t))}}function go(t,n){var e,r=0,i=t.length-1,a=t[r],o=t[i];return o<a&&(e=r,r=i,i=e,e=a,a=o,o=e),t[r]=n.floor(a),t[i]=n.ceil(o),t}function vo(t){return t?{floor:function(n){return Math.floor(n/t)*t},ceil:function(n){return Math.ceil(n/t)*t}}:yo}a.layout.histogram=function(){var t=!0,n=Number,e=Za,r=Xa;function i(i,o){for(var u,s,l=[],c=i.map(n,this),f=e.call(this,c,o),h=r.call(this,f,c,o),d=(o=-1,c.length),p=h.length-1,g=t?1:1/d;++o<p;)(u=l[o]=[]).dx=h[o+1]-(u.x=h[o]),u.y=0;if(p>0)for(o=-1;++o<d;)(s=c[o])>=f[0]&&s<=f[1]&&((u=l[a.bisect(h,s,1,p)-1]).y+=g,u.push(i[o]));return l}return i.value=function(t){return arguments.length?(n=t,i):n},i.range=function(t){return arguments.length?(e=wn(t),i):e},i.bins=function(t){return arguments.length?(r="number"==typeof t?function(n){return $a(n,t)}:wn(t),i):r},i.frequency=function(n){return arguments.length?(t=!!n,i):t},i},a.layout.pack=function(){var t,n=a.layout.hierarchy().sort(Ka),e=0,r=[1,1];function i(i,a){var o=n.call(this,i,a),u=o[0],s=r[0],l=r[1],c=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(u.x=u.y=0,Ca(u,function(t){t.r=+c(t.value)}),Ca(u,to),e){var f=e*(t?1:Math.max(2*u.r/s,2*u.r/l))/2;Ca(u,function(t){t.r+=f}),Ca(u,to),Ca(u,function(t){t.r-=f})}return function t(n,e,r,i){var a=n.children;n.x=e+=i*n.x;n.y=r+=i*n.y;n.r*=i;if(a)for(var o=-1,u=a.length;++o<u;)t(a[o],e,r,i)}(u,s/2,l/2,t?1:1/Math.max(2*u.r/s,2*u.r/l)),o}return i.size=function(t){return arguments.length?(r=t,i):r},i.radius=function(n){return arguments.length?(t=null==n||"function"==typeof n?n:+n,i):t},i.padding=function(t){return arguments.length?(e=+t,i):e},Na(i,n)},a.layout.tree=function(){var t=a.layout.hierarchy().sort(null).value(null),n=io,e=[1,1],r=null;function i(i,a){var l=t.call(this,i,a),c=l[0],f=function(t){var n,e={A:null,children:[t]},r=[e];for(;null!=(n=r.pop());)for(var i,a=n.children,o=0,u=a.length;o<u;++o)r.push((a[o]=i={_:a[o],parent:n,children:(i=a[o].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:o}).a=i);return e.children[0]}(c);if(Ca(f,o),f.parent.m=-f.z,qa(f,u),r)qa(c,s);else{var h=c,d=c,p=c;qa(c,function(t){t.x<h.x&&(h=t),t.x>d.x&&(d=t),t.depth>p.depth&&(p=t)});var g=n(h,d)/2-h.x,v=e[0]/(d.x+n(d,h)/2+g),y=e[1]/(p.depth||1);qa(c,function(t){t.x=(t.x+g)*v,t.y=t.depth*y})}return l}function o(t){var e=t.children,r=t.parent.children,i=t.i?r[t.i-1]:null;if(e.length){!function(t){var n,e=0,r=0,i=t.children,a=i.length;for(;--a>=0;)(n=i[a]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(t);var a=(e[0].z+e[e.length-1].z)/2;i?(t.z=i.z+n(t._,i._),t.m=t.z-a):t.z=a}else i&&(t.z=i.z+n(t._,i._));t.parent.A=function(t,e,r){if(e){for(var i,a=t,o=t,u=e,s=a.parent.children[0],l=a.m,c=o.m,f=u.m,h=s.m;u=oo(u),a=ao(a),u&&a;)s=ao(s),(o=oo(o)).a=t,(i=u.z+f-a.z-l+n(u._,a._))>0&&(uo(so(u,t,r),t,i),l+=i,c+=i),f+=u.m,l+=a.m,h+=s.m,c+=o.m;u&&!oo(o)&&(o.t=u,o.m+=f-c),a&&!ao(s)&&(s.t=a,s.m+=l-h,r=t)}return r}(t,i,t.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function s(t){t.x*=e[0],t.y=t.depth*e[1]}return i.separation=function(t){return arguments.length?(n=t,i):n},i.size=function(t){return arguments.length?(r=null==(e=t)?s:null,i):r?null:e},i.nodeSize=function(t){return arguments.length?(r=null==(e=t)?null:s,i):r?e:null},Na(i,t)},a.layout.cluster=function(){var t=a.layout.hierarchy().sort(null).value(null),n=io,e=[1,1],r=!1;function i(i,o){var u,s=t.call(this,i,o),l=s[0],c=0;Ca(l,function(t){var e=t.children;e&&e.length?(t.x=function(t){return t.reduce(function(t,n){return t+n.x},0)/t.length}(e),t.y=function(t){return 1+a.max(t,function(t){return t.y})}(e)):(t.x=u?c+=n(t,u):0,t.y=0,u=t)});var f=function t(n){var e=n.children;return e&&e.length?t(e[0]):n}(l),h=function t(n){var e,r=n.children;return r&&(e=r.length)?t(r[e-1]):n}(l),d=f.x-n(f,h)/2,p=h.x+n(h,f)/2;return Ca(l,r?function(t){t.x=(t.x-l.x)*e[0],t.y=(l.y-t.y)*e[1]}:function(t){t.x=(t.x-d)/(p-d)*e[0],t.y=(1-(l.y?t.y/l.y:1))*e[1]}),s}return i.separation=function(t){return arguments.length?(n=t,i):n},i.size=function(t){return arguments.length?(r=null==(e=t),i):r?null:e},i.nodeSize=function(t){return arguments.length?(r=null!=(e=t),i):r?e:null},Na(i,t)},a.layout.treemap=function(){var t,n=a.layout.hierarchy(),e=Math.round,r=[1,1],i=null,o=lo,u=!1,s="squarify",l=.5*(1+Math.sqrt(5));function c(t,n){for(var e,r,i=-1,a=t.length;++i<a;)r=(e=t[i]).value*(n<0?0:n),e.area=isNaN(r)||r<=0?0:r}function f(t){var n=t.children;if(n&&n.length){var e,r,i,a=o(t),u=[],l=n.slice(),h=1/0,g="slice"===s?a.dx:"dice"===s?a.dy:"slice-dice"===s?1&t.depth?a.dy:a.dx:Math.min(a.dx,a.dy);for(c(l,a.dx*a.dy/t.value),u.area=0;(i=l.length)>0;)u.push(e=l[i-1]),u.area+=e.area,"squarify"!==s||(r=d(u,g))<=h?(l.pop(),h=r):(u.area-=u.pop().area,p(u,g,a,!1),g=Math.min(a.dx,a.dy),u.length=u.area=0,h=1/0);u.length&&(p(u,g,a,!0),u.length=u.area=0),n.forEach(f)}}function h(t){var n=t.children;if(n&&n.length){var e,r=o(t),i=n.slice(),a=[];for(c(i,r.dx*r.dy/t.value),a.area=0;e=i.pop();)a.push(e),a.area+=e.area,null!=e.z&&(p(a,e.z?r.dx:r.dy,r,!i.length),a.length=a.area=0);n.forEach(h)}}function d(t,n){for(var e,r=t.area,i=0,a=1/0,o=-1,u=t.length;++o<u;)(e=t[o].area)&&(e<a&&(a=e),e>i&&(i=e));return n*=n,(r*=r)?Math.max(n*i*l/r,r/(n*a*l)):1/0}function p(t,n,r,i){var a,o=-1,u=t.length,s=r.x,l=r.y,c=n?e(t.area/n):0;if(n==r.dx){for((i||c>r.dy)&&(c=r.dy);++o<u;)(a=t[o]).x=s,a.y=l,a.dy=c,s+=a.dx=Math.min(r.x+r.dx-s,c?e(a.area/c):0);a.z=!0,a.dx+=r.x+r.dx-s,r.y+=c,r.dy-=c}else{for((i||c>r.dx)&&(c=r.dx);++o<u;)(a=t[o]).x=s,a.y=l,a.dx=c,l+=a.dy=Math.min(r.y+r.dy-l,c?e(a.area/c):0);a.z=!1,a.dy+=r.y+r.dy-l,r.x+=c,r.dx-=c}}function g(e){var i=t||n(e),a=i[0];return a.x=a.y=0,a.value?(a.dx=r[0],a.dy=r[1]):a.dx=a.dy=0,t&&n.revalue(a),c([a],a.dx*a.dy/a.value),(t?h:f)(a),u&&(t=i),i}return g.size=function(t){return arguments.length?(r=t,g):r},g.padding=function(t){if(!arguments.length)return i;function n(n){return co(n,t)}var e;return o=null==(i=t)?lo:"function"==(e=typeof t)?function(n){var e=t.call(g,n,n.depth);return null==e?lo(n):co(n,"number"==typeof e?[e,e,e,e]:e)}:"number"===e?(t=[t,t,t,t],n):n,g},g.round=function(t){return arguments.length?(e=t?Math.round:Number,g):e!=Number},g.sticky=function(n){return arguments.length?(u=n,t=null,g):u},g.ratio=function(t){return arguments.length?(l=t,g):l},g.mode=function(t){return arguments.length?(s=t+"",g):s},Na(g,n)},a.random={normal:function(t,n){var e=arguments.length;return e<2&&(n=1),e<1&&(t=0),function(){var e,r,i;do{i=(e=2*Math.random()-1)*e+(r=2*Math.random()-1)*r}while(!i||i>1);return t+n*e*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=a.random.normal.apply(a,arguments);return function(){return Math.exp(t())}},bates:function(t){var n=a.random.irwinHall(t);return function(){return n()/t}},irwinHall:function(t){return function(){for(var n=0,e=0;e<t;e++)n+=Math.random();return n}}},a.scale={};var yo={floor:I,ceil:I};function mo(t,n,e,r){var i=[],o=[],u=0,s=Math.min(t.length,n.length)-1;for(t[s]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<=s;)i.push(e(t[u-1],t[u])),o.push(r(n[u-1],n[u]));return function(n){var e=a.bisect(t,n,1,s)-1;return o[e](i[e](n))}}function bo(t,n){return a.rebind(t,n,"range","rangeRound","interpolate","clamp")}function xo(t,n){return go(t,vo(wo(t,n)[2])),go(t,vo(wo(t,n)[2])),t}function wo(t,n){null==n&&(n=10);var e=fo(t),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/n)/Math.LN10)),a=n/r*i;return a<=.15?i*=10:a<=.35?i*=5:a<=.75&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function Mo(t,n){return a.range.apply(a,wo(t,n))}function ko(t,n,e){var r=wo(t,n);if(e){var i=In.exec(e);if(i.shift(),"s"===i[8]){var o=a.formatPrefix(Math.max(M(r[0]),M(r[1])));return i[7]||(i[7]="."+Ao(o.scale(r[2]))),i[8]="f",e=a.format(i.join("")),function(t){return e(o.scale(t))+o.symbol}}i[7]||(i[7]="."+function(t,n){var e=Ao(n[2]);return t in So?Math.abs(e-Ao(Math.max(M(n[0]),M(n[1]))))+ +("e"!==t):e-2*("%"===t)}(i[8],r)),e=i.join("")}else e=",."+Ao(r[2])+"f";return a.format(e)}a.scale.linear=function(){return function t(n,e,r,i){var a,o;function u(){var t=Math.min(n.length,e.length)>2?mo:po,u=i?ba:ma;return a=t(n,e,u,r),o=t(e,n,u,Ji),s}function s(t){return a(t)}s.invert=function(t){return o(t)};s.domain=function(t){return arguments.length?(n=t.map(Number),u()):n};s.range=function(t){return arguments.length?(e=t,u()):e};s.rangeRound=function(t){return s.range(t).interpolate(fa)};s.clamp=function(t){return arguments.length?(i=t,u()):i};s.interpolate=function(t){return arguments.length?(r=t,u()):r};s.ticks=function(t){return Mo(n,t)};s.tickFormat=function(t,e){return ko(n,t,e)};s.nice=function(t){return xo(n,t),u()};s.copy=function(){return t(n,e,r,i)};return u()}([0,1],[0,1],Ji,!1)};var So={s:1,g:1,p:1,r:1,e:1};function Ao(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}a.scale.log=function(){return function t(n,e,r,i){function o(t){return(r?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function u(t){return r?Math.pow(e,t):-Math.pow(e,-t)}function s(t){return n(o(t))}s.invert=function(t){return u(n.invert(t))};s.domain=function(t){return arguments.length?(r=t[0]>=0,n.domain((i=t.map(Number)).map(o)),s):i};s.base=function(t){return arguments.length?(e=+t,n.domain(i.map(o)),s):e};s.nice=function(){var t=go(i.map(o),r?Math:Lo);return n.domain(t),i=t.map(u),s};s.ticks=function(){var t=fo(i),n=[],a=t[0],s=t[1],l=Math.floor(o(a)),c=Math.ceil(o(s)),f=e%1?2:e;if(isFinite(c-l)){if(r){for(;l<c;l++)for(var h=1;h<f;h++)n.push(u(l)*h);n.push(u(l))}else for(n.push(u(l));l++<c;)for(var h=f-1;h>0;h--)n.push(u(l)*h);for(l=0;n[l]<a;l++);for(c=n.length;n[c-1]>s;c--);n=n.slice(l,c)}return n};s.tickFormat=function(t,n){if(!arguments.length)return Eo;arguments.length<2?n=Eo:"function"!=typeof n&&(n=a.format(n));var r=Math.max(1,e*t/s.ticks().length);return function(t){var i=t/u(Math.round(o(t)));return i*e<e-.5&&(i*=e),i<=r?n(t):""}};s.copy=function(){return t(n.copy(),e,r,i)};return bo(s,n)}(a.scale.linear().domain([0,1]),10,!0,[1,10])};var Eo=a.format(".0e"),Lo={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};function _o(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}a.scale.pow=function(){return function t(n,e,r){var i=_o(e),a=_o(1/e);function o(t){return n(i(t))}o.invert=function(t){return a(n.invert(t))};o.domain=function(t){return arguments.length?(n.domain((r=t.map(Number)).map(i)),o):r};o.ticks=function(t){return Mo(r,t)};o.tickFormat=function(t,n){return ko(r,t,n)};o.nice=function(t){return o.domain(xo(r,t))};o.exponent=function(t){return arguments.length?(i=_o(e=t),a=_o(1/e),n.domain(r.map(i)),o):e};o.copy=function(){return t(n.copy(),e,r)};return bo(o,n)}(a.scale.linear(),1,[0,1])},a.scale.sqrt=function(){return a.scale.pow().exponent(.5)},a.scale.ordinal=function(){return function t(n,e){var r,i,o;function u(t){return i[((r.get(t)||("range"===e.t?r.set(t,n.push(t)):NaN))-1)%i.length]}function s(t,e){return a.range(n.length).map(function(n){return t+e*n})}u.domain=function(t){if(!arguments.length)return n;n=[],r=new S;for(var i,a=-1,o=t.length;++a<o;)r.has(i=t[a])||r.set(i,n.push(i));return u[e.t].apply(u,e.a)};u.range=function(t){return arguments.length?(i=t,o=0,e={t:"range",a:arguments},u):i};u.rangePoints=function(t,r){arguments.length<2&&(r=0);var a=t[0],l=t[1],c=n.length<2?(a=(a+l)/2,0):(l-a)/(n.length-1+r);return i=s(a+c*r/2,c),o=0,e={t:"rangePoints",a:arguments},u};u.rangeRoundPoints=function(t,r){arguments.length<2&&(r=0);var a=t[0],l=t[1],c=n.length<2?(a=l=Math.round((a+l)/2),0):(l-a)/(n.length-1+r)|0;return i=s(a+Math.round(c*r/2+(l-a-(n.length-1+r)*c)/2),c),o=0,e={t:"rangeRoundPoints",a:arguments},u};u.rangeBands=function(t,r,a){arguments.length<2&&(r=0),arguments.length<3&&(a=r);var l=t[1]<t[0],c=t[l-0],f=t[1-l],h=(f-c)/(n.length-r+2*a);return i=s(c+h*a,h),l&&i.reverse(),o=h*(1-r),e={t:"rangeBands",a:arguments},u};u.rangeRoundBands=function(t,r,a){arguments.length<2&&(r=0),arguments.length<3&&(a=r);var l=t[1]<t[0],c=t[l-0],f=t[1-l],h=Math.floor((f-c)/(n.length-r+2*a));return i=s(c+Math.round((f-c-(n.length-r)*h)/2),h),l&&i.reverse(),o=Math.round(h*(1-r)),e={t:"rangeRoundBands",a:arguments},u};u.rangeBand=function(){return o};u.rangeExtent=function(){return fo(e.a[0])};u.copy=function(){return t(n,e)};return u.domain(n)}([],{t:"range",a:[[]]})},a.scale.category10=function(){return a.scale.ordinal().range(No)},a.scale.category20=function(){return a.scale.ordinal().range(qo)},a.scale.category20b=function(){return a.scale.ordinal().range(Co)},a.scale.category20c=function(){return a.scale.ordinal().range(To)};var No=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(hn),qo=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(hn),Co=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(hn),To=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(hn);function zo(){return 0}a.scale.quantile=function(){return function t(n,e){var r;function i(){var t=0,i=e.length;for(r=[];++t<i;)r[t-1]=a.quantile(n,t/i);return o}function o(t){if(!isNaN(t=+t))return e[a.bisect(r,t)]}o.domain=function(t){return arguments.length?(n=t.map(y).filter(m).sort(v),i()):n};o.range=function(t){return arguments.length?(e=t,i()):e};o.quantiles=function(){return r};o.invertExtent=function(t){return(t=e.indexOf(t))<0?[NaN,NaN]:[t>0?r[t-1]:n[0],t<r.length?r[t]:n[n.length-1]]};o.copy=function(){return t(n,e)};return i()}([],[])},a.scale.quantize=function(){return function t(n,e,r){var i,a;function o(t){return r[Math.max(0,Math.min(a,Math.floor(i*(t-n))))]}function u(){return i=r.length/(e-n),a=r.length-1,o}o.domain=function(t){return arguments.length?(n=+t[0],e=+t[t.length-1],u()):[n,e]};o.range=function(t){return arguments.length?(r=t,u()):r};o.invertExtent=function(t){return[t=(t=r.indexOf(t))<0?NaN:t/i+n,t+1/i]};o.copy=function(){return t(n,e,r)};return u()}(0,1,[0,1])},a.scale.threshold=function(){return function t(n,e){function r(t){if(t<=t)return e[a.bisect(n,t)]}r.domain=function(t){return arguments.length?(n=t,r):n};r.range=function(t){return arguments.length?(e=t,r):e};r.invertExtent=function(t){return t=e.indexOf(t),[n[t-1],n[t]]};r.copy=function(){return t(n,e)};return r}([.5],[0,1])},a.scale.identity=function(){return function t(n){function e(t){return+t}e.invert=e;e.domain=e.range=function(t){return arguments.length?(n=t.map(e),e):n};e.ticks=function(t){return Mo(n,t)};e.tickFormat=function(t,e){return ko(n,t,e)};e.copy=function(){return t(n)};return e}([0,1])},a.svg={},a.svg.arc=function(){var t=Io,n=Ro,e=zo,r=Po,i=Do,a=Ho,o=Oo;function u(){var u=Math.max(0,+t.apply(this,arguments)),l=Math.max(0,+n.apply(this,arguments)),c=i.apply(this,arguments)-Tt,f=a.apply(this,arguments)-Tt,h=Math.abs(f-c),d=c>f?0:1;if(l<u&&(p=l,l=u,u=p),h>=Ct)return s(l,d)+(u?s(u,1-d):"")+"Z";var p,g,v,y,m,b,x,w,M,k,S,A,E=0,L=0,_=[];if((y=(+o.apply(this,arguments)||0)/2)&&(v=r===Po?Math.sqrt(u*u+l*l):+r.apply(this,arguments),d||(L*=-1),l&&(L=Ht(v/l*Math.sin(y))),u&&(E=Ht(v/u*Math.sin(y)))),l){m=l*Math.cos(c+L),b=l*Math.sin(c+L),x=l*Math.cos(f-L),w=l*Math.sin(f-L);var N=Math.abs(f-c-2*L)<=Nt?0:1;if(L&&jo(m,b,x,w)===d^N){var q=(c+f)/2;m=l*Math.cos(q),b=l*Math.sin(q),x=w=null}}else m=b=0;if(u){M=u*Math.cos(f-E),k=u*Math.sin(f-E),S=u*Math.cos(c+E),A=u*Math.sin(c+E);var C=Math.abs(c-f+2*E)<=Nt?0:1;if(E&&jo(M,k,S,A)===1-d^C){var T=(c+f)/2;M=u*Math.cos(T),k=u*Math.sin(T),S=A=null}}else M=k=0;if(h>Lt&&(p=Math.min(Math.abs(l-u)/2,+e.apply(this,arguments)))>.001){g=u<l^d?0:1;var z=p,P=p;if(h<Nt){var I=null==S?[M,k]:null==x?[m,b]:li([m,b],[S,A],[x,w],[M,k]),R=m-I[0],D=b-I[1],H=x-I[0],O=w-I[1],j=1/Math.sin(Math.acos((R*H+D*O)/(Math.sqrt(R*R+D*D)*Math.sqrt(H*H+O*O)))/2),U=Math.sqrt(I[0]*I[0]+I[1]*I[1]);P=Math.min(p,(u-U)/(j-1)),z=Math.min(p,(l-U)/(j+1))}if(null!=x){var F=Uo(null==S?[M,k]:[S,A],[m,b],l,z,d),B=Uo([x,w],[M,k],l,z,d);p===z?_.push("M",F[0],"A",z,",",z," 0 0,",g," ",F[1],"A",l,",",l," 0 ",1-d^jo(F[1][0],F[1][1],B[1][0],B[1][1]),",",d," ",B[1],"A",z,",",z," 0 0,",g," ",B[0]):_.push("M",F[0],"A",z,",",z," 0 1,",g," ",B[0])}else _.push("M",m,",",b);if(null!=S){var Y=Uo([m,b],[S,A],u,-P,d),V=Uo([M,k],null==x?[m,b]:[x,w],u,-P,d);p===P?_.push("L",V[0],"A",P,",",P," 0 0,",g," ",V[1],"A",u,",",u," 0 ",d^jo(V[1][0],V[1][1],Y[1][0],Y[1][1]),",",1-d," ",Y[1],"A",P,",",P," 0 0,",g," ",Y[0]):_.push("L",V[0],"A",P,",",P," 0 0,",g," ",Y[0])}else _.push("L",M,",",k)}else _.push("M",m,",",b),null!=x&&_.push("A",l,",",l," 0 ",N,",",d," ",x,",",w),_.push("L",M,",",k),null!=S&&_.push("A",u,",",u," 0 ",C,",",1-d," ",S,",",A);return _.push("Z"),_.join("")}function s(t,n){return"M0,"+t+"A"+t+","+t+" 0 1,"+n+" 0,"+-t+"A"+t+","+t+" 0 1,"+n+" 0,"+t}return u.innerRadius=function(n){return arguments.length?(t=wn(n),u):t},u.outerRadius=function(t){return arguments.length?(n=wn(t),u):n},u.cornerRadius=function(t){return arguments.length?(e=wn(t),u):e},u.padRadius=function(t){return arguments.length?(r=t==Po?Po:wn(t),u):r},u.startAngle=function(t){return arguments.length?(i=wn(t),u):i},u.endAngle=function(t){return arguments.length?(a=wn(t),u):a},u.padAngle=function(t){return arguments.length?(o=wn(t),u):o},u.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +a.apply(this,arguments))/2-Tt;return[Math.cos(r)*e,Math.sin(r)*e]},u};var Po="auto";function Io(t){return t.innerRadius}function Ro(t){return t.outerRadius}function Do(t){return t.startAngle}function Ho(t){return t.endAngle}function Oo(t){return t&&t.padAngle}function jo(t,n,e,r){return(t-e)*n-(n-r)*t>0?0:1}function Uo(t,n,e,r,i){var a=t[0]-n[0],o=t[1]-n[1],u=(i?r:-r)/Math.sqrt(a*a+o*o),s=u*o,l=-u*a,c=t[0]+s,f=t[1]+l,h=n[0]+s,d=n[1]+l,p=(c+h)/2,g=(f+d)/2,v=h-c,y=d-f,m=v*v+y*y,b=e-r,x=c*d-h*f,w=(y<0?-1:1)*Math.sqrt(Math.max(0,b*b*m-x*x)),M=(x*y-v*w)/m,k=(-x*v-y*w)/m,S=(x*y+v*w)/m,A=(-x*v+y*w)/m,E=M-p,L=k-g,_=S-p,N=A-g;return E*E+L*L>_*_+N*N&&(M=S,k=A),[[M-s,k-l],[M*e/b,k*e/b]]}function Fo(t){var n=ri,e=ii,r=Je,i=Yo,a=i.key,o=.7;function u(a){var u,s=[],l=[],c=-1,f=a.length,h=wn(n),d=wn(e);function p(){s.push("M",i(t(l),o))}for(;++c<f;)r.call(this,u=a[c],c)?l.push([+h.call(this,u,c),+d.call(this,u,c)]):l.length&&(p(),l=[]);return l.length&&p(),s.length?s.join(""):null}return u.x=function(t){return arguments.length?(n=t,u):n},u.y=function(t){return arguments.length?(e=t,u):e},u.defined=function(t){return arguments.length?(r=t,u):r},u.interpolate=function(t){return arguments.length?(a="function"==typeof t?i=t:(i=Bo.get(t)||Yo).key,u):a},u.tension=function(t){return arguments.length?(o=t,u):o},u}a.svg.line=function(){return Fo(I)};var Bo=a.map({linear:Yo,"linear-closed":Vo,step:function(t){var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];for(;++n<e;)i.push("H",(r[0]+(r=t[n])[0])/2,"V",r[1]);e>1&&i.push("H",r[0]);return i.join("")},"step-before":Wo,"step-after":Xo,basis:Ko,"basis-open":function(t){if(t.length<4)return Yo(t);var n,e=[],r=-1,i=t.length,a=[0],o=[0];for(;++r<3;)n=t[r],a.push(n[0]),o.push(n[1]);e.push(Jo(tu,a)+","+Jo(tu,o)),--r;for(;++r<i;)n=t[r],a.shift(),a.push(n[0]),o.shift(),o.push(n[1]),nu(e,a,o);return e.join("")},"basis-closed":function(t){var n,e,r=-1,i=t.length,a=i+4,o=[],u=[];for(;++r<4;)e=t[r%i],o.push(e[0]),u.push(e[1]);n=[Jo(tu,o),",",Jo(tu,u)],--r;for(;++r<a;)e=t[r%i],o.shift(),o.push(e[0]),u.shift(),u.push(e[1]),nu(n,o,u);return n.join("")},bundle:function(t,n){var e=t.length-1;if(e)for(var r,i,a=t[0][0],o=t[0][1],u=t[e][0]-a,s=t[e][1]-o,l=-1;++l<=e;)r=t[l],i=l/e,r[0]=n*r[0]+(1-n)*(a+i*u),r[1]=n*r[1]+(1-n)*(o+i*s);return Ko(t)},cardinal:function(t,n){return t.length<3?Yo(t):t[0]+$o(t,Zo(t,n))},"cardinal-open":function(t,n){return t.length<4?Yo(t):t[1]+$o(t.slice(1,-1),Zo(t,n))},"cardinal-closed":function(t,n){return t.length<3?Vo(t):t[0]+$o((t.push(t[0]),t),Zo([t[t.length-2]].concat(t,[t[1]]),n))},monotone:function(t){return t.length<3?Yo(t):t[0]+$o(t,function(t){var n,e,r,i,a=[],o=function(t){var n=0,e=t.length-1,r=[],i=t[0],a=t[1],o=r[0]=eu(i,a);for(;++n<e;)r[n]=(o+(o=eu(i=a,a=t[n+1])))/2;return r[n]=o,r}(t),u=-1,s=t.length-1;for(;++u<s;)n=eu(t[u],t[u+1]),M(n)<Lt?o[u]=o[u+1]=0:(e=o[u]/n,r=o[u+1]/n,(i=e*e+r*r)>9&&(i=3*n/Math.sqrt(i),o[u]=i*e,o[u+1]=i*r));u=-1;for(;++u<=s;)i=(t[Math.min(s,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+o[u]*o[u])),a.push([i||0,o[u]*i||0]);return a}(t))}});function Yo(t){return t.length>1?t.join("L"):t+"Z"}function Vo(t){return t.join("L")+"Z"}function Wo(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("V",(r=t[n])[1],"H",r[0]);return i.join("")}function Xo(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("H",(r=t[n])[0],"V",r[1]);return i.join("")}function $o(t,n){if(n.length<1||t.length!=n.length&&t.length!=n.length+2)return Yo(t);var e=t.length!=n.length,r="",i=t[0],a=t[1],o=n[0],u=o,s=1;if(e&&(r+="Q"+(a[0]-2*o[0]/3)+","+(a[1]-2*o[1]/3)+","+a[0]+","+a[1],i=t[1],s=2),n.length>1){u=n[1],a=t[s],s++,r+="C"+(i[0]+o[0])+","+(i[1]+o[1])+","+(a[0]-u[0])+","+(a[1]-u[1])+","+a[0]+","+a[1];for(var l=2;l<n.length;l++,s++)a=t[s],u=n[l],r+="S"+(a[0]-u[0])+","+(a[1]-u[1])+","+a[0]+","+a[1]}if(e){var c=t[s];r+="Q"+(a[0]+2*u[0]/3)+","+(a[1]+2*u[1]/3)+","+c[0]+","+c[1]}return r}function Zo(t,n){for(var e,r=[],i=(1-n)/2,a=t[0],o=t[1],u=1,s=t.length;++u<s;)e=a,a=o,o=t[u],r.push([i*(o[0]-e[0]),i*(o[1]-e[1])]);return r}function Ko(t){if(t.length<3)return Yo(t);var n=1,e=t.length,r=t[0],i=r[0],a=r[1],o=[i,i,i,(r=t[1])[0]],u=[a,a,a,r[1]],s=[i,",",a,"L",Jo(tu,o),",",Jo(tu,u)];for(t.push(t[e-1]);++n<=e;)r=t[n],o.shift(),o.push(r[0]),u.shift(),u.push(r[1]),nu(s,o,u);return t.pop(),s.push("L",r),s.join("")}function Jo(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}Bo.forEach(function(t,n){n.key=t,n.closed=/-closed$/.test(t)});var Go=[0,2/3,1/3,0],Qo=[0,1/3,2/3,0],tu=[0,1/6,2/3,1/6];function nu(t,n,e){t.push("C",Jo(Go,n),",",Jo(Go,e),",",Jo(Qo,n),",",Jo(Qo,e),",",Jo(tu,n),",",Jo(tu,e))}function eu(t,n){return(n[1]-t[1])/(n[0]-t[0])}function ru(t){for(var n,e,r,i=-1,a=t.length;++i<a;)e=(n=t[i])[0],r=n[1]-Tt,n[0]=e*Math.cos(r),n[1]=e*Math.sin(r);return t}function iu(t){var n=ri,e=ri,r=0,i=ii,a=Je,o=Yo,u=o.key,s=o,l="L",c=.7;function f(u){var f,h,d,p=[],g=[],v=[],y=-1,m=u.length,b=wn(n),x=wn(r),w=n===e?function(){return h}:wn(e),M=r===i?function(){return d}:wn(i);function k(){p.push("M",o(t(v),c),l,s(t(g.reverse()),c),"Z")}for(;++y<m;)a.call(this,f=u[y],y)?(g.push([h=+b.call(this,f,y),d=+x.call(this,f,y)]),v.push([+w.call(this,f,y),+M.call(this,f,y)])):g.length&&(k(),g=[],v=[]);return g.length&&k(),p.length?p.join(""):null}return f.x=function(t){return arguments.length?(n=e=t,f):e},f.x0=function(t){return arguments.length?(n=t,f):n},f.x1=function(t){return arguments.length?(e=t,f):e},f.y=function(t){return arguments.length?(r=i=t,f):i},f.y0=function(t){return arguments.length?(r=t,f):r},f.y1=function(t){return arguments.length?(i=t,f):i},f.defined=function(t){return arguments.length?(a=t,f):a},f.interpolate=function(t){return arguments.length?(u="function"==typeof t?o=t:(o=Bo.get(t)||Yo).key,s=o.reverse||o,l=o.closed?"M":"L",f):u},f.tension=function(t){return arguments.length?(c=t,f):c},f}function au(t){return t.radius}function ou(t){return[t.x,t.y]}function uu(){return 64}function su(){return"circle"}function lu(t){var n=Math.sqrt(t/Nt);return"M0,"+n+"A"+n+","+n+" 0 1,1 0,"+-n+"A"+n+","+n+" 0 1,1 0,"+n+"Z"}a.svg.line.radial=function(){var t=Fo(ru);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},Wo.reverse=Xo,Xo.reverse=Wo,a.svg.area=function(){return iu(I)},a.svg.area.radial=function(){var t=iu(ru);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},a.svg.chord=function(){var t=Br,n=Yr,e=au,r=Do,i=Ho;function a(e,r){var i=o(this,t,e,r),a=o(this,n,e,r);return"M"+i.p0+u(i.r,i.p1,i.a1-i.a0)+(function(t,n){return t.a0==n.a0&&t.a1==n.a1}(i,a)?s(i.r,i.p1,i.r,i.p0):s(i.r,i.p1,a.r,a.p0)+u(a.r,a.p1,a.a1-a.a0)+s(a.r,a.p1,i.r,i.p0))+"Z"}function o(t,n,a,o){var u=n.call(t,a,o),s=e.call(t,u,o),l=r.call(t,u,o)-Tt,c=i.call(t,u,o)-Tt;return{r:s,a0:l,a1:c,p0:[s*Math.cos(l),s*Math.sin(l)],p1:[s*Math.cos(c),s*Math.sin(c)]}}function u(t,n,e){return"A"+t+","+t+" 0 "+ +(e>Nt)+",1 "+n}function s(t,n,e,r){return"Q 0,0 "+r}return a.radius=function(t){return arguments.length?(e=wn(t),a):e},a.source=function(n){return arguments.length?(t=wn(n),a):t},a.target=function(t){return arguments.length?(n=wn(t),a):n},a.startAngle=function(t){return arguments.length?(r=wn(t),a):r},a.endAngle=function(t){return arguments.length?(i=wn(t),a):i},a},a.svg.diagonal=function(){var t=Br,n=Yr,e=ou;function r(r,i){var a=t.call(this,r,i),o=n.call(this,r,i),u=(a.y+o.y)/2,s=[a,{x:a.x,y:u},{x:o.x,y:u},o];return"M"+(s=s.map(e))[0]+"C"+s[1]+" "+s[2]+" "+s[3]}return r.source=function(n){return arguments.length?(t=wn(n),r):t},r.target=function(t){return arguments.length?(n=wn(t),r):n},r.projection=function(t){return arguments.length?(e=t,r):e},r},a.svg.diagonal.radial=function(){var t=a.svg.diagonal(),n=ou,e=t.projection;return t.projection=function(t){return arguments.length?e(function(t){return function(){var n=t.apply(this,arguments),e=n[0],r=n[1]-Tt;return[e*Math.cos(r),e*Math.sin(r)]}}(n=t)):n},t},a.svg.symbol=function(){var t=su,n=uu;function e(e,r){return(cu.get(t.call(this,e,r))||lu)(n.call(this,e,r))}return e.type=function(n){return arguments.length?(t=wn(n),e):t},e.size=function(t){return arguments.length?(n=wn(t),e):n},e};var cu=a.map({circle:lu,cross:function(t){var n=Math.sqrt(t/5)/2;return"M"+-3*n+","+-n+"H"+-n+"V"+-3*n+"H"+n+"V"+-n+"H"+3*n+"V"+n+"H"+n+"V"+3*n+"H"+-n+"V"+n+"H"+-3*n+"Z"},diamond:function(t){var n=Math.sqrt(t/(2*hu)),e=n*hu;return"M0,"+-n+"L"+e+",0 0,"+n+" "+-e+",0Z"},square:function(t){var n=Math.sqrt(t)/2;return"M"+-n+","+-n+"L"+n+","+-n+" "+n+","+n+" "+-n+","+n+"Z"},"triangle-down":function(t){var n=Math.sqrt(t/fu),e=n*fu/2;return"M0,"+e+"L"+n+","+-e+" "+-n+","+-e+"Z"},"triangle-up":function(t){var n=Math.sqrt(t/fu),e=n*fu/2;return"M0,"+-e+"L"+n+","+e+" "+-n+","+e+"Z"}});a.svg.symbolTypes=cu.keys();var fu=Math.sqrt(3),hu=Math.tan(30*zt);J.transition=function(t){for(var n,e,r=vu||++bu,i=Mu(t),a=[],o=yu||{time:Date.now(),ease:oa,delay:0,duration:250},u=-1,s=this.length;++u<s;){a.push(n=[]);for(var l=this[u],c=-1,f=l.length;++c<f;)(e=l[c])&&ku(e,c,i,r,o),n.push(e)}return gu(a,i,r)},J.interrupt=function(t){return this.each(null==t?du:pu(Mu(t)))};var du=pu(Mu());function pu(t){return function(){var n,e,r;(n=this[t])&&(r=n[e=n.active])&&(r.timer.c=null,r.timer.t=NaN,--n.count?delete n[e]:delete this[t],n.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function gu(t,n,e){return W(t,mu),t.namespace=n,t.id=e,t}var vu,yu,mu=[],bu=0;function xu(t,n,e,r){var i=t.id,a=t.namespace;return pt(t,"function"==typeof e?function(t,o,u){t[a][i].tween.set(n,r(e.call(t,t.__data__,o,u)))}:(e=r(e),function(t){t[a][i].tween.set(n,e)}))}function wu(t){return null==t&&(t=""),function(){this.textContent=t}}function Mu(t){return null==t?"__transition__":"__transition_"+t+"__"}function ku(t,n,e,r,i){var a,o,u,s,l,c=t[e]||(t[e]={active:0,count:0}),f=c[r];function h(e){var i=c.active,h=c[i];for(var p in h&&(h.timer.c=null,h.timer.t=NaN,--c.count,delete c[i],h.event&&h.event.interrupt.call(t,t.__data__,h.index)),c)if(+p<r){var g=c[p];g.timer.c=null,g.timer.t=NaN,--c.count,delete c[p]}o.c=d,Nn(function(){return o.c&&d(e||1)&&(o.c=null,o.t=NaN),1},0,a),c.active=r,f.event&&f.event.start.call(t,t.__data__,n),l=[],f.tween.forEach(function(e,r){(r=r.call(t,t.__data__,n))&&l.push(r)}),s=f.ease,u=f.duration}function d(i){for(var a=i/u,o=s(a),h=l.length;h>0;)l[--h].call(t,o);if(a>=1)return f.event&&f.event.end.call(t,t.__data__,n),--c.count?delete c[r]:delete t[e],1}f||(a=i.time,o=Nn(function(t){var n=f.delay;if(o.t=n+a,n<=t)return h(t-n);o.c=h},0,a),f=c[r]={tween:new S,time:a,timer:o,delay:i.delay,duration:i.duration,ease:i.ease,index:n},i=null,++c.count)}mu.call=J.call,mu.empty=J.empty,mu.node=J.node,mu.size=J.size,a.transition=function(t,n){return t&&t.transition?vu?t.transition(n):t:a.selection().transition(t)},a.transition.prototype=mu,mu.select=function(t){var n,e,r,i=this.id,a=this.namespace,o=[];t=G(t);for(var u=-1,s=this.length;++u<s;){o.push(n=[]);for(var l=this[u],c=-1,f=l.length;++c<f;)(r=l[c])&&(e=t.call(r,r.__data__,c,u))?("__data__"in r&&(e.__data__=r.__data__),ku(e,c,a,i,r[a][i]),n.push(e)):n.push(null)}return gu(o,a,i)},mu.selectAll=function(t){var n,e,r,i,a,o=this.id,u=this.namespace,s=[];t=Q(t);for(var l=-1,c=this.length;++l<c;)for(var f=this[l],h=-1,d=f.length;++h<d;)if(r=f[h]){a=r[u][o],e=t.call(r,r.__data__,h,l),s.push(n=[]);for(var p=-1,g=e.length;++p<g;)(i=e[p])&&ku(i,p,u,o,a),n.push(i)}return gu(s,u,o)},mu.filter=function(t){var n,e,r=[];"function"!=typeof t&&(t=dt(t));for(var i=0,a=this.length;i<a;i++){r.push(n=[]);for(var o,u=0,s=(o=this[i]).length;u<s;u++)(e=o[u])&&t.call(e,e.__data__,u,i)&&n.push(e)}return gu(r,this.namespace,this.id)},mu.tween=function(t,n){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(t):pt(this,null==n?function(n){n[r][e].tween.remove(t)}:function(i){i[r][e].tween.set(t,n)})},mu.attr=function(t,n){if(arguments.length<2){for(n in t)this.attr(n,t[n]);return this}var e="transform"==t?ya:Ji,r=a.ns.qualify(t);function i(){this.removeAttribute(r)}function o(){this.removeAttributeNS(r.space,r.local)}return xu(this,"attr."+t,n,r.local?function(t){return null==t?o:(t+="",function(){var n,i=this.getAttributeNS(r.space,r.local);return i!==t&&(n=e(i,t),function(t){this.setAttributeNS(r.space,r.local,n(t))})})}:function(t){return null==t?i:(t+="",function(){var n,i=this.getAttribute(r);return i!==t&&(n=e(i,t),function(t){this.setAttribute(r,n(t))})})})},mu.attrTween=function(t,n){var e=a.ns.qualify(t);return this.tween("attr."+t,e.local?function(t,r){var i=n.call(this,t,r,this.getAttributeNS(e.space,e.local));return i&&function(t){this.setAttributeNS(e.space,e.local,i(t))}}:function(t,r){var i=n.call(this,t,r,this.getAttribute(e));return i&&function(t){this.setAttribute(e,i(t))}})},mu.style=function(t,n,e){var r=arguments.length;if(r<3){if("string"!=typeof t){for(e in r<2&&(n=""),t)this.style(e,t[e],n);return this}e=""}function i(){this.style.removeProperty(t)}return xu(this,"style."+t,n,function(n){return null==n?i:(n+="",function(){var r,i=c(this).getComputedStyle(this,null).getPropertyValue(t);return i!==n&&(r=Ji(i,n),function(n){this.style.setProperty(t,r(n),e)})})})},mu.styleTween=function(t,n,e){return arguments.length<3&&(e=""),this.tween("style."+t,function(r,i){var a=n.call(this,r,i,c(this).getComputedStyle(this,null).getPropertyValue(t));return a&&function(n){this.style.setProperty(t,a(n),e)}})},mu.text=function(t){return xu(this,"text",t,wu)},mu.remove=function(){var t=this.namespace;return this.each("end.transition",function(){var n;this[t].count<2&&(n=this.parentNode)&&n.removeChild(this)})},mu.ease=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].ease:("function"!=typeof t&&(t=a.ease.apply(a,arguments)),pt(this,function(r){r[e][n].ease=t}))},mu.delay=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].delay:pt(this,"function"==typeof t?function(r,i,a){r[e][n].delay=+t.call(r,r.__data__,i,a)}:(t=+t,function(r){r[e][n].delay=t}))},mu.duration=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].duration:pt(this,"function"==typeof t?function(r,i,a){r[e][n].duration=Math.max(1,t.call(r,r.__data__,i,a))}:(t=Math.max(1,t),function(r){r[e][n].duration=t}))},mu.each=function(t,n){var e=this.id,r=this.namespace;if(arguments.length<2){var i=yu,o=vu;try{vu=e,pt(this,function(n,i,a){yu=n[r][e],t.call(n,n.__data__,i,a)})}finally{yu=i,vu=o}}else pt(this,function(i){var o=i[r][e];(o.event||(o.event=a.dispatch("start","end","interrupt"))).on(t,n)});return this},mu.transition=function(){for(var t,n,e,r=this.id,i=++bu,a=this.namespace,o=[],u=0,s=this.length;u<s;u++){o.push(t=[]);for(var l,c=0,f=(l=this[u]).length;c<f;c++)(n=l[c])&&ku(n,c,a,i,{time:(e=n[a][r]).time,ease:e.ease,delay:e.delay+e.duration,duration:e.duration}),t.push(n)}return gu(o,a,i)},a.svg.axis=function(){var t,n=a.scale.linear(),e=Su,r=6,i=6,o=3,s=[10],l=null;function c(u){u.each(function(){var u,c=a.select(this),f=this.__chart__||n,h=this.__chart__=n.copy(),d=null==l?h.ticks?h.ticks.apply(h,s):h.domain():l,p=null==t?h.tickFormat?h.tickFormat.apply(h,s):I:t,g=c.selectAll(".tick").data(d,h),v=g.enter().insert("g",".domain").attr("class","tick").style("opacity",Lt),y=a.transition(g.exit()).style("opacity",Lt).remove(),m=a.transition(g.order()).style("opacity",1),b=Math.max(r,0)+o,x=ho(h),w=c.selectAll(".domain").data([0]),M=(w.enter().append("path").attr("class","domain"),a.transition(w));v.append("line"),v.append("text");var k,S,A,E,L=v.select("line"),_=m.select("line"),N=g.select("text").text(p),q=v.select("text"),C=m.select("text"),T="top"===e||"left"===e?-1:1;if("bottom"===e||"top"===e?(u=Eu,k="x",A="y",S="x2",E="y2",N.attr("dy",T<0?"0em":".71em").style("text-anchor","middle"),M.attr("d","M"+x[0]+","+T*i+"V0H"+x[1]+"V"+T*i)):(u=Lu,k="y",A="x",S="y2",E="x2",N.attr("dy",".32em").style("text-anchor",T<0?"end":"start"),M.attr("d","M"+T*i+","+x[0]+"H0V"+x[1]+"H"+T*i)),L.attr(E,T*r),q.attr(A,T*b),_.attr(S,0).attr(E,T*r),C.attr(k,0).attr(A,T*b),h.rangeBand){var z=h,P=z.rangeBand()/2;f=h=function(t){return z(t)+P}}else f.rangeBand?f=h:y.call(u,h,f);v.call(u,f,h),m.call(u,h,h)})}return c.scale=function(t){return arguments.length?(n=t,c):n},c.orient=function(t){return arguments.length?(e=t in Au?t+"":Su,c):e},c.ticks=function(){return arguments.length?(s=u(arguments),c):s},c.tickValues=function(t){return arguments.length?(l=t,c):l},c.tickFormat=function(n){return arguments.length?(t=n,c):t},c.tickSize=function(t){var n=arguments.length;return n?(r=+t,i=+arguments[n-1],c):r},c.innerTickSize=function(t){return arguments.length?(r=+t,c):r},c.outerTickSize=function(t){return arguments.length?(i=+t,c):i},c.tickPadding=function(t){return arguments.length?(o=+t,c):o},c.tickSubdivide=function(){return arguments.length&&c},c};var Su="bottom",Au={top:1,right:1,bottom:1,left:1};function Eu(t,n,e){t.attr("transform",function(t){var r=n(t);return"translate("+(isFinite(r)?r:e(t))+",0)"})}function Lu(t,n,e){t.attr("transform",function(t){var r=n(t);return"translate(0,"+(isFinite(r)?r:e(t))+")"})}a.svg.brush=function(){var t,n,e=Y(h,"brushstart","brush","brushend"),r=null,i=null,o=[0,0],u=[0,0],s=!0,l=!0,f=Nu[0];function h(t){t.each(function(){var t=a.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",v).on("touchstart.brush",v),n=t.selectAll(".background").data([0]);n.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var e=t.selectAll(".resize").data(f,I);e.exit().remove(),e.enter().append("g").attr("class",function(t){return"resize "+t}).style("cursor",function(t){return _u[t]}).append("rect").attr("x",function(t){return/[ew]$/.test(t)?-3:null}).attr("y",function(t){return/^[ns]/.test(t)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),e.style("display",h.empty()?"none":null);var o,u=a.transition(t),s=a.transition(n);r&&(o=ho(r),s.attr("x",o[0]).attr("width",o[1]-o[0]),p(u)),i&&(o=ho(i),s.attr("y",o[0]).attr("height",o[1]-o[0]),g(u)),d(u)})}function d(t){t.selectAll(".resize").attr("transform",function(t){return"translate("+o[+/e$/.test(t)]+","+u[+/^s/.test(t)]+")"})}function p(t){t.select(".extent").attr("x",o[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",o[1]-o[0])}function g(t){t.select(".extent").attr("y",u[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",u[1]-u[0])}function v(){var f,v,y=this,m=a.select(a.event.target),b=e.of(y,arguments),x=a.select(y),w=m.datum(),M=!/^(n|s)$/.test(w)&&r,k=!/^(e|w)$/.test(w)&&i,S=m.classed("extent"),A=kt(y),E=a.mouse(y),L=a.select(c(y)).on("keydown.brush",function(){32==a.event.keyCode&&(S||(f=null,E[0]-=o[1],E[1]-=u[1],S=2),F())}).on("keyup.brush",function(){32==a.event.keyCode&&2==S&&(E[0]+=o[1],E[1]+=u[1],S=0,F())});if(a.event.changedTouches?L.on("touchmove.brush",q).on("touchend.brush",T):L.on("mousemove.brush",q).on("mouseup.brush",T),x.interrupt().selectAll("*").interrupt(),S)E[0]=o[0]-E[0],E[1]=u[0]-E[1];else if(w){var _=+/w$/.test(w),N=+/^n/.test(w);v=[o[1-_]-E[0],u[1-N]-E[1]],E[0]=o[_],E[1]=u[N]}else a.event.altKey&&(f=E.slice());function q(){var t=a.mouse(y),n=!1;v&&(t[0]+=v[0],t[1]+=v[1]),S||(a.event.altKey?(f||(f=[(o[0]+o[1])/2,(u[0]+u[1])/2]),E[0]=o[+(t[0]<f[0])],E[1]=u[+(t[1]<f[1])]):f=null),M&&C(t,r,0)&&(p(x),n=!0),k&&C(t,i,1)&&(g(x),n=!0),n&&(d(x),b({type:"brush",mode:S?"move":"resize"}))}function C(e,r,i){var a,c,h=ho(r),d=h[0],p=h[1],g=E[i],v=i?u:o,y=v[1]-v[0];if(S&&(d-=g,p-=y+g),a=(i?l:s)?Math.max(d,Math.min(p,e[i])):e[i],S?c=(a+=g)+y:(f&&(g=Math.max(d,Math.min(p,2*f[i]-a))),g<a?(c=a,a=g):c=g),v[0]!=a||v[1]!=c)return i?n=null:t=null,v[0]=a,v[1]=c,!0}function T(){q(),x.style("pointer-events","all").selectAll(".resize").style("display",h.empty()?"none":null),a.select("body").style("cursor",null),L.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),A(),b({type:"brushend"})}x.style("pointer-events","none").selectAll(".resize").style("display",null),a.select("body").style("cursor",m.style("cursor")),b({type:"brushstart"}),q()}return h.event=function(r){r.each(function(){var r=e.of(this,arguments),i={x:o,y:u,i:t,j:n},s=this.__chart__||i;this.__chart__=i,vu?a.select(this).transition().each("start.brush",function(){t=s.i,n=s.j,o=s.x,u=s.y,r({type:"brushstart"})}).tween("brush:brush",function(){var e=Gi(o,i.x),a=Gi(u,i.y);return t=n=null,function(t){o=i.x=e(t),u=i.y=a(t),r({type:"brush",mode:"resize"})}}).each("end.brush",function(){t=i.i,n=i.j,r({type:"brush",mode:"resize"}),r({type:"brushend"})}):(r({type:"brushstart"}),r({type:"brush",mode:"resize"}),r({type:"brushend"}))})},h.x=function(t){return arguments.length?(f=Nu[!(r=t)<<1|!i],h):r},h.y=function(t){return arguments.length?(f=Nu[!r<<1|!(i=t)],h):i},h.clamp=function(t){return arguments.length?(r&&i?(s=!!t[0],l=!!t[1]):r?s=!!t:i&&(l=!!t),h):r&&i?[s,l]:r?s:i?l:null},h.extent=function(e){var a,s,l,c,f;return arguments.length?(r&&(a=e[0],s=e[1],i&&(a=a[0],s=s[0]),t=[a,s],r.invert&&(a=r(a),s=r(s)),s<a&&(f=a,a=s,s=f),a==o[0]&&s==o[1]||(o=[a,s])),i&&(l=e[0],c=e[1],r&&(l=l[1],c=c[1]),n=[l,c],i.invert&&(l=i(l),c=i(c)),c<l&&(f=l,l=c,c=f),l==u[0]&&c==u[1]||(u=[l,c])),h):(r&&(t?(a=t[0],s=t[1]):(a=o[0],s=o[1],r.invert&&(a=r.invert(a),s=r.invert(s)),s<a&&(f=a,a=s,s=f))),i&&(n?(l=n[0],c=n[1]):(l=u[0],c=u[1],i.invert&&(l=i.invert(l),c=i.invert(c)),c<l&&(f=l,l=c,c=f))),r&&i?[[a,l],[s,c]]:r?[a,s]:i&&[l,c])},h.clear=function(){return h.empty()||(o=[0,0],u=[0,0],t=n=null),h},h.empty=function(){return!!r&&o[0]==o[1]||!!i&&u[0]==u[1]},a.rebind(h,e,"on")};var _u={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Nu=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],qu=Hn.format=he.timeFormat,Cu=qu.utc,Tu=Cu("%Y-%m-%dT%H:%M:%S.%LZ");function zu(t){return t.toISOString()}function Pu(t,n,e){function r(n){return t(n)}function i(t,e){var r=(t[1]-t[0])/e,i=a.bisect(Ru,r);return i==Ru.length?[n.year,wo(t.map(function(t){return t/31536e6}),e)[2]]:i?n[r/Ru[i-1]<Ru[i]/r?i-1:i]:[Ou,wo(t,e)[2]]}return r.invert=function(n){return Iu(t.invert(n))},r.domain=function(n){return arguments.length?(t.domain(n),r):t.domain().map(Iu)},r.nice=function(t,n){var e=r.domain(),a=fo(e),o=null==t?i(a,10):"number"==typeof t&&i(a,t);function u(e){return!isNaN(e)&&!t.range(e,Iu(+e+1),n).length}return o&&(t=o[0],n=o[1]),r.domain(go(e,n>1?{floor:function(n){for(;u(n=t.floor(n));)n=Iu(n-1);return n},ceil:function(n){for(;u(n=t.ceil(n));)n=Iu(+n+1);return n}}:t))},r.ticks=function(t,n){var e=fo(r.domain()),a=null==t?i(e,10):"number"==typeof t?i(e,t):!t.range&&[{range:t},n];return a&&(t=a[0],n=a[1]),t.range(e[0],Iu(+e[1]+1),n<1?1:n)},r.tickFormat=function(){return e},r.copy=function(){return Pu(t.copy(),n,e)},bo(r,t)}function Iu(t){return new Date(t)}qu.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?zu:Tu,zu.parse=function(t){var n=new Date(t);return isNaN(n)?null:n},zu.toString=Tu.toString,Hn.second=Fn(function(t){return new On(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(t.getTime()+1e3*Math.floor(n))},function(t){return t.getSeconds()}),Hn.seconds=Hn.second.range,Hn.seconds.utc=Hn.second.utc.range,Hn.minute=Fn(function(t){return new On(6e4*Math.floor(t/6e4))},function(t,n){t.setTime(t.getTime()+6e4*Math.floor(n))},function(t){return t.getMinutes()}),Hn.minutes=Hn.minute.range,Hn.minutes.utc=Hn.minute.utc.range,Hn.hour=Fn(function(t){var n=t.getTimezoneOffset()/60;return new On(36e5*(Math.floor(t/36e5-n)+n))},function(t,n){t.setTime(t.getTime()+36e5*Math.floor(n))},function(t){return t.getHours()}),Hn.hours=Hn.hour.range,Hn.hours.utc=Hn.hour.utc.range,Hn.month=Fn(function(t){return(t=Hn.day(t)).setDate(1),t},function(t,n){t.setMonth(t.getMonth()+n)},function(t){return t.getMonth()}),Hn.months=Hn.month.range,Hn.months.utc=Hn.month.utc.range;var Ru=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Du=[[Hn.second,1],[Hn.second,5],[Hn.second,15],[Hn.second,30],[Hn.minute,1],[Hn.minute,5],[Hn.minute,15],[Hn.minute,30],[Hn.hour,1],[Hn.hour,3],[Hn.hour,6],[Hn.hour,12],[Hn.day,1],[Hn.day,2],[Hn.week,1],[Hn.month,1],[Hn.month,3],[Hn.year,1]],Hu=qu.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",Je]]),Ou={range:function(t,n,e){return a.range(Math.ceil(t/e)*e,+n,e).map(Iu)},floor:I,ceil:I};Du.year=Hn.year,Hn.scale=function(){return Pu(a.scale.linear(),Du,Hu)};var ju=Du.map(function(t){return[t[0].utc,t[1]]}),Uu=Cu.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",Je]]);function Fu(t){return JSON.parse(t.responseText)}function Bu(t){var n=s.createRange();return n.selectNode(s.body),n.createContextualFragment(t.responseText)}ju.year=Hn.year.utc,Hn.scale.utc=function(){return Pu(a.scale.linear(),ju,Uu)},a.text=Mn(function(t){return t.responseText}),a.json=function(t,n){return kn(t,"application/json",Fu,n)},a.html=function(t,n){return kn(t,"text/html",Bu,n)},a.xml=Mn(function(t){return t.responseXML}),this.d3=a,void 0===(i="function"==typeof(r=a)?r.call(n,e,n,t):r)||(t.exports=i)}()},13:function(t,n,e){"use strict";e.r(n);e(0),e(14),e(3);Reveal.initialize({controls:!0,progress:!0,history:!1,center:!1,touch:!0,transition:"fade",reveald3:{runLastState:!0,keepIframe:!1,mapPath:!1,tryFallbackURL:!1},dependencies:[{src:"js/reveald3.js"}]})},14:function(t,n,e){var r;
/*!
 * reveal.js
 * http://revealjs.com
 * MIT licensed
 *
 * Copyright (C) 2018 Hakim El Hattab, http://hakim.se
 */
/*!
 * reveal.js
 * http://revealjs.com
 * MIT licensed
 *
 * Copyright (C) 2018 Hakim El Hattab, http://hakim.se
 */
!function(i,a){void 0===(r=function(){return i.Reveal=function(){"use strict";var t,n,e,r,i,a,o,u,s,l=".slides section",c=".slides>section",f=".slides>section.present>section",h=".slides>section:first-of-type",d=navigator.userAgent,p={width:960,height:700,margin:.04,minScale:.2,maxScale:2,controls:!0,controlsTutorial:!0,controlsLayout:"bottom-right",controlsBackArrows:"faded",progress:!0,slideNumber:!1,hashOneBasedIndex:!1,showSlideNumber:"all",history:!1,keyboard:!0,keyboardCondition:null,overview:!0,disableLayout:!1,center:!0,touch:!0,loop:!1,rtl:!1,shuffle:!1,fragments:!0,fragmentInURL:!1,embedded:!1,help:!0,pause:!0,showNotes:!1,autoPlayMedia:null,autoSlide:0,autoSlideStoppable:!0,autoSlideMethod:null,defaultTiming:null,mouseWheel:!1,rollingLinks:!1,hideAddressBar:!0,previewLinks:!1,postMessage:!0,postMessageEvents:!1,focusBodyOnPageVisibilityChange:!0,transition:"slide",transitionSpeed:"default",backgroundTransition:"fade",parallaxBackgroundImage:"",parallaxBackgroundSize:"",parallaxBackgroundRepeat:"",parallaxBackgroundPosition:"",parallaxBackgroundHorizontal:null,parallaxBackgroundVertical:null,pdfMaxPagesPerSlide:Number.POSITIVE_INFINITY,pdfSeparateFragments:!0,pdfPageHeightOffset:-1,viewDistance:3,display:"block",dependencies:[]},g=!1,v=!1,y=!1,m=null,b=null,x=!1,w=!1,M=[],k=1,S={layout:"",overview:""},A={},E={},L=0,_=0,N=!1,q=0,C=0,T=-1,z=!1,P={startX:0,startY:0,startSpan:0,startCount:0,captured:!1,threshold:40},I={"N  ,  SPACE":"Next slide",P:"Previous slide","&#8592;  ,  H":"Navigate left","&#8594;  ,  L":"Navigate right","&#8593;  ,  K":"Navigate up","&#8595;  ,  J":"Navigate down",Home:"First slide",End:"Last slide","B  ,  .":"Pause",F:"Fullscreen","ESC, O":"Slide overview"},R={};function D(t){var n="";if(3===t.nodeType)n+=t.textContent;else if(1===t.nodeType){var e=t.getAttribute("aria-hidden"),r="none"===window.getComputedStyle(t).display;"true"===e||r||W(t.childNodes).forEach(function(t){n+=D(t)})}return n}function H(){var t=ct(window.innerWidth,window.innerHeight),n=Math.floor(t.width*(1+p.margin)),e=Math.floor(t.height*(1+p.margin)),r=t.width,i=t.height;J("@page{size:"+n+"px "+e+"px; margin: 0px;}"),J(".reveal section>img, .reveal section>video, .reveal section>iframe{max-width: "+r+"px; max-height:"+i+"px}"),document.body.classList.add("print-pdf"),document.body.style.width=n+"px",document.body.style.height=e+"px",lt(r,i),W(A.wrapper.querySelectorAll(c)).forEach(function(t,n){t.setAttribute("data-index-h",n),t.classList.contains("stack")&&W(t.querySelectorAll("section")).forEach(function(t,e){t.setAttribute("data-index-h",n),t.setAttribute("data-index-v",e)})}),W(A.wrapper.querySelectorAll(l)).forEach(function(t){if(!1===t.classList.contains("stack")){var a=(n-r)/2,o=(e-i)/2,u=t.scrollHeight,s=Math.max(Math.ceil(u/e),1);(1===(s=Math.min(s,p.pdfMaxPagesPerSlide))&&p.center||t.classList.contains("center"))&&(o=Math.max((e-u)/2,0));var l=document.createElement("div");if(l.className="pdf-page",l.style.height=(e+p.pdfPageHeightOffset)*s+"px",t.parentNode.insertBefore(l,t),l.appendChild(t),t.style.left=a+"px",t.style.top=o+"px",t.style.width=r+"px",t.slideBackgroundElement&&l.insertBefore(t.slideBackgroundElement,t),p.showNotes){var c=rn(t);if(c){var f="string"==typeof p.showNotes?p.showNotes:"inline",h=document.createElement("div");h.classList.add("speaker-notes"),h.classList.add("speaker-notes-pdf"),h.setAttribute("data-layout",f),h.innerHTML=c,"separate-page"===f?l.parentNode.insertBefore(h,l.nextSibling):(h.style.left="8px",h.style.bottom="8px",h.style.width=n-16+"px",l.appendChild(h))}}if(p.slideNumber&&/all|print/i.test(p.showSlideNumber)){var d=parseInt(t.getAttribute("data-index-h"),10)+1,g=parseInt(t.getAttribute("data-index-v"),10)+1,v=document.createElement("div");v.classList.add("slide-number"),v.classList.add("slide-number-pdf"),v.innerHTML=It(d,".",g),l.appendChild(v)}if(p.pdfSeparateFragments){var y,m,b=on(l.querySelectorAll(".fragment"),!0);b.forEach(function(t){y&&y.forEach(function(t){t.classList.remove("current-fragment")}),t.forEach(function(t){t.classList.add("visible","current-fragment")});var n=l.cloneNode(!0);l.parentNode.insertBefore(n,(m||l).nextSibling),y=t,m=n}),b.forEach(function(t){t.forEach(function(t){t.classList.remove("visible","current-fragment")})})}else W(l.querySelectorAll(".fragment:not(.fade-out)")).forEach(function(t){t.classList.add("visible")})}}),et("pdf-ready")}function O(t,n,e,r){for(var i=t.querySelectorAll("."+e),a=0;a<i.length;a++){var o=i[a];if(o.parentNode===t)return o}var u=document.createElement(n);return u.className=e,"string"==typeof r&&(u.innerHTML=r),t.appendChild(u),u}function j(t,n){var e=document.createElement("div");e.className="slide-background "+t.className.replace(/present|past|future/,"");var r=document.createElement("div");return r.className="slide-background-content",e.appendChild(r),n.appendChild(e),t.slideBackgroundElement=e,t.slideBackgroundContentElement=r,U(t),e}function U(t){var n=t.slideBackgroundElement,e=t.slideBackgroundContentElement;t.classList.remove("has-dark-background"),t.classList.remove("has-light-background"),n.removeAttribute("data-loaded"),n.removeAttribute("data-background-hash"),n.removeAttribute("data-background-size"),n.removeAttribute("data-background-transition"),n.style.backgroundColor="",e.style.backgroundSize="",e.style.backgroundRepeat="",e.style.backgroundPosition="",e.style.backgroundImage="",e.style.opacity="",e.innerHTML="";var r={background:t.getAttribute("data-background"),backgroundSize:t.getAttribute("data-background-size"),backgroundImage:t.getAttribute("data-background-image"),backgroundVideo:t.getAttribute("data-background-video"),backgroundIframe:t.getAttribute("data-background-iframe"),backgroundColor:t.getAttribute("data-background-color"),backgroundRepeat:t.getAttribute("data-background-repeat"),backgroundPosition:t.getAttribute("data-background-position"),backgroundTransition:t.getAttribute("data-background-transition"),backgroundOpacity:t.getAttribute("data-background-opacity")};r.background&&(/^(http|file|\/\/)/gi.test(r.background)||/\.(svg|png|jpg|jpeg|gif|bmp)([?#\s]|$)/gi.test(r.background)?t.setAttribute("data-background-image",r.background):n.style.background=r.background),(r.background||r.backgroundColor||r.backgroundImage||r.backgroundVideo||r.backgroundIframe)&&n.setAttribute("data-background-hash",r.background+r.backgroundSize+r.backgroundImage+r.backgroundVideo+r.backgroundIframe+r.backgroundColor+r.backgroundRepeat+r.backgroundPosition+r.backgroundTransition+r.backgroundOpacity),r.backgroundSize&&n.setAttribute("data-background-size",r.backgroundSize),r.backgroundColor&&(n.style.backgroundColor=r.backgroundColor),r.backgroundTransition&&n.setAttribute("data-background-transition",r.backgroundTransition),r.backgroundSize&&(e.style.backgroundSize=r.backgroundSize),r.backgroundRepeat&&(e.style.backgroundRepeat=r.backgroundRepeat),r.backgroundPosition&&(e.style.backgroundPosition=r.backgroundPosition),r.backgroundOpacity&&(e.style.opacity=r.backgroundOpacity);var i=window.getComputedStyle(n);if(i&&i.backgroundColor){var a=Q(i.backgroundColor);a&&0!==a.a&&(function(t){"string"==typeof t&&(t=Q(t));if(t)return(299*t.r+587*t.g+114*t.b)/1e3;return null}(i.backgroundColor)<128?t.classList.add("has-dark-background"):t.classList.add("has-light-background"))}}function F(t){var n=p.transition;if("object"==typeof t&&V(p,t),!1!==v){var e=A.wrapper.querySelectorAll(l).length;A.wrapper.classList.remove(n),!1===E.transforms3d&&(p.transition="linear"),A.wrapper.classList.add(p.transition),A.wrapper.setAttribute("data-transition-speed",p.transitionSpeed),A.wrapper.setAttribute("data-background-transition",p.backgroundTransition),A.controls.style.display=p.controls?"block":"none",A.progress.style.display=p.progress?"block":"none",A.controls.setAttribute("data-controls-layout",p.controlsLayout),A.controls.setAttribute("data-controls-back-arrows",p.controlsBackArrows),p.shuffle&&Nt(),p.rtl?A.wrapper.classList.add("rtl"):A.wrapper.classList.remove("rtl"),p.center?A.wrapper.classList.add("center"):A.wrapper.classList.remove("center"),!1===p.pause&&Mt(),p.showNotes&&A.speakerNotes.setAttribute("data-layout","string"==typeof p.showNotes?p.showNotes:"inline"),p.mouseWheel?(document.addEventListener("DOMMouseScroll",qn,!1),document.addEventListener("mousewheel",qn,!1)):(document.removeEventListener("DOMMouseScroll",qn,!1),document.removeEventListener("mousewheel",qn,!1)),p.rollingLinks?function(){if(E.transforms3d&&!("msPerspective"in document.body.style))for(var t=A.wrapper.querySelectorAll(l+" a"),n=0,e=t.length;n<e;n++){var r=t[n];if(r.textContent&&!r.querySelector("*")&&(!r.className||!r.classList.contains(r,"roll"))){var i=document.createElement("span");i.setAttribute("data-title",r.text),i.innerHTML=r.innerHTML,r.classList.add("roll"),r.innerHTML="",r.appendChild(i)}}}():function(){for(var t=A.wrapper.querySelectorAll(l+" a.roll"),n=0,e=t.length;n<e;n++){var r=t[n],i=r.querySelector("span");i&&(r.classList.remove("roll"),r.innerHTML=i.innerHTML)}}(),p.previewLinks?(rt(),it("[data-preview-link=false]")):(it(),rt("[data-preview-link]:not([data-preview-link=false])")),s&&(s.destroy(),s=null),e>1&&p.autoSlide&&p.autoSlideStoppable&&E.canvas&&E.requestAnimationFrame&&((s=new Yn(A.wrapper,function(){return Math.min(Math.max((Date.now()-T)/q,0),1)})).on("click",Bn),z=!1),!1===p.fragments&&W(A.slides.querySelectorAll(".fragment")).forEach(function(t){t.classList.add("visible"),t.classList.remove("current-fragment")});var r="none";p.slideNumber&&!tt()&&("all"===p.showSlideNumber?r="block":"speaker"===p.showSlideNumber&&Zt()&&(r="block")),A.slideNumber.style.display=r,Lt()}}function B(){var t;(N=!0,window.addEventListener("hashchange",Hn,!1),window.addEventListener("resize",On,!1),p.touch&&("onpointerdown"in window?(A.wrapper.addEventListener("pointerdown",Ln,!1),A.wrapper.addEventListener("pointermove",_n,!1),A.wrapper.addEventListener("pointerup",Nn,!1)):window.navigator.msPointerEnabled?(A.wrapper.addEventListener("MSPointerDown",Ln,!1),A.wrapper.addEventListener("MSPointerMove",_n,!1),A.wrapper.addEventListener("MSPointerUp",Nn,!1)):(A.wrapper.addEventListener("touchstart",Sn,!1),A.wrapper.addEventListener("touchmove",An,!1),A.wrapper.addEventListener("touchend",En,!1))),p.keyboard&&(document.addEventListener("keydown",kn,!1),document.addEventListener("keypress",Mn,!1)),p.progress&&A.progress&&A.progress.addEventListener("click",Cn,!1),A.resumeButton.addEventListener("click",Mt,!1),p.focusBodyOnPageVisibilityChange)&&("hidden"in document?t="visibilitychange":"msHidden"in document?t="msvisibilitychange":"webkitHidden"in document&&(t="webkitvisibilitychange"),t&&document.addEventListener(t,jn,!1));var n=["touchstart","click"];d.match(/android/gi)&&(n=["touchstart"]),n.forEach(function(t){A.controlsLeft.forEach(function(n){n.addEventListener(t,Tn,!1)}),A.controlsRight.forEach(function(n){n.addEventListener(t,zn,!1)}),A.controlsUp.forEach(function(n){n.addEventListener(t,Pn,!1)}),A.controlsDown.forEach(function(n){n.addEventListener(t,In,!1)}),A.controlsPrev.forEach(function(n){n.addEventListener(t,Rn,!1)}),A.controlsNext.forEach(function(n){n.addEventListener(t,Dn,!1)})})}function Y(){N=!1,document.removeEventListener("keydown",kn,!1),document.removeEventListener("keypress",Mn,!1),window.removeEventListener("hashchange",Hn,!1),window.removeEventListener("resize",On,!1),A.wrapper.removeEventListener("pointerdown",Ln,!1),A.wrapper.removeEventListener("pointermove",_n,!1),A.wrapper.removeEventListener("pointerup",Nn,!1),A.wrapper.removeEventListener("MSPointerDown",Ln,!1),A.wrapper.removeEventListener("MSPointerMove",_n,!1),A.wrapper.removeEventListener("MSPointerUp",Nn,!1),A.wrapper.removeEventListener("touchstart",Sn,!1),A.wrapper.removeEventListener("touchmove",An,!1),A.wrapper.removeEventListener("touchend",En,!1),A.resumeButton.removeEventListener("click",Mt,!1),p.progress&&A.progress&&A.progress.removeEventListener("click",Cn,!1),["touchstart","click"].forEach(function(t){A.controlsLeft.forEach(function(n){n.removeEventListener(t,Tn,!1)}),A.controlsRight.forEach(function(n){n.removeEventListener(t,zn,!1)}),A.controlsUp.forEach(function(n){n.removeEventListener(t,Pn,!1)}),A.controlsDown.forEach(function(n){n.removeEventListener(t,In,!1)}),A.controlsPrev.forEach(function(n){n.removeEventListener(t,Rn,!1)}),A.controlsNext.forEach(function(n){n.removeEventListener(t,Dn,!1)})})}function V(t,n){for(var e in n)t[e]=n[e];return t}function W(t){return Array.prototype.slice.call(t)}function X(t){if("string"==typeof t){if("null"===t)return null;if("true"===t)return!0;if("false"===t)return!1;if(t.match(/^-?[\d\.]+$/))return parseFloat(t)}return t}function $(t,n){var e=t.x-n.x,r=t.y-n.y;return Math.sqrt(e*e+r*r)}function Z(t,n){t.style.WebkitTransform=n,t.style.MozTransform=n,t.style.msTransform=n,t.style.transform=n}function K(t){"string"==typeof t.layout&&(S.layout=t.layout),"string"==typeof t.overview&&(S.overview=t.overview),S.layout?Z(A.slides,S.layout+" "+S.overview):Z(A.slides,S.overview)}function J(t){var n=document.createElement("style");n.type="text/css",n.styleSheet?n.styleSheet.cssText=t:n.appendChild(document.createTextNode(t)),document.getElementsByTagName("head")[0].appendChild(n)}function G(t,n){for(var e=t.parentNode;e;){var r=e.matches||e.matchesSelector||e.msMatchesSelector;if(r&&r.call(e,n))return e;e=e.parentNode}return null}function Q(t){var n=t.match(/^#([0-9a-f]{3})$/i);if(n&&n[1])return n=n[1],{r:17*parseInt(n.charAt(0),16),g:17*parseInt(n.charAt(1),16),b:17*parseInt(n.charAt(2),16)};var e=t.match(/^#([0-9a-f]{6})$/i);if(e&&e[1])return e=e[1],{r:parseInt(e.substr(0,2),16),g:parseInt(e.substr(2,2),16),b:parseInt(e.substr(4,2),16)};var r=t.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);if(r)return{r:parseInt(r[1],10),g:parseInt(r[2],10),b:parseInt(r[3],10)};var i=t.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*([\d]+|[\d]*.[\d]+)\s*\)$/i);return i?{r:parseInt(i[1],10),g:parseInt(i[2],10),b:parseInt(i[3],10),a:parseFloat(i[4])}:null}function tt(){return/print-pdf/gi.test(window.location.search)}function nt(){setTimeout(function(){window.scrollTo(0,1)},10)}function et(t,n){var e=document.createEvent("HTMLEvents",1,2);e.initEvent(t,!0,!0),V(e,n),A.wrapper.dispatchEvent(e),p.postMessageEvents&&window.parent!==window.self&&window.parent.postMessage(JSON.stringify({namespace:"reveal",eventName:t,state:an()}),"*")}function rt(t){var n=W(document.querySelectorAll(t||"a"));n.forEach(function(t){/^(http|www)/gi.test(t.getAttribute("href"))&&t.addEventListener("click",Fn,!1)})}function it(t){var n=W(document.querySelectorAll(t||"a"));n.forEach(function(t){/^(http|www)/gi.test(t.getAttribute("href"))&&t.removeEventListener("click",Fn,!1)})}function at(t){"boolean"==typeof t?t?ot():ut():A.overlay?ut():ot()}function ot(){if(p.help){ut(),A.overlay=document.createElement("div"),A.overlay.classList.add("overlay"),A.overlay.classList.add("overlay-help"),A.wrapper.appendChild(A.overlay);var t='<p class="title">Keyboard Shortcuts</p><br/>';for(var n in t+="<table><th>KEY</th><th>ACTION</th>",I)t+="<tr><td>"+n+"</td><td>"+I[n]+"</td></tr>";for(var e in R)R[e].key&&R[e].description&&(t+="<tr><td>"+R[e].key+"</td><td>"+R[e].description+"</td></tr>");t+="</table>",A.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>',"</header>",'<div class="viewport">','<div class="viewport-inner">'+t+"</div>","</div>"].join(""),A.overlay.querySelector(".close").addEventListener("click",function(t){ut(),t.preventDefault()},!1),setTimeout(function(){A.overlay.classList.add("visible")},1)}}function ut(){A.overlay&&(A.overlay.parentNode.removeChild(A.overlay),A.overlay=null)}function st(){if(A.wrapper&&!tt()){if(!p.disableLayout){var t=ct();lt(p.width,p.height),A.slides.style.width=t.width+"px",A.slides.style.height=t.height+"px",k=Math.min(t.presentationWidth/t.width,t.presentationHeight/t.height),k=Math.max(k,p.minScale),1===(k=Math.min(k,p.maxScale))?(A.slides.style.zoom="",A.slides.style.left="",A.slides.style.top="",A.slides.style.bottom="",A.slides.style.right="",K({layout:""})):k>1&&E.zoom?(A.slides.style.zoom=k,A.slides.style.left="",A.slides.style.top="",A.slides.style.bottom="",A.slides.style.right="",K({layout:""})):(A.slides.style.zoom="",A.slides.style.left="50%",A.slides.style.top="50%",A.slides.style.bottom="auto",A.slides.style.right="auto",K({layout:"translate(-50%, -50%) scale("+k+")"}));for(var n=W(A.wrapper.querySelectorAll(l)),e=0,r=n.length;e<r;e++){var i=n[e];"none"!==i.style.display&&(p.center||i.classList.contains("center")?i.classList.contains("stack")?i.style.top=0:i.style.top=Math.max((t.height-i.scrollHeight)/2,0)+"px":i.style.top="")}}zt(),Ht(),mt()&&gt()}}function lt(t,n){W(A.slides.querySelectorAll("section > .stretch")).forEach(function(e){var r=function(t,n){if(n=n||0,t){var e,r=t.style.height;return t.style.height="0px",e=n-t.parentNode.offsetHeight,t.style.height=r+"px",e}return n}(e,n);if(/(img|video)/gi.test(e.nodeName)){var i=e.naturalWidth||e.videoWidth,a=e.naturalHeight||e.videoHeight,o=Math.min(t/i,r/a);e.style.width=i*o+"px",e.style.height=a*o+"px"}else e.style.width=t+"px",e.style.height=r+"px"})}function ct(t,n){var e={width:p.width,height:p.height,presentationWidth:t||A.wrapper.offsetWidth,presentationHeight:n||A.wrapper.offsetHeight};return e.presentationWidth-=e.presentationWidth*p.margin,e.presentationHeight-=e.presentationHeight*p.margin,"string"==typeof e.width&&/%$/.test(e.width)&&(e.width=parseInt(e.width,10)/100*e.presentationWidth),"string"==typeof e.height&&/%$/.test(e.height)&&(e.height=parseInt(e.height,10)/100*e.presentationHeight),e}function ft(t,n){"object"==typeof t&&"function"==typeof t.setAttribute&&t.setAttribute("data-previous-indexv",n||0)}function ht(t){if("object"==typeof t&&"function"==typeof t.setAttribute&&t.classList.contains("stack")){var n=t.hasAttribute("data-start-indexv")?"data-start-indexv":"data-previous-indexv";return parseInt(t.getAttribute(n)||0,10)}return 0}function dt(){if(p.overview&&!mt()){y=!0,A.wrapper.classList.add("overview"),A.wrapper.classList.remove("overview-deactivating"),E.overviewTransitions&&setTimeout(function(){A.wrapper.classList.add("overview-animated")},1),fn(),A.slides.appendChild(A.background),W(A.wrapper.querySelectorAll(l)).forEach(function(t){t.classList.contains("stack")||t.addEventListener("click",Un,!0)});var t=ct();m=t.width+70,b=t.height+70,p.rtl&&(m=-m),Ct(),pt(),gt(),st(),et("overviewshown",{indexh:n,indexv:e,currentSlide:i})}}function pt(){W(A.wrapper.querySelectorAll(c)).forEach(function(t,n){t.setAttribute("data-index-h",n),Z(t,"translate3d("+n*m+"px, 0, 0)"),t.classList.contains("stack")&&W(t.querySelectorAll("section")).forEach(function(t,e){t.setAttribute("data-index-h",n),t.setAttribute("data-index-v",e),Z(t,"translate3d(0, "+e*b+"px, 0)")})}),W(A.background.childNodes).forEach(function(t,n){Z(t,"translate3d("+n*m+"px, 0, 0)"),W(t.querySelectorAll(".slide-background")).forEach(function(t,n){Z(t,"translate3d(0, "+n*b+"px, 0)")})})}function gt(){var t=Math.min(window.innerWidth,window.innerHeight),r=Math.max(t/5,150)/t;K({overview:["scale("+r+")","translateX("+-n*m+"px)","translateY("+-e*b+"px)"].join(" ")})}function vt(){p.overview&&(y=!1,A.wrapper.classList.remove("overview"),A.wrapper.classList.remove("overview-animated"),A.wrapper.classList.add("overview-deactivating"),setTimeout(function(){A.wrapper.classList.remove("overview-deactivating")},1),A.wrapper.appendChild(A.background),W(A.wrapper.querySelectorAll(l)).forEach(function(t){Z(t,""),t.removeEventListener("click",Un,!0)}),W(A.background.querySelectorAll(".slide-background")).forEach(function(t){Z(t,"")}),K({overview:""}),Et(n,e),st(),cn(),et("overviewhidden",{indexh:n,indexv:e,currentSlide:i}))}function yt(t){"boolean"==typeof t?t?dt():vt():mt()?vt():dt()}function mt(){return y}function bt(){var t,r="/",a=i?i.getAttribute("id"):null;if(a&&(a=encodeURIComponent(a)),p.fragmentInURL&&(t=Gt().f),"string"==typeof a&&a.length&&void 0===t)r="/"+a;else{var o=p.hashOneBasedIndex?1:0;(n>0||e>0||void 0!==t)&&(r+=n+o),(e>0||void 0!==t)&&(r+="/"+(e+o)),void 0!==t&&(r+="/"+t)}return r}function xt(t){return(t=t||i)&&t.parentNode&&!!t.parentNode.nodeName.match(/section/i)}function wt(){if(p.pause){var t=A.wrapper.classList.contains("paused");fn(),A.wrapper.classList.add("paused"),!1===t&&et("paused")}}function Mt(){var t=A.wrapper.classList.contains("paused");A.wrapper.classList.remove("paused"),cn(),t&&et("resumed")}function kt(t){"boolean"==typeof t?t?wt():Mt():St()?Mt():wt()}function St(){return A.wrapper.classList.contains("paused")}function At(t){"boolean"==typeof t?t?dn():hn():z?dn():hn()}function Et(t,a,o,u){r=i;var s=A.wrapper.querySelectorAll(c);if(0!==s.length){void 0!==a||mt()||(a=ht(s[t])),r&&r.parentNode&&r.parentNode.classList.contains("stack")&&ft(r.parentNode,e);var l=M.concat();M.length=0;var d=n||0,p=e||0;n=qt(c,void 0===t?n:t),e=qt(f,void 0===a?e:a),Ct(),st();t:for(var g=0,v=M.length;g<v;g++){for(var y=0;y<l.length;y++)if(l[y]===M[g]){l.splice(y,1);continue t}document.documentElement.classList.add(M[g]),et(M[g])}for(;l.length;)document.documentElement.classList.remove(l.pop());mt()&&gt();var m=s[n],b=m.querySelectorAll("section");i=b[e]||m,void 0!==o&&un(o);var x=n!==d||e!==p;x||(r=null),r&&r!==i&&(r.classList.remove("present"),r.setAttribute("aria-hidden","true"),A.wrapper.querySelector(h).classList.contains("present")&&setTimeout(function(){var t,n=W(A.wrapper.querySelectorAll(c+".stack"));for(t in n)n[t]&&ft(n[t],0)},0)),x&&et("slidechanged",{indexh:n,indexv:e,previousSlide:r,currentSlide:i,origin:u}),!x&&r||(Wt(r),Bt(i)),A.statusDiv.textContent=D(i),Rt(),zt(),Dt(),Ht(),Pt(),Tt(),Jt(),cn()}}function Lt(){Y(),B(),st(),q=p.autoSlide,cn(),function(){tt();A.background.innerHTML="",A.background.classList.add("no-transition"),W(A.wrapper.querySelectorAll(c)).forEach(function(t){var n=j(t,A.background);W(t.querySelectorAll("section")).forEach(function(t){j(t,n),n.classList.add("stack")})}),p.parallaxBackgroundImage?(A.background.style.backgroundImage='url("'+p.parallaxBackgroundImage+'")',A.background.style.backgroundSize=p.parallaxBackgroundSize,A.background.style.backgroundRepeat=p.parallaxBackgroundRepeat,A.background.style.backgroundPosition=p.parallaxBackgroundPosition,setTimeout(function(){A.wrapper.classList.add("has-parallax-background")},1)):(A.background.style.backgroundImage="",A.wrapper.classList.remove("has-parallax-background"))}(),Jt(),W(A.wrapper.querySelectorAll(c)).forEach(function(t){var n=W(t.querySelectorAll("section"));n.forEach(function(t,n){on(t.querySelectorAll(".fragment"))}),0===n.length&&on(t.querySelectorAll(".fragment"))}),Rt(),zt(),Pt(),Ct(),Dt(!0),p.showNotes&&A.slides.querySelectorAll("[data-notes], aside.notes").length>0?A.wrapper.classList.add("show-notes"):A.wrapper.classList.remove("show-notes"),Tt(),function(){var t=function(t,n,e){W(A.slides.querySelectorAll("iframe["+t+'*="'+n+'"]')).forEach(function(n){var r=n.getAttribute(t);r&&-1===r.indexOf(e)&&n.setAttribute(t,r+(/\?/.test(r)?"&":"?")+e)})};t("src","youtube.com/embed/","enablejsapi=1"),t("data-src","youtube.com/embed/","enablejsapi=1"),t("src","player.vimeo.com/","api=1"),t("data-src","player.vimeo.com/","api=1"),o&&W(A.slides.querySelectorAll("video, audio")).forEach(function(t){t.controls=!0})}(),!1===p.autoPlayMedia?Wt(i,{unloadIframes:!1}):Bt(i),mt()&&pt()}function _t(t){on(t.querySelectorAll(".fragment"))}function Nt(){var t=W(A.wrapper.querySelectorAll(c));t.forEach(function(n){A.slides.insertBefore(n,t[Math.floor(Math.random()*t.length)])})}function qt(t,n){var e=W(A.wrapper.querySelectorAll(t)),r=e.length,i=tt();if(r){p.loop&&(n%=r)<0&&(n=r+n),n=Math.max(Math.min(n,r-1),0);for(var a=0;a<r;a++){var o=e[a],u=p.rtl&&!xt(o);if(o.classList.remove("past"),o.classList.remove("present"),o.classList.remove("future"),o.setAttribute("hidden",""),o.setAttribute("aria-hidden","true"),o.querySelector("section")&&o.classList.add("stack"),i)o.classList.add("present");else if(a<n){if(o.classList.add(u?"future":"past"),p.fragments)for(var s=W(o.querySelectorAll(".fragment"));s.length;){var l=s.pop();l.classList.add("visible"),l.classList.remove("current-fragment")}}else if(a>n&&(o.classList.add(u?"past":"future"),p.fragments))for(var c=W(o.querySelectorAll(".fragment.visible"));c.length;){var f=c.pop();f.classList.remove("visible"),f.classList.remove("current-fragment")}}e[n].classList.add("present"),e[n].removeAttribute("hidden"),e[n].removeAttribute("aria-hidden");var h=e[n].getAttribute("data-state");h&&(M=M.concat(h.split(" ")))}else n=0;return n}function Ct(){var t,r,i=W(A.wrapper.querySelectorAll(c)),a=i.length;if(a&&void 0!==n){var u=mt()?10:p.viewDistance;o&&(u=mt()?6:2),tt()&&(u=Number.MAX_VALUE);for(var s=0;s<a;s++){var l=i[s],f=W(l.querySelectorAll("section")),h=f.length;if(t=Math.abs((n||0)-s)||0,p.loop&&(t=Math.abs(((n||0)-s)%(a-u))||0),t<u?Ot(l):jt(l),h)for(var d=ht(l),g=0;g<h;g++){var v=f[g];r=s===(n||0)?Math.abs((e||0)-g):Math.abs(g-d),t+r<u?Ot(v):jt(v)}}A.wrapper.querySelectorAll(".slides>section>section").length?A.wrapper.classList.add("has-vertical-slides"):A.wrapper.classList.remove("has-vertical-slides"),A.wrapper.querySelectorAll(".slides>section").length>1?A.wrapper.classList.add("has-horizontal-slides"):A.wrapper.classList.remove("has-horizontal-slides")}}function Tt(){p.showNotes&&A.speakerNotes&&i&&!tt()&&(A.speakerNotes.innerHTML=rn()||'<span class="notes-placeholder">No notes on this slide.</span>')}function zt(){p.progress&&A.progressbar&&(A.progressbar.style.width=$t()*A.wrapper.offsetWidth+"px")}function Pt(){if(p.slideNumber&&A.slideNumber){var t=[],r="h.v";switch("string"==typeof p.slideNumber&&(r=p.slideNumber),/c/.test(r)||1!==A.wrapper.querySelectorAll(c).length||(r="c"),r){case"c":t.push(Xt()+1);break;case"c/t":t.push(Xt()+1,"/",tn());break;case"h/v":t.push(n+1),xt()&&t.push("/",e+1);break;default:t.push(n+1),xt()&&t.push(".",e+1)}A.slideNumber.innerHTML=It(t[0],t[1],t[2])}}function It(t,n,e){var r="#"+bt();return"number"!=typeof e||isNaN(e)?'<a href="'+r+'"><span class="slide-number-a">'+t+"</span></a>":'<a href="'+r+'"><span class="slide-number-a">'+t+'</span><span class="slide-number-delimiter">'+n+'</span><span class="slide-number-b">'+e+"</span></a>"}function Rt(){var t=Ut(),n=Ft();A.controlsLeft.concat(A.controlsRight).concat(A.controlsUp).concat(A.controlsDown).concat(A.controlsPrev).concat(A.controlsNext).forEach(function(t){t.classList.remove("enabled"),t.classList.remove("fragmented"),t.setAttribute("disabled","disabled")}),t.left&&A.controlsLeft.forEach(function(t){t.classList.add("enabled"),t.removeAttribute("disabled")}),t.right&&A.controlsRight.forEach(function(t){t.classList.add("enabled"),t.removeAttribute("disabled")}),t.up&&A.controlsUp.forEach(function(t){t.classList.add("enabled"),t.removeAttribute("disabled")}),t.down&&A.controlsDown.forEach(function(t){t.classList.add("enabled"),t.removeAttribute("disabled")}),(t.left||t.up)&&A.controlsPrev.forEach(function(t){t.classList.add("enabled"),t.removeAttribute("disabled")}),(t.right||t.down)&&A.controlsNext.forEach(function(t){t.classList.add("enabled"),t.removeAttribute("disabled")}),i&&(n.prev&&A.controlsPrev.forEach(function(t){t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")}),n.next&&A.controlsNext.forEach(function(t){t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")}),xt(i)?(n.prev&&A.controlsUp.forEach(function(t){t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")}),n.next&&A.controlsDown.forEach(function(t){t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")})):(n.prev&&A.controlsLeft.forEach(function(t){t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")}),n.next&&A.controlsRight.forEach(function(t){t.classList.add("fragmented","enabled"),t.removeAttribute("disabled")}))),p.controlsTutorial&&(!w&&t.down?A.controlsDownArrow.classList.add("highlight"):(A.controlsDownArrow.classList.remove("highlight"),!x&&t.right&&0===e?A.controlsRightArrow.classList.add("highlight"):A.controlsRightArrow.classList.remove("highlight")))}function Dt(t){var r=null,o=p.rtl?"future":"past",u=p.rtl?"past":"future";if(W(A.background.childNodes).forEach(function(i,a){i.classList.remove("past"),i.classList.remove("present"),i.classList.remove("future"),a<n?i.classList.add(o):a>n?i.classList.add(u):(i.classList.add("present"),r=i),(t||a===n)&&W(i.querySelectorAll(".slide-background")).forEach(function(t,i){t.classList.remove("past"),t.classList.remove("present"),t.classList.remove("future"),i<e?t.classList.add("past"):i>e?t.classList.add("future"):(t.classList.add("present"),a===n&&(r=t))})}),a&&Wt(a),r){Bt(r);var s=r.querySelector(".slide-background-content");if(s){var l=s.style.backgroundImage||"";/\.gif/i.test(l)&&(s.style.backgroundImage="",window.getComputedStyle(s).opacity,s.style.backgroundImage=l)}var c=a?a.getAttribute("data-background-hash"):null,f=r.getAttribute("data-background-hash");f&&f===c&&r!==a&&A.background.classList.add("no-transition"),a=r}i&&["has-light-background","has-dark-background"].forEach(function(t){i.classList.contains(t)?A.wrapper.classList.add(t):A.wrapper.classList.remove(t)}),setTimeout(function(){A.background.classList.remove("no-transition")},1)}function Ht(){if(p.parallaxBackgroundImage){var t,r,i=A.wrapper.querySelectorAll(c),a=A.wrapper.querySelectorAll(f),o=A.background.style.backgroundSize.split(" ");1===o.length?t=r=parseInt(o[0],10):(t=parseInt(o[0],10),r=parseInt(o[1],10));var u,s,l=A.background.offsetWidth,h=i.length;u="number"==typeof p.parallaxBackgroundHorizontal?p.parallaxBackgroundHorizontal:h>1?(t-l)/(h-1):0,s=u*n*-1;var d,g,v=A.background.offsetHeight,y=a.length;d="number"==typeof p.parallaxBackgroundVertical?p.parallaxBackgroundVertical:(r-v)/(y-1),g=y>0?d*e:0,A.background.style.backgroundPosition=s+"px "+-g+"px"}}function Ot(t,n){n=n||{},t.style.display=p.display,W(t.querySelectorAll("img[data-src], video[data-src], audio[data-src]")).forEach(function(t){t.setAttribute("src",t.getAttribute("data-src")),t.setAttribute("data-lazy-loaded",""),t.removeAttribute("data-src")}),W(t.querySelectorAll("video, audio")).forEach(function(t){var n=0;W(t.querySelectorAll("source[data-src]")).forEach(function(t){t.setAttribute("src",t.getAttribute("data-src")),t.removeAttribute("data-src"),t.setAttribute("data-lazy-loaded",""),n+=1}),n>0&&t.load()});var e=t.slideBackgroundElement;if(e){e.style.display="block";var r=t.slideBackgroundContentElement;if(!1===e.hasAttribute("data-loaded")){e.setAttribute("data-loaded","true");var i=t.getAttribute("data-background-image"),a=t.getAttribute("data-background-video"),u=t.hasAttribute("data-background-video-loop"),s=t.hasAttribute("data-background-video-muted"),l=t.getAttribute("data-background-iframe");if(i)r.style.backgroundImage="url("+encodeURI(i)+")";else if(a&&!Zt()){var c=document.createElement("video");u&&c.setAttribute("loop",""),s&&(c.muted=!0),o&&(c.muted=!0,c.autoplay=!0,c.setAttribute("playsinline","")),a.split(",").forEach(function(t){c.innerHTML+='<source src="'+t+'">'}),r.appendChild(c)}else if(l&&!0!==n.excludeIframes){var f=document.createElement("iframe");f.setAttribute("allowfullscreen",""),f.setAttribute("mozallowfullscreen",""),f.setAttribute("webkitallowfullscreen",""),/autoplay=(1|true|yes)/gi.test(l)?f.setAttribute("data-src",l):f.setAttribute("src",l),f.style.width="100%",f.style.height="100%",f.style.maxHeight="100%",f.style.maxWidth="100%",r.appendChild(f)}}}}function jt(t){t.style.display="none";var n=en(t);n&&(n.style.display="none"),W(t.querySelectorAll("video[data-lazy-loaded][src], audio[data-lazy-loaded][src]")).forEach(function(t){t.setAttribute("data-src",t.getAttribute("src")),t.removeAttribute("src")}),W(t.querySelectorAll("video[data-lazy-loaded] source[src], audio source[src]")).forEach(function(t){t.setAttribute("data-src",t.getAttribute("src")),t.removeAttribute("src")})}function Ut(){var t=A.wrapper.querySelectorAll(c),r=A.wrapper.querySelectorAll(f),i={left:n>0,right:n<t.length-1,up:e>0,down:e<r.length-1};if(p.loop&&(t.length>1&&(i.left=!0,i.right=!0),r.length>1&&(i.up=!0,i.down=!0)),p.rtl){var a=i.left;i.left=i.right,i.right=a}return i}function Ft(){if(i&&p.fragments){var t=i.querySelectorAll(".fragment"),n=i.querySelectorAll(".fragment:not(.visible)");return{prev:t.length-n.length>0,next:!!n.length}}return{prev:!1,next:!1}}function Bt(t){t&&!Zt()&&(W(t.querySelectorAll('img[src$=".gif"]')).forEach(function(t){t.setAttribute("src",t.getAttribute("src"))}),W(t.querySelectorAll("video, audio")).forEach(function(t){if(!G(t,".fragment")||G(t,".fragment.visible")){var n=p.autoPlayMedia;"boolean"!=typeof n&&(n=t.hasAttribute("data-autoplay")||!!G(t,".slide-background")),n&&"function"==typeof t.play&&(t.readyState>1?Yt({target:t}):o?t.play():(t.removeEventListener("loadeddata",Yt),t.addEventListener("loadeddata",Yt)))}}),W(t.querySelectorAll("iframe[src]")).forEach(function(t){G(t,".fragment")&&!G(t,".fragment.visible")||Vt({target:t})}),W(t.querySelectorAll("iframe[data-src]")).forEach(function(t){G(t,".fragment")&&!G(t,".fragment.visible")||t.getAttribute("src")!==t.getAttribute("data-src")&&(t.removeEventListener("load",Vt),t.addEventListener("load",Vt),t.setAttribute("src",t.getAttribute("data-src")))}))}function Yt(t){var n=!!G(t.target,"html"),e=!!G(t.target,".present");n&&e&&(t.target.currentTime=0,t.target.play()),t.target.removeEventListener("loadeddata",Yt)}function Vt(t){var n=t.target;if(n&&n.contentWindow){var e=!!G(t.target,"html"),r=!!G(t.target,".present");if(e&&r){var i=p.autoPlayMedia;"boolean"!=typeof i&&(i=n.hasAttribute("data-autoplay")||!!G(n,".slide-background")),/youtube\.com\/embed\//.test(n.getAttribute("src"))&&i?n.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*"):/player\.vimeo\.com\//.test(n.getAttribute("src"))&&i?n.contentWindow.postMessage('{"method":"play"}',"*"):n.contentWindow.postMessage("slide:start","*")}}}function Wt(t,n){n=V({unloadIframes:!0},n||{}),t&&t.parentNode&&(W(t.querySelectorAll("video, audio")).forEach(function(t){t.hasAttribute("data-ignore")||"function"!=typeof t.pause||(t.setAttribute("data-paused-by-reveal",""),t.pause())}),W(t.querySelectorAll("iframe")).forEach(function(t){t.contentWindow&&t.contentWindow.postMessage("slide:stop","*"),t.removeEventListener("load",Vt)}),W(t.querySelectorAll('iframe[src*="youtube.com/embed/"]')).forEach(function(t){!t.hasAttribute("data-ignore")&&t.contentWindow&&"function"==typeof t.contentWindow.postMessage&&t.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}),W(t.querySelectorAll('iframe[src*="player.vimeo.com/"]')).forEach(function(t){!t.hasAttribute("data-ignore")&&t.contentWindow&&"function"==typeof t.contentWindow.postMessage&&t.contentWindow.postMessage('{"method":"pause"}',"*")}),!0===n.unloadIframes&&W(t.querySelectorAll("iframe[data-src]")).forEach(function(t){t.setAttribute("src","about:blank"),t.removeAttribute("src")}))}function Xt(){var t=W(A.wrapper.querySelectorAll(c)),n=0;t:for(var e=0;e<t.length;e++){for(var r=t[e],i=W(r.querySelectorAll("section")),a=0;a<i.length;a++){if(i[a].classList.contains("present"))break t;n++}if(r.classList.contains("present"))break;!1===r.classList.contains("stack")&&n++}return n}function $t(){var t=tn(),n=Xt();if(i){var e=i.querySelectorAll(".fragment");if(e.length>0){var r=i.querySelectorAll(".fragment.visible");n+=r.length/e.length*.9}}return n/(t-1)}function Zt(){return!!window.location.search.match(/receiver/gi)}function Kt(){var r=window.location.hash,a=r.slice(2).split("/"),o=r.replace(/#|\//gi,"");if(isNaN(parseInt(a[0],10))&&o.length){var u;try{u=document.getElementById(decodeURIComponent(o))}catch(t){}var s=!!i&&i.getAttribute("id")===o;if(u&&!s){var l=t.getIndices(u);Et(l.h,l.v)}else Et(n||0,e||0)}else{var c,f=p.hashOneBasedIndex?1:0,h=parseInt(a[0],10)-f||0,d=parseInt(a[1],10)-f||0;p.fragmentInURL&&(c=parseInt(a[2],10),isNaN(c)&&(c=void 0)),h===n&&d===e&&void 0===c||Et(h,d,c)}}function Jt(t){p.history&&(clearTimeout(_),"number"==typeof t?_=setTimeout(Jt,t):i&&(window.location.hash=bt()))}function Gt(t){var r,a=n,o=e;if(t){var u=xt(t),s=u?t.parentNode:t,l=W(A.wrapper.querySelectorAll(c));a=Math.max(l.indexOf(s),0),o=void 0,u&&(o=Math.max(W(t.parentNode.querySelectorAll("section")).indexOf(t),0))}if(!t&&i){var f=i.querySelectorAll(".fragment").length>0;if(f){var h=i.querySelector(".current-fragment");r=h&&h.hasAttribute("data-fragment-index")?parseInt(h.getAttribute("data-fragment-index"),10):i.querySelectorAll(".fragment.visible").length-1}}return{h:a,v:o,f:r}}function Qt(){return W(A.wrapper.querySelectorAll(l+":not(.stack)"))}function tn(){return Qt().length}function nn(t,n){var e=A.wrapper.querySelectorAll(c)[t],r=e&&e.querySelectorAll("section");return r&&r.length&&"number"==typeof n?r?r[n]:void 0:e}function en(t,n){var e="number"==typeof t?nn(t,n):t;if(e)return e.slideBackgroundElement}function rn(t){if((t=t||i).hasAttribute("data-notes"))return t.getAttribute("data-notes");var n=t.querySelector("aside.notes");return n?n.innerHTML:null}function an(){var t=Gt();return{indexh:t.h,indexv:t.v,indexf:t.f,paused:St(),overview:mt()}}function on(t,n){var e=[],r=[],i=[];(t=W(t)).forEach(function(t,n){if(t.hasAttribute("data-fragment-index")){var i=parseInt(t.getAttribute("data-fragment-index"),10);e[i]||(e[i]=[]),e[i].push(t)}else r.push([t])});var a=0;return(e=e.concat(r)).forEach(function(t){t.forEach(function(t){i.push(t),t.setAttribute("data-fragment-index",a)}),a++}),!0===n?e:i}function un(t,n){if(i&&p.fragments){var e=on(i.querySelectorAll(".fragment"));if(e.length){if("number"!=typeof t){var r=on(i.querySelectorAll(".fragment.visible")).pop();t=r?parseInt(r.getAttribute("data-fragment-index")||0,10):-1}"number"==typeof n&&(t+=n);var a=[],o=[];return W(e).forEach(function(n,e){n.hasAttribute("data-fragment-index")&&(e=parseInt(n.getAttribute("data-fragment-index"),10)),e<=t?(n.classList.contains("visible")||a.push(n),n.classList.add("visible"),n.classList.remove("current-fragment"),A.statusDiv.textContent=D(n),e===t&&(n.classList.add("current-fragment"),Bt(n))):(n.classList.contains("visible")&&o.push(n),n.classList.remove("visible"),n.classList.remove("current-fragment"))}),o.length&&et("fragmenthidden",{fragment:o[0],fragments:o}),a.length&&et("fragmentshown",{fragment:a[0],fragments:a}),Rt(),zt(),p.fragmentInURL&&Jt(),!(!a.length&&!o.length)}}return!1}function sn(){return un(null,1)}function ln(){return un(null,-1)}function cn(){if(fn(),i&&!1!==p.autoSlide){var n=i.querySelector(".current-fragment");n||(n=i.querySelector(".fragment"));var e=n?n.getAttribute("data-autoslide"):null,r=i.parentNode?i.parentNode.getAttribute("data-autoslide"):null,a=i.getAttribute("data-autoslide");q=e?parseInt(e,10):a?parseInt(a,10):r?parseInt(r,10):p.autoSlide,0===i.querySelectorAll(".fragment").length&&W(i.querySelectorAll("video, audio")).forEach(function(t){t.hasAttribute("data-autoplay")&&q&&1e3*t.duration/t.playbackRate>q&&(q=1e3*t.duration/t.playbackRate+1e3)}),!q||z||St()||mt()||t.isLastSlide()&&!Ft().next&&!0!==p.loop||(C=setTimeout(function(){"function"==typeof p.autoSlideMethod?p.autoSlideMethod():bn(),cn()},q),T=Date.now()),s&&s.setPlaying(-1!==C)}}function fn(){clearTimeout(C),C=-1}function hn(){q&&!z&&(z=!0,et("autoslidepaused"),clearTimeout(C),s&&s.setPlaying(!1))}function dn(){q&&z&&(z=!1,et("autoslideresumed"),cn())}function pn(){p.rtl?(mt()||!1===sn())&&Ut().left&&Et(n+1):(mt()||!1===ln())&&Ut().left&&Et(n-1)}function gn(){x=!0,p.rtl?(mt()||!1===ln())&&Ut().right&&Et(n-1):(mt()||!1===sn())&&Ut().right&&Et(n+1)}function vn(){(mt()||!1===ln())&&Ut().up&&Et(n,e-1)}function yn(){w=!0,(mt()||!1===sn())&&Ut().down&&Et(n,e+1)}function mn(){var t;if(!1===ln())if(Ut().up)vn();else if(t=p.rtl?W(A.wrapper.querySelectorAll(c+".future")).pop():W(A.wrapper.querySelectorAll(c+".past")).pop()){var e=t.querySelectorAll("section").length-1||void 0,r=n-1;Et(r,e)}}function bn(){if(x=!0,w=!0,!1===sn()){var n=Ut();n.down&&n.right&&p.loop&&t.isLastVerticalSlide(i)&&(n.down=!1),n.down?yn():p.rtl?pn():gn()}}function xn(t){for(;t&&"function"==typeof t.hasAttribute;){if(t.hasAttribute("data-prevent-swipe"))return!0;t=t.parentNode}return!1}function wn(t){p.autoSlideStoppable&&hn()}function Mn(t){t.shiftKey&&63===t.charCode&&at()}function kn(n){if("function"==typeof p.keyboardCondition&&!1===p.keyboardCondition(n))return!0;var e=z;wn(n);var r=document.activeElement&&"inherit"!==document.activeElement.contentEditable,i=document.activeElement&&document.activeElement.tagName&&/input|textarea/i.test(document.activeElement.tagName),a=document.activeElement&&document.activeElement.className&&/speaker-notes/i.test(document.activeElement.className);if(!(r||i||a||n.shiftKey&&32!==n.keyCode||n.altKey||n.ctrlKey||n.metaKey)){var o,u=[66,86,190,191];if("object"==typeof p.keyboard)for(o in p.keyboard)"togglePause"===p.keyboard[o]&&u.push(parseInt(o,10));if(St()&&-1===u.indexOf(n.keyCode))return!1;var s=!1;if("object"==typeof p.keyboard)for(o in p.keyboard)if(parseInt(o,10)===n.keyCode){var l=p.keyboard[o];"function"==typeof l?l.apply(null,[n]):"string"==typeof l&&"function"==typeof t[l]&&t[l].call(),s=!0}if(!1===s)for(o in R)if(parseInt(o,10)===n.keyCode){var c=R[o].callback;"function"==typeof c?c.apply(null,[n]):"string"==typeof c&&"function"==typeof t[c]&&t[c].call(),s=!0}if(!1===s)switch(s=!0,n.keyCode){case 80:case 33:mn();break;case 78:case 34:bn();break;case 72:case 37:pn();break;case 76:case 39:gn();break;case 75:case 38:vn();break;case 74:case 40:yn();break;case 36:Et(0);break;case 35:Et(Number.MAX_VALUE);break;case 32:mt()?vt():n.shiftKey?mn():bn();break;case 13:mt()?vt():s=!1;break;case 58:case 59:case 66:case 86:case 190:case 191:kt();break;case 70:!function(){var t=document.documentElement,n=t.requestFullscreen||t.webkitRequestFullscreen||t.webkitRequestFullScreen||t.mozRequestFullScreen||t.msRequestFullscreen;n&&n.apply(t)}();break;case 65:p.autoSlideStoppable&&At(e);break;default:s=!1}s?n.preventDefault&&n.preventDefault():27!==n.keyCode&&79!==n.keyCode||!E.transforms3d||(A.overlay?ut():yt(),n.preventDefault&&n.preventDefault()),cn()}}function Sn(t){if(xn(t.target))return!0;P.startX=t.touches[0].clientX,P.startY=t.touches[0].clientY,P.startCount=t.touches.length,2===t.touches.length&&p.overview&&(P.startSpan=$({x:t.touches[1].clientX,y:t.touches[1].clientY},{x:P.startX,y:P.startY}))}function An(t){if(xn(t.target))return!0;if(P.captured)d.match(/android/gi)&&t.preventDefault();else{wn(t);var n=t.touches[0].clientX,e=t.touches[0].clientY;if(2===t.touches.length&&2===P.startCount&&p.overview){var r=$({x:t.touches[1].clientX,y:t.touches[1].clientY},{x:P.startX,y:P.startY});Math.abs(P.startSpan-r)>P.threshold&&(P.captured=!0,r<P.startSpan?dt():vt()),t.preventDefault()}else if(1===t.touches.length&&2!==P.startCount){var a=n-P.startX,o=e-P.startY;a>P.threshold&&Math.abs(a)>Math.abs(o)?(P.captured=!0,pn()):a<-P.threshold&&Math.abs(a)>Math.abs(o)?(P.captured=!0,gn()):o>P.threshold?(P.captured=!0,vn()):o<-P.threshold&&(P.captured=!0,yn()),p.embedded?(P.captured||xt(i))&&t.preventDefault():t.preventDefault()}}}function En(t){P.captured=!1}function Ln(t){t.pointerType!==t.MSPOINTER_TYPE_TOUCH&&"touch"!==t.pointerType||(t.touches=[{clientX:t.clientX,clientY:t.clientY}],Sn(t))}function _n(t){t.pointerType!==t.MSPOINTER_TYPE_TOUCH&&"touch"!==t.pointerType||(t.touches=[{clientX:t.clientX,clientY:t.clientY}],An(t))}function Nn(t){t.pointerType!==t.MSPOINTER_TYPE_TOUCH&&"touch"!==t.pointerType||(t.touches=[{clientX:t.clientX,clientY:t.clientY}],En(t))}function qn(t){if(Date.now()-L>600){L=Date.now();var n=t.detail||-t.wheelDelta;n>0?bn():n<0&&mn()}}function Cn(t){wn(t),t.preventDefault();var n=W(A.wrapper.querySelectorAll(c)).length,e=Math.floor(t.clientX/A.wrapper.offsetWidth*n);p.rtl&&(e=n-e),Et(e)}function Tn(t){t.preventDefault(),wn(),pn()}function zn(t){t.preventDefault(),wn(),gn()}function Pn(t){t.preventDefault(),wn(),vn()}function In(t){t.preventDefault(),wn(),yn()}function Rn(t){t.preventDefault(),wn(),mn()}function Dn(t){t.preventDefault(),wn(),bn()}function Hn(t){Kt()}function On(t){st()}function jn(t){var n=document.webkitHidden||document.msHidden||document.hidden;!1===n&&document.activeElement!==document.body&&("function"==typeof document.activeElement.blur&&document.activeElement.blur(),document.body.focus())}function Un(t){if(N&&mt()){t.preventDefault();for(var n=t.target;n&&!n.nodeName.match(/section/gi);)n=n.parentNode;if(n&&!n.classList.contains("disabled")&&(vt(),n.nodeName.match(/section/gi))){var e=parseInt(n.getAttribute("data-index-h"),10),r=parseInt(n.getAttribute("data-index-v"),10);Et(e,r)}}}function Fn(t){if(t.currentTarget&&t.currentTarget.hasAttribute("href")){var n=t.currentTarget.getAttribute("href");n&&(!function(t){ut(),A.overlay=document.createElement("div"),A.overlay.classList.add("overlay"),A.overlay.classList.add("overlay-preview"),A.wrapper.appendChild(A.overlay),A.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>','<a class="external" href="'+t+'" target="_blank"><span class="icon"></span></a>',"</header>",'<div class="spinner"></div>','<div class="viewport">','<iframe src="'+t+'"></iframe>','<small class="viewport-inner">','<span class="x-frame-error">Unable to load iframe. This is likely due to the site\'s policy (x-frame-options).</span>',"</small>","</div>"].join(""),A.overlay.querySelector("iframe").addEventListener("load",function(t){A.overlay.classList.add("loaded")},!1),A.overlay.querySelector(".close").addEventListener("click",function(t){ut(),t.preventDefault()},!1),A.overlay.querySelector(".external").addEventListener("click",function(t){ut()},!1),setTimeout(function(){A.overlay.classList.add("visible")},1)}(n),t.preventDefault())}}function Bn(n){t.isLastSlide()&&!1===p.loop?(Et(0,0),dn()):z?dn():hn()}function Yn(t,n){this.diameter=100,this.diameter2=this.diameter/2,this.thickness=6,this.playing=!1,this.progress=0,this.progressOffset=1,this.container=t,this.progressCheck=n,this.canvas=document.createElement("canvas"),this.canvas.className="playback",this.canvas.width=this.diameter,this.canvas.height=this.diameter,this.canvas.style.width=this.diameter2+"px",this.canvas.style.height=this.diameter2+"px",this.context=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.render()}return Yn.prototype.setPlaying=function(t){var n=this.playing;this.playing=t,!n&&this.playing?this.animate():this.render()},Yn.prototype.animate=function(){var t=this.progress;this.progress=this.progressCheck(),t>.8&&this.progress<.2&&(this.progressOffset=this.progress),this.render(),this.playing&&E.requestAnimationFrameMethod.call(window,this.animate.bind(this))},Yn.prototype.render=function(){var t=this.playing?this.progress:0,n=this.diameter2-this.thickness,e=this.diameter2,r=this.diameter2;this.progressOffset+=.1*(1-this.progressOffset);var i=-Math.PI/2+t*(2*Math.PI),a=-Math.PI/2+this.progressOffset*(2*Math.PI);this.context.save(),this.context.clearRect(0,0,this.diameter,this.diameter),this.context.beginPath(),this.context.arc(e,r,n+4,0,2*Math.PI,!1),this.context.fillStyle="rgba( 0, 0, 0, 0.4 )",this.context.fill(),this.context.beginPath(),this.context.arc(e,r,n,0,2*Math.PI,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="rgba( 255, 255, 255, 0.2 )",this.context.stroke(),this.playing&&(this.context.beginPath(),this.context.arc(e,r,n,a,i,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#fff",this.context.stroke()),this.context.translate(e-14,r-14),this.playing?(this.context.fillStyle="#fff",this.context.fillRect(0,0,10,28),this.context.fillRect(18,0,10,28)):(this.context.beginPath(),this.context.translate(4,0),this.context.moveTo(0,0),this.context.lineTo(24,14),this.context.lineTo(0,28),this.context.fillStyle="#fff",this.context.fill()),this.context.restore()},Yn.prototype.on=function(t,n){this.canvas.addEventListener(t,n,!1)},Yn.prototype.off=function(t,n){this.canvas.removeEventListener(t,n,!1)},Yn.prototype.destroy=function(){this.playing=!1,this.canvas.parentNode&&this.container.removeChild(this.canvas)},t={VERSION:"3.7.0",initialize:function(r){if(!0!==g)if(g=!0,function(){o=/(iphone|ipod|ipad|android)/gi.test(d),u=/chrome/i.test(d)&&!/edge/i.test(d);var t=document.createElement("div");E.transforms3d="WebkitPerspective"in t.style||"MozPerspective"in t.style||"msPerspective"in t.style||"OPerspective"in t.style||"perspective"in t.style,E.transforms2d="WebkitTransform"in t.style||"MozTransform"in t.style||"msTransform"in t.style||"OTransform"in t.style||"transform"in t.style,E.requestAnimationFrameMethod=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame,E.requestAnimationFrame="function"==typeof E.requestAnimationFrameMethod,E.canvas=!!document.createElement("canvas").getContext,E.overviewTransitions=!/Version\/[\d\.]+.*Safari/.test(d),E.zoom="zoom"in t.style&&!o&&(u||/Version\/[\d\.]+.*Safari/.test(d))}(),E.transforms2d||E.transforms3d){A.wrapper=document.querySelector(".reveal"),A.slides=document.querySelector(".reveal .slides"),window.addEventListener("load",st,!1);var a=t.getQueryHash();void 0!==a.dependencies&&delete a.dependencies,V(p,r),V(p,a),p.hideAddressBar&&o&&(window.addEventListener("load",nt,!1),window.addEventListener("orientationchange",nt,!1)),function(){var r=[],a=[],u=0;function s(){a.length&&head.js.apply(null,a),v=!0,A.slides.classList.add("no-transition"),o?A.wrapper.classList.add("no-hover"):A.wrapper.classList.remove("no-hover"),/iphone/gi.test(d)?A.wrapper.classList.add("ua-iphone"):A.wrapper.classList.remove("ua-iphone"),A.background=O(A.wrapper,"div","backgrounds",null),A.progress=O(A.wrapper,"div","progress","<span></span>"),A.progressbar=A.progress.querySelector("span"),A.controls=O(A.wrapper,"aside","controls",'<button class="navigate-left" aria-label="previous slide"><div class="controls-arrow"></div></button><button class="navigate-right" aria-label="next slide"><div class="controls-arrow"></div></button><button class="navigate-up" aria-label="above slide"><div class="controls-arrow"></div></button><button class="navigate-down" aria-label="below slide"><div class="controls-arrow"></div></button>'),A.slideNumber=O(A.wrapper,"div","slide-number",""),A.speakerNotes=O(A.wrapper,"div","speaker-notes",null),A.speakerNotes.setAttribute("data-prevent-swipe",""),A.speakerNotes.setAttribute("tabindex","0"),A.pauseOverlay=O(A.wrapper,"div","pause-overlay",'<button class="resume-button">Resume presentation</button>'),A.resumeButton=A.pauseOverlay.querySelector(".resume-button"),A.wrapper.setAttribute("role","application"),A.controlsLeft=W(document.querySelectorAll(".navigate-left")),A.controlsRight=W(document.querySelectorAll(".navigate-right")),A.controlsUp=W(document.querySelectorAll(".navigate-up")),A.controlsDown=W(document.querySelectorAll(".navigate-down")),A.controlsPrev=W(document.querySelectorAll(".navigate-prev")),A.controlsNext=W(document.querySelectorAll(".navigate-next")),A.controlsRightArrow=A.controls.querySelector(".navigate-right"),A.controlsDownArrow=A.controls.querySelector(".navigate-down"),A.statusDiv=function(){var t=document.getElementById("aria-status-div");return t||((t=document.createElement("div")).style.position="absolute",t.style.height="1px",t.style.width="1px",t.style.overflow="hidden",t.style.clip="rect( 1px, 1px, 1px, 1px )",t.setAttribute("id","aria-status-div"),t.setAttribute("aria-live","polite"),t.setAttribute("aria-atomic","true"),A.wrapper.appendChild(t)),t}(),p.postMessage&&window.addEventListener("message",function(n){var e=n.data;"string"==typeof e&&"{"===e.charAt(0)&&"}"===e.charAt(e.length-1)&&(e=JSON.parse(e)).method&&"function"==typeof t[e.method]&&t[e.method].apply(t,e.args)},!1),setInterval(function(){0===A.wrapper.scrollTop&&0===A.wrapper.scrollLeft||(A.wrapper.scrollTop=0,A.wrapper.scrollLeft=0)},1e3),W(A.wrapper.querySelectorAll(c)).forEach(function(t){var n=W(t.querySelectorAll("section"));n.forEach(function(t,n){n>0&&(t.classList.remove("present"),t.classList.remove("past"),t.classList.add("future"),t.setAttribute("aria-hidden","true"))})}),F(),Kt(),Dt(!0),setTimeout(function(){A.slides.classList.remove("no-transition"),A.wrapper.classList.add("ready"),et("ready",{indexh:n,indexv:e,currentSlide:i})},1),tt()&&(Y(),"complete"===document.readyState?H():window.addEventListener("load",H))}function l(t){head.ready(t.src.match(/([\w\d_\-]*)\.?js(\?[\w\d.=&]*)?$|[^\\\/]*$/i)[0],function(){"function"==typeof t.callback&&t.callback.apply(this),0==--u&&s()})}for(var f=0,h=p.dependencies.length;f<h;f++){var g=p.dependencies[f];g.condition&&!g.condition()||(g.async?a.push(g.src):r.push(g.src),l(g))}r.length?(u=r.length,head.js.apply(null,r)):s()}()}else{document.body.setAttribute("class","no-transforms");for(var s=W(document.getElementsByTagName("img")),l=W(document.getElementsByTagName("iframe")),f=s.concat(l),h=0,y=f.length;h<y;h++){var m=f[h];m.getAttribute("data-src")&&(m.setAttribute("src",m.getAttribute("data-src")),m.removeAttribute("data-src"))}}},configure:F,sync:Lt,syncSlide:function(t){U(t),_t(t),Dt(),Tt(),Ot(t)},syncFragments:_t,slide:Et,left:pn,right:gn,up:vn,down:yn,prev:mn,next:bn,navigateFragment:un,prevFragment:ln,nextFragment:sn,navigateTo:Et,navigateLeft:pn,navigateRight:gn,navigateUp:vn,navigateDown:yn,navigatePrev:mn,navigateNext:bn,layout:st,shuffle:Nt,availableRoutes:Ut,availableFragments:Ft,toggleHelp:at,toggleOverview:yt,togglePause:kt,toggleAutoSlide:At,isOverview:mt,isPaused:St,isAutoSliding:function(){return!(!q||z)},isSpeakerNotes:Zt,loadSlide:Ot,unloadSlide:jt,addEventListeners:B,removeEventListeners:Y,getState:an,setState:function(t){if("object"==typeof t){Et(X(t.indexh),X(t.indexv),X(t.indexf));var n=X(t.paused),e=X(t.overview);"boolean"==typeof n&&n!==St()&&kt(n),"boolean"==typeof e&&e!==mt()&&yt(e)}},getSlidePastCount:Xt,getProgress:$t,getIndices:Gt,getSlides:Qt,getTotalSlides:tn,getSlide:nn,getSlideBackground:en,getSlideNotes:rn,getPreviousSlide:function(){return r},getCurrentSlide:function(){return i},getScale:function(){return k},getConfig:function(){return p},getQueryHash:function(){var t={};for(var n in location.search.replace(/[A-Z0-9]+?=([\w\.%-]*)/gi,function(n){t[n.split("=").shift()]=n.split("=").pop()}),t){var e=t[n];t[n]=X(unescape(e))}return t},isFirstSlide:function(){return 0===n&&0===e},isLastSlide:function(){return!(!i||i.nextElementSibling||xt(i)&&i.parentNode.nextElementSibling)},isLastVerticalSlide:function(){return!(!i||!xt(i)||i.nextElementSibling)},isReady:function(){return v},addEventListener:function(t,n,e){"addEventListener"in window&&(A.wrapper||document.querySelector(".reveal")).addEventListener(t,n,e)},removeEventListener:function(t,n,e){"addEventListener"in window&&(A.wrapper||document.querySelector(".reveal")).removeEventListener(t,n,e)},addKeyBinding:function(t,n){"object"==typeof t&&t.keyCode?R[t.keyCode]={callback:n,key:t.key,description:t.description}:R[t]={callback:n,key:null,description:null}},removeKeyBinding:function(t){delete R[t]},triggerKey:function(t){kn({keyCode:t})},registerKeyboardShortcut:function(t,n){I[t]=n}}}(),i.Reveal}.call(n,e,n,t))||(t.exports=r)}(this)},3:function(t,n){(function(){var t,n,e,r,i,a;i=void 0,d3.ternary={},e=Math.sqrt(3)/2,tickValues=[.2,.4,.6,.8,1],a=function(){var t,n,e,r;for(r="",e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",t=0;t<=3;++t)n=Math.floor(Math.random()*e.length),r+=e.charAt(n);return r},r=function(t){return t||(t="linear"),i=d3.svg.line().x(function(t){return t[0]}).y(function(t){return t[1]}).interpolate(t)},n=[0,120,240],d3.ternary.graticule=function(){var t,n,e,r,i;return n=.1,r=null,e=function(){var t,e,r;for(r=[],e=t=n;e<1;)r.push(e),e+=t;return r},i=function(){var t,e;if(e=[],null==r)return e;for(t=r;t<1;)t%n!=0&&e.push(t),t+=r;return e},(t=function(t){var n,r;return r=[0,1,2].map(function(){return d3.svg.axis().tickValues(e())}),n=function(n,r){var o,u,s,l;return o=d3.select(this),(s=o.selectAll("path.minor").data(i())).enter().append("path").attr("class",`minor axis-${r}`),(l=o.selectAll("path.major").data(e())).enter().append("path").attr("class",`major axis-${r}`),u=function(){return n.scale(t.scales[r]),s.attr("d",t.rule(r)),l.attr("d",t.rule(r))},t.on("resize."+a(),u),u()},t.axes().selectAll(".graticule").data(r).enter().append("g").attr("class","graticule").attr("clip-path","url(#axesClip)").each(n)}).axes=function(){return gratAxes},t.majorInterval=function(e){return e?(n=e,t):n},t.minorInterval=function(n){return n?(r=n,t):r},t},d3.ternary.scalebars=function(t){var e,r,i,o,u,s;return null==t&&(t={}),u=null,o=t.labels||null,r=[0,1,2].map(function(t){return d3.svg.axis().tickSize(10).tickFormat(d3.format("%")).tickValues(tickValues).orient("top")}),e=function(t,n){return 0===n?d3.select(this).selectAll("text").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(22 "+-n+") rotate(60 0 "+4.5*n+")"})&&d3.select(this).selectAll("line").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(0 "+-n+") rotate(-30 0 "+1*n+")"}):d3.select(this).selectAll("text").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(-27 "+-n+") rotate(-120 0 "+2.5*n+")"})&&d3.select(this).selectAll("line").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(0 "+-n+") rotate(-30 0 "+1*n+")"})},i=function(t,n){var e,r,i;return e=-30,r="translate("+(i=u.width())/2+")",2===n&&(e=42,r=" rotate(-180 0 0) translate("+-i/2+")"),d3.select(this).attr("class","label").attr("transform",r).attr("y",e).attr("text-anchor","middle").text(t)},(s=function(t){var s,l;return(s=(u=t).axes().selectAll(".bary-axis").data(n).enter().append("g").attr("class",function(t,n){return t="bary-axis",2===n&&(t+=" bottom"),t})).each(function(){return d3.select(this).append("text").attr("class","label")}),l=function(){var t,n,a;if(r.forEach(function(t,n){var e;return e=u.scales[n].copy(),t.scale(e)}),a=u.radius(),n=u.center(),s.each(function(t,n){var e;return e=d3.select(this),r[n](e)}).attr("transform",function(t,e){return"rotate("+(120*e-60)+" "+n[0]+" "+n[1]+") translate(0 "+a/2+")"}).each(e),t)return u.axes().selectAll(".bary-axis .label").data(o).each(i)},u.on("resize."+a(),l),l()}).labels=function(t){return null==t?o:(o=t,s)},s.axes=r,s},d3.ternary.vertexLabels=function(t){var n=null,e=[0,60,-60];return function(r){var i,o,u;return u=r.vertices(20),i=t.map(function(t,n){return{label:t,vertex:u[n]}}),(n=r.axes().selectAll(".vertex-label").data(i)).enter().append("text").text(function(t){return t.label}).attr("dy",".35em").attr("text-anchor","middle").attr("class",function(t){return"vertex-label "+t.label.toLowerCase()}),o=function(){return n.attr({transform:function(t,n){var r;return"translate("+(r=t.vertex)[0]+","+r[1]+")rotate("+e[n]+")"}})},r.on("resize."+a(),o),o(),n}},d3.ternary.neatline=function(){return function(t){return t.node().append("use").attr("class","neatline").attr("xlink:href","#bounds")}},t=function(t){var n,e,r,i,o,u,s,l,c;for(r=t.scales.map(function(t){return t.domain()}),l=[],u=s=0;s<=2;u=++s)-1===(c=u-1)&&(c=2),(e=r.map(function(t){return t[0]}))[c]=r[c][1],l.push(e),(e=r.map(function(t){return t[0]}))[u]=r[u][1],l.push(e);return n=d3.select(this),null==(o=n.select("#bounds")).node()&&(o=n.append("polygon")),o.datum(l).attr({id:"bounds"}),i=function(){return o.attr({points:function(n){return n.map(function(n){return(u=t.rawPoint(n)).join(",")}).join(" ")}})},t.on("resize."+a(),i),i()},d3.ternary.plot=function(){var n,a,o,u,s,l,c,f,h,d,p,g,v,y,m,b,x,w;return p=500,d=500,h={top:50,bottom:50,left:50,right:50},v=null,l=null,w=null,x=null,a=null,g=null,u=null,b=!1,o=[],m=[0,1,2].map(function(){return d3.scale.linear().domain([0,1]).range([0,1])}),s=d3.dispatch("resize"),f=function(t){return t-h.left-h.right},c=function(t){return t-h.top-h.bottom},y=function(){var e,r;if(null==w&&(w=f(p)),null==l&&(l=c(d)),null==v&&(v=w/Math.sqrt(3)),[w/2,v],null!=x){for(x.attr({transform:"translate("+h.left+","+h.top+")",width:w,height:l}),d3.select(x.node().parentElement).attr({width:p,height:d}),e=0,r=m.length;e<r;e++)m[e].range([0,w]);return t.call(u.node(),n),b&&g.attr({"clip-path":"url(#axesClip)"}),s.resize()}},(n=function(t){return x=t.append("g"),u=x.append("defs"),a=x.append("g").attr("id","axes"),g=x.append("g").attr("id","plot"),y(),u.append("clipPath").attr({id:"axesClip"}).append("use").attr({"xlink:href":"#bounds"}),o&&o.forEach(function(t){return t(n)}),o=[]}).on=function(t,n){return s.on(t,n)},n.fit=function(t,r){var i,a,o;return 2===arguments.length?(a=f(t),o=(i=c(r))<=e*a?2*i/3:a/Math.sqrt(3)):o=a/Math.sqrt(3),n.radius(o),n},n.node=function(){return x},n.axes=function(){return a},n.plot=function(){return g},n.call=function(t){return null!=x?t(n):o.push(t),n},n.scales=m,n.margin=function(t){return null==t?h:(h=null!=t.left?t:{left:t,right:t,top:t,bottom:t},y(),n)},n.point=function(t){var e;return 0!==(e=d3.sum(t))&&(t=t.map(function(t){return t/e})),n.rawPoint(t)},n.rawPoint=function(t){var n,r,i,a;return 0===d3.sum(t)?[0,0]:(n=m[0],r=m[1],m[2],i=t[0],a=t[1],t[2],[n(i)/2+r(a),r((1-i)*e)])},n.value=function(t){var n,r,i,a,o,u;return o=t[0],u=t[1],n=m[0],r=m[1],m[2],[i=1-r.invert(u)/e,a=r.invert(o-n(i)/2),1-i-a]},n.path=function(t,e,a){var o;return r(a),e||(e=function(t){return t}),o=t.map(function(t){return n.point(e(t))}),i(o)},n.area=function(t,e,a){var o;return r(a),e||(e=function(t){return t}),o=t.map(function(t){return n.point(e(t))}),i(o)+"Z"},n.rule=function(t){return function(e){var r;return r=[],0===t?r=[[0,1-e,e],[1-e,0,e]]:1===t?r=[[0,e,1-e],[1-e,e,0]]:2===t&&(r=[[e,0,1-e],[e,1-e,0]]),n.path(r)}},n.vertices=function(t){return null==t&&(t=0),[0,-120,120].map(function(n){var e;return e=n*Math.PI/180,[w/2+Math.sin(e)*(v+t),v-Math.cos(e)*(v+t)]})},n.range=function(t){return n},n.radius=function(t){return null==t?v:(v=t,l=3*t/2,w=t*Math.sqrt(3),d=l+h.top+h.bottom,p=w+h.left+h.right,y(),n)},n.center=function(){return[w/2,v]},n.height=function(){return l},n.width=function(){return w},n.clip=function(t){return null==t?b:(b=t,n)},n}}).call(this),t.exports=d3.ternary}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
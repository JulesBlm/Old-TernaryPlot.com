!function(t){function n(n){for(var e,l,o=n[0],i=n[1],c=n[2],f=0,p=[];f<o.length;f++)l=o[f],a[l]&&p.push(a[l][0]),a[l]=0;for(e in i)Object.prototype.hasOwnProperty.call(i,e)&&(t[e]=i[e]);for(s&&s(n);p.length;)p.shift()();return u.push.apply(u,c||[]),r()}function r(){for(var t,n=0;n<u.length;n++){for(var r=u[n],e=!0,o=1;o<r.length;o++){var i=r[o];0!==a[i]&&(e=!1)}e&&(u.splice(n--,1),t=l(l.s=r[0]))}return t}var e={},a={2:0},u=[];function l(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,l),r.l=!0,r.exports}l.m=t,l.c=e,l.d=function(t,n,r){l.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},l.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},l.t=function(t,n){if(1&n&&(t=l(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(l.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var e in t)l.d(r,e,function(n){return t[n]}.bind(null,e));return r},l.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return l.d(n,"a",n),n},l.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},l.p="";var o=window.webpackJsonp=window.webpackJsonp||[],i=o.push.bind(o);o.push=n,o=o.slice();for(var c=0;c<o.length;c++)n(o[c]);var s=i;u.push([13,0,4]),r()}({13:function(t,n,r){"use strict";r.r(n);r(0),r(14),r(3);Reveal.initialize({controls:!0,progress:!0,history:!1,center:!1,touch:!0,transition:"fade",reveald3:{runLastState:!0,keepIframe:!1,mapPath:!1,tryFallbackURL:!1},dependencies:[{src:"js/reveald3.js"}]})},3:function(t,n){(function(){var t,n,r,e,a,u;a=void 0,d3.ternary={},r=Math.sqrt(3)/2,tickValues=[.2,.4,.6,.8,1],u=function(){var t,n,r,e;for(e="",r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",t=0;t<=3;++t)n=Math.floor(Math.random()*r.length),e+=r.charAt(n);return e},e=function(t){return t||(t="linear"),a=d3.svg.line().x(function(t){return t[0]}).y(function(t){return t[1]}).interpolate(t)},n=[0,120,240],d3.ternary.graticule=function(){var t,n,r,e,a;return n=.1,e=null,r=function(){var t,r,e;for(e=[],r=t=n;r<1;)e.push(r),r+=t;return e},a=function(){var t,r;if(r=[],null==e)return r;for(t=e;t<1;)t%n!=0&&r.push(t),t+=e;return r},(t=function(t){var n,e;return e=[0,1,2].map(function(){return d3.svg.axis().tickValues(r())}),n=function(n,e){var l,o,i,c;return l=d3.select(this),(i=l.selectAll("path.minor").data(a())).enter().append("path").attr("class",`minor axis-${e}`),(c=l.selectAll("path.major").data(r())).enter().append("path").attr("class",`major axis-${e}`),o=function(){return n.scale(t.scales[e]),i.attr("d",t.rule(e)),c.attr("d",t.rule(e))},t.on("resize."+u(),o),o()},t.axes().selectAll(".graticule").data(e).enter().append("g").attr("class","graticule").attr("clip-path","url(#axesClip)").each(n)}).axes=function(){return gratAxes},t.majorInterval=function(r){return r?(n=r,t):n},t.minorInterval=function(n){return n?(e=n,t):e},t},d3.ternary.scalebars=function(t){var r,e,a,l,o,i;return null==t&&(t={}),o=null,l=t.labels||null,e=[0,1,2].map(function(t){return d3.svg.axis().tickSize(10).tickFormat(d3.format("%")).tickValues(tickValues).orient("top")}),r=function(t,n){return 0===n?d3.select(this).selectAll("text").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(22 "+-n+") rotate(60 0 "+4.5*n+")"})&&d3.select(this).selectAll("line").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(0 "+-n+") rotate(-30 0 "+1*n+")"}):d3.select(this).selectAll("text").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(-27 "+-n+") rotate(-120 0 "+2.5*n+")"})&&d3.select(this).selectAll("line").attr("transform",function(t){const n=d3.select(this).attr("y");return"translate(0 "+-n+") rotate(-30 0 "+1*n+")"})},a=function(t,n){var r,e,a;return r=-30,e="translate("+(a=o.width())/2+")",2===n&&(r=42,e=" rotate(-180 0 0) translate("+-a/2+")"),d3.select(this).attr("class","label").attr("transform",e).attr("y",r).attr("text-anchor","middle").text(t)},(i=function(t){var i,c;return(i=(o=t).axes().selectAll(".bary-axis").data(n).enter().append("g").attr("class",function(t,n){return t="bary-axis",2===n&&(t+=" bottom"),t})).each(function(){return d3.select(this).append("text").attr("class","label")}),c=function(){var t,n,u;if(e.forEach(function(t,n){var r;return r=o.scales[n].copy(),t.scale(r)}),u=o.radius(),n=o.center(),i.each(function(t,n){var r;return r=d3.select(this),e[n](r)}).attr("transform",function(t,r){return"rotate("+(120*r-60)+" "+n[0]+" "+n[1]+") translate(0 "+u/2+")"}).each(r),t)return o.axes().selectAll(".bary-axis .label").data(l).each(a)},o.on("resize."+u(),c),c()}).labels=function(t){return null==t?l:(l=t,i)},i.axes=e,i},d3.ternary.vertexLabels=function(t){var n=null,r=[0,60,-60];return function(e){var a,l,o;return o=e.vertices(20),a=t.map(function(t,n){return{label:t,vertex:o[n]}}),(n=e.axes().selectAll(".vertex-label").data(a)).enter().append("text").text(function(t){return t.label}).attr("dy",".35em").attr("text-anchor","middle").attr("class",function(t){return"vertex-label "+t.label.toLowerCase()}),l=function(){return n.attr({transform:function(t,n){var e;return"translate("+(e=t.vertex)[0]+","+e[1]+")rotate("+r[n]+")"}})},e.on("resize."+u(),l),l(),n}},d3.ternary.neatline=function(){return function(t){return t.node().append("use").attr("class","neatline").attr("xlink:href","#bounds")}},t=function(t){var n,r,e,a,l,o,i,c,s;for(e=t.scales.map(function(t){return t.domain()}),c=[],o=i=0;i<=2;o=++i)-1===(s=o-1)&&(s=2),(r=e.map(function(t){return t[0]}))[s]=e[s][1],c.push(r),(r=e.map(function(t){return t[0]}))[o]=e[o][1],c.push(r);return n=d3.select(this),null==(l=n.select("#bounds")).node()&&(l=n.append("polygon")),l.datum(c).attr({id:"bounds"}),a=function(){return l.attr({points:function(n){return n.map(function(n){return(o=t.rawPoint(n)).join(",")}).join(" ")}})},t.on("resize."+u(),a),a()},d3.ternary.plot=function(){var n,u,l,o,i,c,s,f,p,d,h,v,m,b,x,g,y,w;return h=500,d=500,p={top:50,bottom:50,left:50,right:50},m=null,c=null,w=null,y=null,u=null,v=null,o=null,g=!1,l=[],x=[0,1,2].map(function(){return d3.scale.linear().domain([0,1]).range([0,1])}),i=d3.dispatch("resize"),f=function(t){return t-p.left-p.right},s=function(t){return t-p.top-p.bottom},b=function(){var r,e;if(null==w&&(w=f(h)),null==c&&(c=s(d)),null==m&&(m=w/Math.sqrt(3)),[w/2,m],null!=y){for(y.attr({transform:"translate("+p.left+","+p.top+")",width:w,height:c}),d3.select(y.node().parentElement).attr({width:h,height:d}),r=0,e=x.length;r<e;r++)x[r].range([0,w]);return t.call(o.node(),n),g&&v.attr({"clip-path":"url(#axesClip)"}),i.resize()}},(n=function(t){return y=t.append("g"),o=y.append("defs"),u=y.append("g").attr("id","axes"),v=y.append("g").attr("id","plot"),b(),o.append("clipPath").attr({id:"axesClip"}).append("use").attr({"xlink:href":"#bounds"}),l&&l.forEach(function(t){return t(n)}),l=[]}).on=function(t,n){return i.on(t,n)},n.fit=function(t,e){var a,u,l;return 2===arguments.length?(u=f(t),l=(a=s(e))<=r*u?2*a/3:u/Math.sqrt(3)):l=u/Math.sqrt(3),n.radius(l),n},n.node=function(){return y},n.axes=function(){return u},n.plot=function(){return v},n.call=function(t){return null!=y?t(n):l.push(t),n},n.scales=x,n.margin=function(t){return null==t?p:(p=null!=t.left?t:{left:t,right:t,top:t,bottom:t},b(),n)},n.point=function(t){var r;return 0!==(r=d3.sum(t))&&(t=t.map(function(t){return t/r})),n.rawPoint(t)},n.rawPoint=function(t){var n,e,a,u;return 0===d3.sum(t)?[0,0]:(n=x[0],e=x[1],x[2],a=t[0],u=t[1],t[2],[n(a)/2+e(u),e((1-a)*r)])},n.value=function(t){var n,e,a,u,l,o;return l=t[0],o=t[1],n=x[0],e=x[1],x[2],[a=1-e.invert(o)/r,u=e.invert(l-n(a)/2),1-a-u]},n.path=function(t,r,u){var l;return e(u),r||(r=function(t){return t}),l=t.map(function(t){return n.point(r(t))}),a(l)},n.area=function(t,r,u){var l;return e(u),r||(r=function(t){return t}),l=t.map(function(t){return n.point(r(t))}),a(l)+"Z"},n.rule=function(t){return function(r){var e;return e=[],0===t?e=[[0,1-r,r],[1-r,0,r]]:1===t?e=[[0,r,1-r],[1-r,r,0]]:2===t&&(e=[[r,0,1-r],[r,1-r,0]]),n.path(e)}},n.vertices=function(t){return null==t&&(t=0),[0,-120,120].map(function(n){var r;return r=n*Math.PI/180,[w/2+Math.sin(r)*(m+t),m-Math.cos(r)*(m+t)]})},n.range=function(t){return n},n.radius=function(t){return null==t?m:(m=t,c=3*t/2,w=t*Math.sqrt(3),d=c+p.top+p.bottom,h=w+p.left+p.right,b(),n)},n.center=function(){return[w/2,m]},n.height=function(){return c},n.width=function(){return w},n.clip=function(t){return null==t?g:(g=t,n)},n}}).call(this),t.exports=d3.ternary}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,